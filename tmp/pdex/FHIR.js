// Autogenerated by @hestia/resource generator.  Do not edit!
// cspell: disable
var FhirUndefined;
(function (FhirUndefined) {
    /** Base StructureDefinition for base64Binary Type: A stream of bytes */
    var Base64Binary = /** @class */ (function () {
        function Base64Binary() {
            this._content = {};
        }
        Object.defineProperty(Base64Binary.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Base64Binary.prototype.validate = function (value) {
        };
        Base64Binary.url = 'http://hl7.org/fhir/StructureDefinition/base64Binary';
        return Base64Binary;
    }());
    FhirUndefined.Base64Binary = Base64Binary;
    /** Base StructureDefinition for id type: Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive. */
    var Id = /** @class */ (function () {
        function Id() {
            this._content = {};
        }
        Object.defineProperty(Id.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Id.prototype.validate = function (value) {
        };
        Id.url = 'http://hl7.org/fhir/StructureDefinition/id';
        return Id;
    }());
    FhirUndefined.Id = Id;
    /** Base StructureDefinition for boolean Type: Value of "true" or "false" */
    var Boolean = /** @class */ (function () {
        function Boolean() {
            this._content = {};
        }
        Object.defineProperty(Boolean.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Boolean.prototype.validate = function (value) {
        };
        Boolean.url = 'http://hl7.org/fhir/StructureDefinition/boolean';
        return Boolean;
    }());
    FhirUndefined.Boolean = Boolean;
    /** Base StructureDefinition for instant Type: An instant in time - known at least to the second */
    var Instant = /** @class */ (function () {
        function Instant() {
            this._content = {};
        }
        Object.defineProperty(Instant.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Instant.prototype.validate = function (value) {
        };
        Instant.url = 'http://hl7.org/fhir/StructureDefinition/instant';
        return Instant;
    }());
    FhirUndefined.Instant = Instant;
    /** Base StructureDefinition for canonical type: A URI that is a reference to a canonical URL on a FHIR resource */
    var Canonical = /** @class */ (function () {
        function Canonical() {
            this._content = {};
        }
        Object.defineProperty(Canonical.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Canonical.prototype.validate = function (value) {
        };
        Canonical.url = 'http://hl7.org/fhir/StructureDefinition/canonical';
        return Canonical;
    }());
    FhirUndefined.Canonical = Canonical;
    /** Base StructureDefinition for uri Type: String of characters used to identify a name or a resource */
    var Uri = /** @class */ (function () {
        function Uri() {
            this._content = {};
        }
        Object.defineProperty(Uri.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Uri.prototype.validate = function (value) {
        };
        Uri.url = 'http://hl7.org/fhir/StructureDefinition/uri';
        return Uri;
    }());
    FhirUndefined.Uri = Uri;
    /** Base StructureDefinition for code type: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents */
    var Code = /** @class */ (function () {
        function Code() {
            this._content = {};
        }
        Object.defineProperty(Code.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Code.prototype.validate = function (value) {
        };
        Code.url = 'http://hl7.org/fhir/StructureDefinition/code';
        return Code;
    }());
    FhirUndefined.Code = Code;
    /** Base StructureDefinition for date Type: A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates. */
    var Date = /** @class */ (function () {
        function Date() {
            this._content = {};
        }
        Object.defineProperty(Date.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Date.prototype.validate = function (value) {
        };
        Date.url = 'http://hl7.org/fhir/StructureDefinition/date';
        return Date;
    }());
    FhirUndefined.Date = Date;
    /** Base StructureDefinition for string Type: A sequence of Unicode characters */
    var String = /** @class */ (function () {
        function String() {
            this._content = {};
        }
        Object.defineProperty(String.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        String.prototype.validate = function (value) {
        };
        String.url = 'http://hl7.org/fhir/StructureDefinition/string';
        return String;
    }());
    FhirUndefined.String = String;
    /** Base StructureDefinition for Coding Type: A reference to a code defined by a terminology system. */
    var Coding = /** @class */ (function () {
        function Coding() {
            this._content = {};
        }
        Object.defineProperty(Coding.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination). */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Coding.prototype, "display", {
            get: function () {
                return this._content['display'];
            },
            /** A representation of the meaning of the code in the system, following the rules of the system. */
            set: function (value) {
                this._content['display'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Coding.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Coding.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Coding.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** The identification of the code system that defines the meaning of the symbol in the code. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Coding.prototype, "userSelected", {
            get: function () {
                return this._content['userSelected'];
            },
            /** Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays). */
            set: function (value) {
                this._content['userSelected'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Coding.prototype, "version", {
            get: function () {
                return this._content['version'];
            },
            /** The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged. */
            set: function (value) {
                this._content['version'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Coding.url = 'http://hl7.org/fhir/StructureDefinition/Coding';
        return Coding;
    }());
    FhirUndefined.Coding = Coding;
    /** Base StructureDefinition for dateTime Type: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates. */
    var DateTime = /** @class */ (function () {
        function DateTime() {
            this._content = {};
        }
        Object.defineProperty(DateTime.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        DateTime.prototype.validate = function (value) {
        };
        DateTime.url = 'http://hl7.org/fhir/StructureDefinition/dateTime';
        return DateTime;
    }());
    FhirUndefined.DateTime = DateTime;
    /** Base StructureDefinition for decimal Type: A rational number with implicit precision */
    var Decimal = /** @class */ (function () {
        function Decimal() {
            this._content = {};
        }
        Object.defineProperty(Decimal.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Decimal.prototype.validate = function (value) {
        };
        Decimal.url = 'http://hl7.org/fhir/StructureDefinition/decimal';
        return Decimal;
    }());
    FhirUndefined.Decimal = Decimal;
    /** Base StructureDefinition for xhtml Type */
    var Xhtml = /** @class */ (function () {
        function Xhtml() {
            this._content = {};
        }
        Object.defineProperty(Xhtml.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Xhtml.prototype.validate = function (value) {
        };
        Xhtml.url = 'http://hl7.org/fhir/StructureDefinition/xhtml';
        return Xhtml;
    }());
    FhirUndefined.Xhtml = Xhtml;
    /** Base StructureDefinition for Narrative Type: A human-readable summary of the resource conveying the essential clinical and business information for the resource. */
    var Narrative = /** @class */ (function () {
        function Narrative() {
            this._content = {};
        }
        Object.defineProperty(Narrative.prototype, "div", {
            get: function () {
                return this._content['div'];
            },
            /** The actual narrative content, a stripped down version of XHTML. */
            set: function (value) {
                this._content['div'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Narrative.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Narrative.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Narrative.prototype, "status", {
            get: function () {
                return this._content['status'];
            },
            /** The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data. */
            set: function (value) {
                this._content['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Narrative.url = 'http://hl7.org/fhir/StructureDefinition/Narrative';
        return Narrative;
    }());
    FhirUndefined.Narrative = Narrative;
    /** Base StructureDefinition for integer Type: A whole number */
    var Integer = /** @class */ (function () {
        function Integer() {
            this._content = {};
        }
        Object.defineProperty(Integer.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Integer.prototype.validate = function (value) {
        };
        Integer.url = 'http://hl7.org/fhir/StructureDefinition/integer';
        return Integer;
    }());
    FhirUndefined.Integer = Integer;
    /** Base StructureDefinition for markdown type: A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine */
    var Markdown = /** @class */ (function () {
        function Markdown() {
            this._content = {};
        }
        Object.defineProperty(Markdown.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Markdown.prototype.validate = function (value) {
        };
        Markdown.url = 'http://hl7.org/fhir/StructureDefinition/markdown';
        return Markdown;
    }());
    FhirUndefined.Markdown = Markdown;
    /** Base StructureDefinition for oid type: An OID represented as a URI */
    var Oid = /** @class */ (function () {
        function Oid() {
            this._content = {};
        }
        Object.defineProperty(Oid.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Oid.prototype.validate = function (value) {
        };
        Oid.url = 'http://hl7.org/fhir/StructureDefinition/oid';
        return Oid;
    }());
    FhirUndefined.Oid = Oid;
    /** Base StructureDefinition for CodeableConcept Type: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text. */
    var CodeableConcept = /** @class */ (function () {
        function CodeableConcept() {
            this._content = {};
        }
        Object.defineProperty(CodeableConcept.prototype, "coding", {
            get: function () {
                return this._content['coding'];
            },
            /** A reference to a code defined by a terminology system. */
            set: function (value) {
                this._content['coding'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CodeableConcept.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CodeableConcept.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CodeableConcept.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        CodeableConcept.url = 'http://hl7.org/fhir/StructureDefinition/CodeableConcept';
        return CodeableConcept;
    }());
    FhirUndefined.CodeableConcept = CodeableConcept;
    /** Base StructureDefinition for positiveInt type: An integer with a value that is positive (e.g. >0) */
    var PositiveInt = /** @class */ (function () {
        function PositiveInt() {
            this._content = {};
        }
        Object.defineProperty(PositiveInt.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PositiveInt.prototype.validate = function (value) {
        };
        PositiveInt.url = 'http://hl7.org/fhir/StructureDefinition/positiveInt';
        return PositiveInt;
    }());
    FhirUndefined.PositiveInt = PositiveInt;
    /** Base StructureDefinition for Period Type: A time period defined by a start and end date and optionally time. */
    var Period = /** @class */ (function () {
        function Period() {
            this._content = {};
        }
        Object.defineProperty(Period.prototype, "end", {
            get: function () {
                return this._content['end'];
            },
            /** The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time. */
            set: function (value) {
                this._content['end'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "start", {
            get: function () {
                return this._content['start'];
            },
            /** The start of the period. The boundary is inclusive. */
            set: function (value) {
                this._content['start'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Period.url = 'http://hl7.org/fhir/StructureDefinition/Period';
        return Period;
    }());
    FhirUndefined.Period = Period;
    /** Base StructureDefinition for time Type: A time during the day, with no date specified */
    var Time = /** @class */ (function () {
        function Time() {
            this._content = {};
        }
        Object.defineProperty(Time.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Time.prototype.validate = function (value) {
        };
        Time.url = 'http://hl7.org/fhir/StructureDefinition/time';
        return Time;
    }());
    FhirUndefined.Time = Time;
    /** Base StructureDefinition for Reference Type: A reference from one resource to another. */
    var Reference = /** @class */ (function () {
        function Reference() {
            this._content = {};
        }
        Object.defineProperty(Reference.prototype, "display", {
            get: function () {
                return this._content['display'];
            },
            /** Plain text narrative that identifies the resource in addition to the resource reference. */
            set: function (value) {
                this._content['display'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "reference", {
            get: function () {
                return this._content['reference'];
            },
            /** A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources. */
            set: function (value) {
                this._content['reference'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /**
             * The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
             *
             * The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
             */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Reference.url = 'http://hl7.org/fhir/StructureDefinition/Reference';
        return Reference;
    }());
    FhirUndefined.Reference = Reference;
    /** Base StructureDefinition for Identifier Type: An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers. */
    var Identifier = /** @class */ (function () {
        function Identifier() {
            this._content = {};
        }
        Object.defineProperty(Identifier.prototype, "assigner", {
            get: function () {
                return this._content['assigner'];
            },
            /** Organization that issued/manages the identifier. */
            set: function (value) {
                this._content['assigner'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** Time period during which identifier is/was valid for use. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** Establishes the namespace for the value - that is, a URL that describes a set values that are unique. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** A coded type for the identifier that can be used to determine which identifier to use for a specific purpose. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "use", {
            get: function () {
                return this._content['use'];
            },
            /** The purpose of this identifier. */
            set: function (value) {
                this._content['use'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Identifier.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The portion of the identifier typically relevant to the user and which is unique within the context of the system. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Identifier.url = 'http://hl7.org/fhir/StructureDefinition/Identifier';
        return Identifier;
    }());
    FhirUndefined.Identifier = Identifier;
    /** Base StructureDefinition for unsignedInt type: An integer with a value that is not negative (e.g. >= 0) */
    var UnsignedInt = /** @class */ (function () {
        function UnsignedInt() {
            this._content = {};
        }
        Object.defineProperty(UnsignedInt.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        UnsignedInt.prototype.validate = function (value) {
        };
        UnsignedInt.url = 'http://hl7.org/fhir/StructureDefinition/unsignedInt';
        return UnsignedInt;
    }());
    FhirUndefined.UnsignedInt = UnsignedInt;
    /** Base StructureDefinition for ContactPoint Type: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc. */
    var ContactPoint = /** @class */ (function () {
        function ContactPoint() {
            this._content = {};
        }
        Object.defineProperty(ContactPoint.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactPoint.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactPoint.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** Time period when the contact point was/is in use. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactPoint.prototype, "rank", {
            get: function () {
                return this._content['rank'];
            },
            /** Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values. */
            set: function (value) {
                this._content['rank'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactPoint.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** Telecommunications form for contact point - what communications system is required to make use of the contact. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactPoint.prototype, "use", {
            get: function () {
                return this._content['use'];
            },
            /** Identifies the purpose for the contact point. */
            set: function (value) {
                this._content['use'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactPoint.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address). */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        ContactPoint.url = 'http://hl7.org/fhir/StructureDefinition/ContactPoint';
        return ContactPoint;
    }());
    FhirUndefined.ContactPoint = ContactPoint;
    /** Base StructureDefinition for url type: A URI that is a literal reference */
    var Url = /** @class */ (function () {
        function Url() {
            this._content = {};
        }
        Object.defineProperty(Url.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Url.prototype.validate = function (value) {
        };
        Url.url = 'http://hl7.org/fhir/StructureDefinition/url';
        return Url;
    }());
    FhirUndefined.Url = Url;
    /** The technical details of an endpoint that can be used for electronic services, such as a portal or FHIR REST services, messaging or operations, or DIRECT messaging. */
    var PlannetEndpoint = /** @class */ (function () {
        function PlannetEndpoint() {
            this._content = {};
        }
        Object.defineProperty(PlannetEndpoint.prototype, "address", {
            get: function () {
                return this._content['address'];
            },
            /** The uri that describes the actual end-point to connect to. */
            set: function (value) {
                this._content['address'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "connectionType", {
            get: function () {
                return this._content['connectionType'];
            },
            /** A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook). */
            set: function (value) {
                this._content['connectionType'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "contact", {
            get: function () {
                return this._content['contact'];
            },
            /** Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting. */
            set: function (value) {
                this._content['contact'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "header", {
            get: function () {
                return this._content['header'];
            },
            /** Additional headers / information to send as part of the notification. */
            set: function (value) {
                this._content['header'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Identifier for the organization that is used to identify the endpoint across multiple disparate systems. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "managingOrganization", {
            get: function () {
                return this._content['managingOrganization'];
            },
            /** The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data). */
            set: function (value) {
                this._content['managingOrganization'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** A friendly name that this endpoint can be referred to with. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "payloadMimeType", {
            get: function () {
                return this._content['payloadMimeType'];
            },
            /** The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType). */
            set: function (value) {
                this._content['payloadMimeType'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "payloadType", {
            get: function () {
                return this._content['payloadType'];
            },
            /** The payload type describes the acceptable content that can be communicated on the endpoint. */
            set: function (value) {
                this._content['payloadType'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** The interval during which the endpoint is expected to be operational. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "status", {
            get: function () {
                return this._content['status'];
            },
            /** active | suspended | error | off | test. */
            set: function (value) {
                this._content['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetEndpoint.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetEndpoint.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-Endpoint';
        return PlannetEndpoint;
    }());
    FhirUndefined.PlannetEndpoint = PlannetEndpoint;
    /** Base StructureDefinition for uuid type: A UUID, represented as a URI */
    var Uuid = /** @class */ (function () {
        function Uuid() {
            this._content = {};
        }
        Object.defineProperty(Uuid.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            set: function (value) {
                this.validate(value);
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Uuid.prototype.validate = function (value) {
        };
        Uuid.url = 'http://hl7.org/fhir/StructureDefinition/uuid';
        return Uuid;
    }());
    FhirUndefined.Uuid = Uuid;
    /** Base StructureDefinition for Address Type: An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world. */
    var Address = /** @class */ (function () {
        function Address() {
            this._content = {};
        }
        Object.defineProperty(Address.prototype, "city", {
            get: function () {
                return this._content['city'];
            },
            /** The name of the city, town, suburb, village or other community or delivery center. */
            set: function (value) {
                this._content['city'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "country", {
            get: function () {
                return this._content['country'];
            },
            /** Country - a nation as commonly understood or generally accepted. */
            set: function (value) {
                this._content['country'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "district", {
            get: function () {
                return this._content['district'];
            },
            /** The name of the administrative area (county). */
            set: function (value) {
                this._content['district'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "line", {
            get: function () {
                return this._content['line'];
            },
            /** This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information. */
            set: function (value) {
                this._content['line'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** Time period when address was/is in use. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "postalCode", {
            get: function () {
                return this._content['postalCode'];
            },
            /** A postal code designating a region defined by the postal service. */
            set: function (value) {
                this._content['postalCode'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "state", {
            get: function () {
                return this._content['state'];
            },
            /** Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes). */
            set: function (value) {
                this._content['state'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "use", {
            get: function () {
                return this._content['use'];
            },
            /** The purpose of this address. */
            set: function (value) {
                this._content['use'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Address.url = 'http://hl7.org/fhir/StructureDefinition/Address';
        return Address;
    }());
    FhirUndefined.Address = Address;
    /** Base StructureDefinition for Age Type: A duration of time during which an organism (or a process) has existed. */
    var Age = /** @class */ (function () {
        function Age() {
            this._content = {};
        }
        Object.defineProperty(Age.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A computer processable form of the unit in some unit representation system. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Age.prototype, "comparator", {
            get: function () {
                return this._content['comparator'];
            },
            /** How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
            set: function (value) {
                this._content['comparator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Age.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Age.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Age.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** The identification of the system that provides the coded form of the unit. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Age.prototype, "unit", {
            get: function () {
                return this._content['unit'];
            },
            /** A human-readable form of the unit. */
            set: function (value) {
                this._content['unit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Age.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Age.url = 'http://hl7.org/fhir/StructureDefinition/Age';
        return Age;
    }());
    FhirUndefined.Age = Age;
    /** Base StructureDefinition for HumanName Type: A human's name with the ability to identify parts and usage. */
    var HumanName = /** @class */ (function () {
        function HumanName() {
            this._content = {};
        }
        Object.defineProperty(HumanName.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "family", {
            get: function () {
                return this._content['family'];
            },
            /** The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father. */
            set: function (value) {
                this._content['family'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "given", {
            get: function () {
                return this._content['given'];
            },
            /** Given name. */
            set: function (value) {
                this._content['given'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** Indicates the period of time when this name was valid for the named person. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "prefix", {
            get: function () {
                return this._content['prefix'];
            },
            /** Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name. */
            set: function (value) {
                this._content['prefix'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "suffix", {
            get: function () {
                return this._content['suffix'];
            },
            /** Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name. */
            set: function (value) {
                this._content['suffix'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanName.prototype, "use", {
            get: function () {
                return this._content['use'];
            },
            /** Identifies the purpose for this name. */
            set: function (value) {
                this._content['use'] = value;
            },
            enumerable: false,
            configurable: true
        });
        HumanName.url = 'http://hl7.org/fhir/StructureDefinition/HumanName';
        return HumanName;
    }());
    FhirUndefined.HumanName = HumanName;
    /** Base StructureDefinition for Annotation Type: A  text note which also  contains information about who made the statement and when. */
    var Annotation = /** @class */ (function () {
        function Annotation() {
            this._content = {};
        }
        Object.defineProperty(Annotation.prototype, "author", {
            get: function () {
                return this._content['author'];
            },
            /** The individual responsible for making the annotation. */
            set: function (value) {
                this._content['author'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** The text of the annotation in markdown format. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "time", {
            get: function () {
                return this._content['time'];
            },
            /** Indicates when this particular annotation was made. */
            set: function (value) {
                this._content['time'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Annotation.url = 'http://hl7.org/fhir/StructureDefinition/Annotation';
        return Annotation;
    }());
    FhirUndefined.Annotation = Annotation;
    /** Base StructureDefinition for Quantity Type: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. */
    var Quantity = /** @class */ (function () {
        function Quantity() {
            this._content = {};
        }
        Object.defineProperty(Quantity.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A computer processable form of the unit in some unit representation system. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Quantity.prototype, "comparator", {
            get: function () {
                return this._content['comparator'];
            },
            /** How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
            set: function (value) {
                this._content['comparator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Quantity.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Quantity.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Quantity.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** The identification of the system that provides the coded form of the unit. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Quantity.prototype, "unit", {
            get: function () {
                return this._content['unit'];
            },
            /** A human-readable form of the unit. */
            set: function (value) {
                this._content['unit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Quantity.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Quantity.url = 'http://hl7.org/fhir/StructureDefinition/Quantity';
        return Quantity;
    }());
    FhirUndefined.Quantity = Quantity;
    /** Base StructureDefinition for Attachment Type: For referring to data content defined in other formats. */
    var Attachment = /** @class */ (function () {
        function Attachment() {
            this._content = {};
        }
        Object.defineProperty(Attachment.prototype, "contentType", {
            get: function () {
                return this._content['contentType'];
            },
            /** Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate. */
            set: function (value) {
                this._content['contentType'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "creation", {
            get: function () {
                return this._content['creation'];
            },
            /** The date that the attachment was first created. */
            set: function (value) {
                this._content['creation'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "data", {
            get: function () {
                return this._content['data'];
            },
            /** The actual data of the attachment - a sequence of bytes, base64 encoded. */
            set: function (value) {
                this._content['data'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "hash", {
            get: function () {
                return this._content['hash'];
            },
            /** The calculated hash of the data using SHA-1. Represented using base64. */
            set: function (value) {
                this._content['hash'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The human language of the content. The value can be any valid value according to BCP 47. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "size", {
            get: function () {
                return this._content['size'];
            },
            /** The number of bytes of data that make up this attachment (before base64 encoding, if that is done). */
            set: function (value) {
                this._content['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "title", {
            get: function () {
                return this._content['title'];
            },
            /** A label or set of text to display in place of the data. */
            set: function (value) {
                this._content['title'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Attachment.prototype, "url", {
            get: function () {
                return this._content['url'];
            },
            /** A location where the data can be accessed. */
            set: function (value) {
                this._content['url'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Attachment.url = 'http://hl7.org/fhir/StructureDefinition/Attachment';
        return Attachment;
    }());
    FhirUndefined.Attachment = Attachment;
    /** Base StructureDefinition for Money Type: An amount of economic utility in some recognized currency. */
    var Money = /** @class */ (function () {
        function Money() {
            this._content = {};
        }
        Object.defineProperty(Money.prototype, "currency", {
            get: function () {
                return this._content['currency'];
            },
            /** ISO 4217 Currency Code. */
            set: function (value) {
                this._content['currency'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Money.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Money.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Money.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** Numerical value (with implicit precision). */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Money.url = 'http://hl7.org/fhir/StructureDefinition/Money';
        return Money;
    }());
    FhirUndefined.Money = Money;
    /**
     * An InsurancePlan is a discrete package of health insurance coverage benefits that are offered under a particular network type. A given payer’s products typically differ by network type and/or covered benefits. A plan pairs a product’s covered benefits with the particular cost sharing structure offered to a consumer. A given product may comprise multiple plans (i.e. each plan offers different cost sharing requirements for the same set of covered benefits).
     *
     * InsurancePlan describes a health insurance offering comprised of a list of covered benefits (i.e. the product), costs associated with those benefits (i.e. the plan), and additional information about the offering, such as who it is owned and administered by, a coverage area, contact information, etc.
     */
    var PlannetInsurancePlan = /** @class */ (function () {
        function PlannetInsurancePlan() {
            this._content = {};
        }
        Object.defineProperty(PlannetInsurancePlan.prototype, "administeredBy", {
            get: function () {
                return this._content['administeredBy'];
            },
            /** An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner. */
            set: function (value) {
                this._content['administeredBy'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "alias", {
            get: function () {
                return this._content['alias'];
            },
            /** A list of alternate names that the product is known as, or was known as in the past. */
            set: function (value) {
                this._content['alias'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "contact", {
            get: function () {
                return this._content['contact'];
            },
            /** The contact for the health insurance product for a certain purpose. */
            set: function (value) {
                this._content['contact'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "coverage", {
            get: function () {
                return this._content['coverage'];
            },
            /** Details about the coverage offered by the insurance product. */
            set: function (value) {
                this._content['coverage'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "coverageArea", {
            get: function () {
                return this._content['coverageArea'];
            },
            /** The geographic region in which a health insurance product's benefits apply. */
            set: function (value) {
                this._content['coverageArea'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** The technical endpoints providing access to services operated for the health insurance product. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** Official name of the health insurance product as designated by the owner. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "network", {
            get: function () {
                return this._content['network'];
            },
            /** Reference to the network included in the health insurance product. */
            set: function (value) {
                this._content['network'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "ownedBy", {
            get: function () {
                return this._content['ownedBy'];
            },
            /** The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'. */
            set: function (value) {
                this._content['ownedBy'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** The period of time that the health insurance product is available. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "plan", {
            get: function () {
                return this._content['plan'];
            },
            /** Details about an insurance plan. */
            set: function (value) {
                this._content['plan'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "status", {
            get: function () {
                return this._content['status'];
            },
            /** The current state of the health insurance product. */
            set: function (value) {
                this._content['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetInsurancePlan.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The kind of health insurance product. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetInsurancePlan.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-InsurancePlan';
        return PlannetInsurancePlan;
    }());
    FhirUndefined.PlannetInsurancePlan = PlannetInsurancePlan;
    /** Base StructureDefinition for Count Type: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. */
    var Count = /** @class */ (function () {
        function Count() {
            this._content = {};
        }
        Object.defineProperty(Count.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A computer processable form of the unit in some unit representation system. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Count.prototype, "comparator", {
            get: function () {
                return this._content['comparator'];
            },
            /** How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
            set: function (value) {
                this._content['comparator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Count.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Count.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Count.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** The identification of the system that provides the coded form of the unit. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Count.prototype, "unit", {
            get: function () {
                return this._content['unit'];
            },
            /** A human-readable form of the unit. */
            set: function (value) {
                this._content['unit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Count.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Count.url = 'http://hl7.org/fhir/StructureDefinition/Count';
        return Count;
    }());
    FhirUndefined.Count = Count;
    /** Base StructureDefinition for Distance Type: A length - a value with a unit that is a physical distance. */
    var Distance = /** @class */ (function () {
        function Distance() {
            this._content = {};
        }
        Object.defineProperty(Distance.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A computer processable form of the unit in some unit representation system. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Distance.prototype, "comparator", {
            get: function () {
                return this._content['comparator'];
            },
            /** How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
            set: function (value) {
                this._content['comparator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Distance.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Distance.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Distance.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** The identification of the system that provides the coded form of the unit. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Distance.prototype, "unit", {
            get: function () {
                return this._content['unit'];
            },
            /** A human-readable form of the unit. */
            set: function (value) {
                this._content['unit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Distance.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Distance.url = 'http://hl7.org/fhir/StructureDefinition/Distance';
        return Distance;
    }());
    FhirUndefined.Distance = Distance;
    /** Base StructureDefinition for Duration Type: A length of time. */
    var Duration = /** @class */ (function () {
        function Duration() {
            this._content = {};
        }
        Object.defineProperty(Duration.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A computer processable form of the unit in some unit representation system. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Duration.prototype, "comparator", {
            get: function () {
                return this._content['comparator'];
            },
            /** How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
            set: function (value) {
                this._content['comparator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Duration.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Duration.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Duration.prototype, "system", {
            get: function () {
                return this._content['system'];
            },
            /** The identification of the system that provides the coded form of the unit. */
            set: function (value) {
                this._content['system'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Duration.prototype, "unit", {
            get: function () {
                return this._content['unit'];
            },
            /** A human-readable form of the unit. */
            set: function (value) {
                this._content['unit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Duration.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Duration.url = 'http://hl7.org/fhir/StructureDefinition/Duration';
        return Duration;
    }());
    FhirUndefined.Duration = Duration;
    /** Base StructureDefinition for Range Type: A set of ordered Quantities defined by a low and high limit. */
    var Range = /** @class */ (function () {
        function Range() {
            this._content = {};
        }
        Object.defineProperty(Range.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "high", {
            get: function () {
                return this._content['high'];
            },
            /** The high limit. The boundary is inclusive. */
            set: function (value) {
                this._content['high'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "low", {
            get: function () {
                return this._content['low'];
            },
            /** The low limit. The boundary is inclusive. */
            set: function (value) {
                this._content['low'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Range.url = 'http://hl7.org/fhir/StructureDefinition/Range';
        return Range;
    }());
    FhirUndefined.Range = Range;
    /** Base StructureDefinition for Ratio Type: A relationship of two Quantity values - expressed as a numerator and a denominator. */
    var Ratio = /** @class */ (function () {
        function Ratio() {
            this._content = {};
        }
        Object.defineProperty(Ratio.prototype, "denominator", {
            get: function () {
                return this._content['denominator'];
            },
            /** The value of the denominator. */
            set: function (value) {
                this._content['denominator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Ratio.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Ratio.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Ratio.prototype, "numerator", {
            get: function () {
                return this._content['numerator'];
            },
            /** The value of the numerator. */
            set: function (value) {
                this._content['numerator'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Ratio.url = 'http://hl7.org/fhir/StructureDefinition/Ratio';
        return Ratio;
    }());
    FhirUndefined.Ratio = Ratio;
    /** Base StructureDefinition for SampledData Type: A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data. */
    var SampledData = /** @class */ (function () {
        function SampledData() {
            this._content = {};
        }
        Object.defineProperty(SampledData.prototype, "data", {
            get: function () {
                return this._content['data'];
            },
            /** A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value. */
            set: function (value) {
                this._content['data'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "dimensions", {
            get: function () {
                return this._content['dimensions'];
            },
            /** The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once. */
            set: function (value) {
                this._content['dimensions'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "factor", {
            get: function () {
                return this._content['factor'];
            },
            /** A correction factor that is applied to the sampled data points before they are added to the origin. */
            set: function (value) {
                this._content['factor'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "lowerLimit", {
            get: function () {
                return this._content['lowerLimit'];
            },
            /** The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit). */
            set: function (value) {
                this._content['lowerLimit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "origin", {
            get: function () {
                return this._content['origin'];
            },
            /** The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series. */
            set: function (value) {
                this._content['origin'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** The length of time between sampling times, measured in milliseconds. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SampledData.prototype, "upperLimit", {
            get: function () {
                return this._content['upperLimit'];
            },
            /** The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit). */
            set: function (value) {
                this._content['upperLimit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        SampledData.url = 'http://hl7.org/fhir/StructureDefinition/SampledData';
        return SampledData;
    }());
    FhirUndefined.SampledData = SampledData;
    /** Base StructureDefinition for Signature Type: A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities. */
    var Signature = /** @class */ (function () {
        function Signature() {
            this._content = {};
        }
        Object.defineProperty(Signature.prototype, "data", {
            get: function () {
                return this._content['data'];
            },
            /** The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty. */
            set: function (value) {
                this._content['data'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "onBehalfOf", {
            get: function () {
                return this._content['onBehalfOf'];
            },
            /** A reference to an application-usable description of the identity that is represented by the signature. */
            set: function (value) {
                this._content['onBehalfOf'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "sigFormat", {
            get: function () {
                return this._content['sigFormat'];
            },
            /** A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc. */
            set: function (value) {
                this._content['sigFormat'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "targetFormat", {
            get: function () {
                return this._content['targetFormat'];
            },
            /** A mime type that indicates the technical format of the target resources signed by the signature. */
            set: function (value) {
                this._content['targetFormat'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "when", {
            get: function () {
                return this._content['when'];
            },
            /** When the digital signature was signed. */
            set: function (value) {
                this._content['when'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Signature.prototype, "who", {
            get: function () {
                return this._content['who'];
            },
            /** A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key). */
            set: function (value) {
                this._content['who'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Signature.url = 'http://hl7.org/fhir/StructureDefinition/Signature';
        return Signature;
    }());
    FhirUndefined.Signature = Signature;
    /** Base StructureDefinition for Timing Type: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out. */
    var Timing = /** @class */ (function () {
        function Timing() {
            this._content = {};
        }
        Object.defineProperty(Timing.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code). */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Timing.prototype, "event", {
            get: function () {
                return this._content['event'];
            },
            /** Identifies specific times when the event occurs. */
            set: function (value) {
                this._content['event'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Timing.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Timing.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Timing.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Timing.prototype, "repeat", {
            get: function () {
                return this._content['repeat'];
            },
            /** A set of rules that describe when the event is scheduled. */
            set: function (value) {
                this._content['repeat'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Timing.url = 'http://hl7.org/fhir/StructureDefinition/Timing';
        return Timing;
    }());
    FhirUndefined.Timing = Timing;
    /** Base StructureDefinition for ContactDetail Type: Specifies contact information for a person or organization. */
    var ContactDetail = /** @class */ (function () {
        function ContactDetail() {
            this._content = {};
        }
        Object.defineProperty(ContactDetail.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactDetail.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactDetail.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** The name of an individual to contact. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactDetail.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** The contact details for the individual (if a name was provided) or the organization. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        ContactDetail.url = 'http://hl7.org/fhir/StructureDefinition/ContactDetail';
        return ContactDetail;
    }());
    FhirUndefined.ContactDetail = ContactDetail;
    /** Base StructureDefinition for Contributor Type: A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers. */
    var Contributor = /** @class */ (function () {
        function Contributor() {
            this._content = {};
        }
        Object.defineProperty(Contributor.prototype, "contact", {
            get: function () {
                return this._content['contact'];
            },
            /** Contact details to assist a user in finding and communicating with the contributor. */
            set: function (value) {
                this._content['contact'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Contributor.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Contributor.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Contributor.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** The name of the individual or organization responsible for the contribution. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Contributor.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The type of contributor. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Contributor.url = 'http://hl7.org/fhir/StructureDefinition/Contributor';
        return Contributor;
    }());
    FhirUndefined.Contributor = Contributor;
    /** Base StructureDefinition for DataRequirement Type: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. */
    var DataRequirement = /** @class */ (function () {
        function DataRequirement() {
            this._content = {};
        }
        Object.defineProperty(DataRequirement.prototype, "codeFilter", {
            get: function () {
                return this._content['codeFilter'];
            },
            /** Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed. */
            set: function (value) {
                this._content['codeFilter'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "dateFilter", {
            get: function () {
                return this._content['dateFilter'];
            },
            /** Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed. */
            set: function (value) {
                this._content['dateFilter'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "limit", {
            get: function () {
                return this._content['limit'];
            },
            /** Specifies a maximum number of results that are required (uses the _count search parameter). */
            set: function (value) {
                this._content['limit'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "mustSupport", {
            get: function () {
                return this._content['mustSupport'];
            },
            /**
             * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.
             *
             * The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
             */
            set: function (value) {
                this._content['mustSupport'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "profile", {
            get: function () {
                return this._content['profile'];
            },
            /** The profile of the required data, specified as the uri of the profile definition. */
            set: function (value) {
                this._content['profile'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "sort", {
            get: function () {
                return this._content['sort'];
            },
            /** Specifies the order of the results to be returned. */
            set: function (value) {
                this._content['sort'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "subject", {
            get: function () {
                return this._content['subject'];
            },
            /** The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed. */
            set: function (value) {
                this._content['subject'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataRequirement.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        DataRequirement.url = 'http://hl7.org/fhir/StructureDefinition/DataRequirement';
        return DataRequirement;
    }());
    FhirUndefined.DataRequirement = DataRequirement;
    /** Base StructureDefinition for Expression Type: A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used. */
    var Expression = /** @class */ (function () {
        function Expression() {
            this._content = {};
        }
        Object.defineProperty(Expression.prototype, "description", {
            get: function () {
                return this._content['description'];
            },
            /** A brief, natural language description of the condition that effectively communicates the intended semantics. */
            set: function (value) {
                this._content['description'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "expression", {
            get: function () {
                return this._content['expression'];
            },
            /** An expression in the specified language that returns a value. */
            set: function (value) {
                this._content['expression'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The media type of the language for the expression. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Expression.prototype, "reference", {
            get: function () {
                return this._content['reference'];
            },
            /** A URI that defines where the expression is found. */
            set: function (value) {
                this._content['reference'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Expression.url = 'http://hl7.org/fhir/StructureDefinition/Expression';
        return Expression;
    }());
    FhirUndefined.Expression = Expression;
    /** Base StructureDefinition for ParameterDefinition Type: The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse. */
    var ParameterDefinition = /** @class */ (function () {
        function ParameterDefinition() {
            this._content = {};
        }
        Object.defineProperty(ParameterDefinition.prototype, "documentation", {
            get: function () {
                return this._content['documentation'];
            },
            /** A brief discussion of what the parameter is for and how it is used by the module. */
            set: function (value) {
                this._content['documentation'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "max", {
            get: function () {
                return this._content['max'];
            },
            /** The maximum number of times this element is permitted to appear in the request or response. */
            set: function (value) {
                this._content['max'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "min", {
            get: function () {
                return this._content['min'];
            },
            /** The minimum number of times this parameter SHALL appear in the request or response. */
            set: function (value) {
                this._content['min'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** The name of the parameter used to allow access to the value of the parameter in evaluation contexts. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "profile", {
            get: function () {
                return this._content['profile'];
            },
            /** If specified, this indicates a profile that the input data must conform to, or that the output data will conform to. */
            set: function (value) {
                this._content['profile'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The type of the parameter. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ParameterDefinition.prototype, "use", {
            get: function () {
                return this._content['use'];
            },
            /** Whether the parameter is input or output for the module. */
            set: function (value) {
                this._content['use'] = value;
            },
            enumerable: false,
            configurable: true
        });
        ParameterDefinition.url = 'http://hl7.org/fhir/StructureDefinition/ParameterDefinition';
        return ParameterDefinition;
    }());
    FhirUndefined.ParameterDefinition = ParameterDefinition;
    /** Base StructureDefinition for RelatedArtifact Type: Related artifacts such as additional documentation, justification, or bibliographic references. */
    var RelatedArtifact = /** @class */ (function () {
        function RelatedArtifact() {
            this._content = {};
        }
        Object.defineProperty(RelatedArtifact.prototype, "citation", {
            get: function () {
                return this._content['citation'];
            },
            /** A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format. */
            set: function (value) {
                this._content['citation'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "display", {
            get: function () {
                return this._content['display'];
            },
            /** A brief description of the document or knowledge resource being referenced, suitable for display to a consumer. */
            set: function (value) {
                this._content['display'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "document", {
            get: function () {
                return this._content['document'];
            },
            /** The document being referenced, represented as an attachment. This is exclusive with the resource element. */
            set: function (value) {
                this._content['document'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "label", {
            get: function () {
                return this._content['label'];
            },
            /** A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index. */
            set: function (value) {
                this._content['label'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "resource", {
            get: function () {
                return this._content['resource'];
            },
            /** The related resource, such as a library, value set, profile, or other knowledge resource. */
            set: function (value) {
                this._content['resource'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The type of relationship to the related artifact. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RelatedArtifact.prototype, "url", {
            get: function () {
                return this._content['url'];
            },
            /** A url for the artifact that can be followed to access the actual content. */
            set: function (value) {
                this._content['url'] = value;
            },
            enumerable: false,
            configurable: true
        });
        RelatedArtifact.url = 'http://hl7.org/fhir/StructureDefinition/RelatedArtifact';
        return RelatedArtifact;
    }());
    FhirUndefined.RelatedArtifact = RelatedArtifact;
    /** Base StructureDefinition for TriggerDefinition Type: A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element. */
    var TriggerDefinition = /** @class */ (function () {
        function TriggerDefinition() {
            this._content = {};
        }
        Object.defineProperty(TriggerDefinition.prototype, "condition", {
            get: function () {
                return this._content['condition'];
            },
            /** A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires. */
            set: function (value) {
                this._content['condition'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TriggerDefinition.prototype, "data", {
            get: function () {
                return this._content['data'];
            },
            /** The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true. */
            set: function (value) {
                this._content['data'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TriggerDefinition.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TriggerDefinition.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TriggerDefinition.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TriggerDefinition.prototype, "timing", {
            get: function () {
                return this._content['timing'];
            },
            /** The timing of the event (if this is a periodic trigger). */
            set: function (value) {
                this._content['timing'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TriggerDefinition.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The type of triggering event. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        TriggerDefinition.url = 'http://hl7.org/fhir/StructureDefinition/TriggerDefinition';
        return TriggerDefinition;
    }());
    FhirUndefined.TriggerDefinition = TriggerDefinition;
    /** Base StructureDefinition for UsageContext Type: Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care). */
    var UsageContext = /** @class */ (function () {
        function UsageContext() {
            this._content = {};
        }
        Object.defineProperty(UsageContext.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** A code that identifies the type of context being specified by this usage context. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UsageContext.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UsageContext.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UsageContext.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** A value that defines the context specified in this context of use. The interpretation of the value is defined by the code. */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        UsageContext.url = 'http://hl7.org/fhir/StructureDefinition/UsageContext';
        return UsageContext;
    }());
    FhirUndefined.UsageContext = UsageContext;
    /** Base StructureDefinition for Dosage Type: Indicates how the medication is/was taken or should be taken by the patient. */
    var Dosage = /** @class */ (function () {
        function Dosage() {
            this._content = {};
        }
        Object.defineProperty(Dosage.prototype, "additionalInstruction", {
            get: function () {
                return this._content['additionalInstruction'];
            },
            /** Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps"). */
            set: function (value) {
                this._content['additionalInstruction'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "asNeeded", {
            get: function () {
                return this._content['asNeeded'];
            },
            /** Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept). */
            set: function (value) {
                this._content['asNeeded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "doseAndRate", {
            get: function () {
                return this._content['doseAndRate'];
            },
            /** The amount of medication administered. */
            set: function (value) {
                this._content['doseAndRate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "maxDosePerAdministration", {
            get: function () {
                return this._content['maxDosePerAdministration'];
            },
            /** Upper limit on medication per administration. */
            set: function (value) {
                this._content['maxDosePerAdministration'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "maxDosePerLifetime", {
            get: function () {
                return this._content['maxDosePerLifetime'];
            },
            /** Upper limit on medication per lifetime of the patient. */
            set: function (value) {
                this._content['maxDosePerLifetime'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "maxDosePerPeriod", {
            get: function () {
                return this._content['maxDosePerPeriod'];
            },
            /** Upper limit on medication per unit of time. */
            set: function (value) {
                this._content['maxDosePerPeriod'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "method", {
            get: function () {
                return this._content['method'];
            },
            /** Technique for administering medication. */
            set: function (value) {
                this._content['method'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "patientInstruction", {
            get: function () {
                return this._content['patientInstruction'];
            },
            /** Instructions in terms that are understood by the patient or consumer. */
            set: function (value) {
                this._content['patientInstruction'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "route", {
            get: function () {
                return this._content['route'];
            },
            /** How drug should enter body. */
            set: function (value) {
                this._content['route'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "sequence", {
            get: function () {
                return this._content['sequence'];
            },
            /** Indicates the order in which the dosage instructions should be applied or interpreted. */
            set: function (value) {
                this._content['sequence'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "site", {
            get: function () {
                return this._content['site'];
            },
            /** Body site to administer to. */
            set: function (value) {
                this._content['site'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** Free text dosage instructions e.g. SIG. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Dosage.prototype, "timing", {
            get: function () {
                return this._content['timing'];
            },
            /** When medication should be administered. */
            set: function (value) {
                this._content['timing'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Dosage.url = 'http://hl7.org/fhir/StructureDefinition/Dosage';
        return Dosage;
    }());
    FhirUndefined.Dosage = Dosage;
    /**
     * PractionerRole describes details about a provider, which can be a practitioner or an organization. When the provider is a practitioner,
     * there may be a relationship to an organization. A provider renders services to patients at a location. When the provider is a practitioner, there may also
     * be a relationship to an organization. Practitioner participation in healthcare provider insurance networks may be direct or through their role at an organization.
     */
    var PlannetPractitionerRole = /** @class */ (function () {
        function PlannetPractitionerRole() {
            this._content = {};
        }
        Object.defineProperty(PlannetPractitionerRole.prototype, "active", {
            get: function () {
                return this._content['active'];
            },
            /** Whether this practitioner role record is in active use. */
            set: function (value) {
                this._content['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "availabilityExceptions", {
            get: function () {
                return this._content['availabilityExceptions'];
            },
            /** A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times. */
            set: function (value) {
                this._content['availabilityExceptions'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "availableTime", {
            get: function () {
                return this._content['availableTime'];
            },
            /** A collection of times the practitioner is available or performing this role at the location and/or healthcareservice. */
            set: function (value) {
                this._content['availableTime'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** Roles which this practitioner is authorized to perform for the organization. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** Technical endpoints providing access to services operated for the practitioner with this role. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "healthcareService", {
            get: function () {
                return this._content['healthcareService'];
            },
            /** The list of healthcare services that this worker provides for this role's Organization/Location(s). */
            set: function (value) {
                this._content['healthcareService'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Business Identifiers that are specific to a role/location. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "location", {
            get: function () {
                return this._content['location'];
            },
            /** The location(s) at which this practitioner provides care. */
            set: function (value) {
                this._content['location'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "notAvailable", {
            get: function () {
                return this._content['notAvailable'];
            },
            /** The practitioner is not available or performing this role during this period of time due to the provided reason. */
            set: function (value) {
                this._content['notAvailable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "organization", {
            get: function () {
                return this._content['organization'];
            },
            /** The organization where the Practitioner performs the roles associated. */
            set: function (value) {
                this._content['organization'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** The period during which the person is authorized to act as a practitioner in these role(s) for the organization. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "practitioner", {
            get: function () {
                return this._content['practitioner'];
            },
            /** Practitioner that is able to provide the defined services for the organization. */
            set: function (value) {
                this._content['practitioner'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "specialty", {
            get: function () {
                return this._content['specialty'];
            },
            /** Specific specialty of the practitioner. */
            set: function (value) {
                this._content['specialty'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** Contact details that are specific to the role/location/service. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitionerRole.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetPractitionerRole.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-PractitionerRole';
        return PlannetPractitionerRole;
    }());
    FhirUndefined.PlannetPractitionerRole = PlannetPractitionerRole;
    /** Base StructureDefinition for Extension Type: Optional Extension Element - found in all resources. */
    var Extension = /** @class */ (function () {
        function Extension() {
            this._content = {};
        }
        Object.defineProperty(Extension.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Extension.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Extension.prototype, "url", {
            get: function () {
                return this._content['url'];
            },
            /** Source of the definition for the extension code - a logical name or a URL. */
            set: function (value) {
                this._content['url'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Extension.prototype, "value", {
            get: function () {
                return this._content['value'];
            },
            /** Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
            set: function (value) {
                this._content['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Extension.url = 'http://hl7.org/fhir/StructureDefinition/Extension';
        return Extension;
    }());
    FhirUndefined.Extension = Extension;
    /** Base StructureDefinition for Meta Type: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
    var Meta = /** @class */ (function () {
        function Meta() {
            this._content = {};
        }
        Object.defineProperty(Meta.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "lastUpdated", {
            get: function () {
                return this._content['lastUpdated'];
            },
            /** When the resource last changed - e.g. when the version changed. */
            set: function (value) {
                this._content['lastUpdated'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "profile", {
            get: function () {
                return this._content['profile'];
            },
            /** A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url). */
            set: function (value) {
                this._content['profile'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "security", {
            get: function () {
                return this._content['security'];
            },
            /** Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure. */
            set: function (value) {
                this._content['security'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "source", {
            get: function () {
                return this._content['source'];
            },
            /** A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc. */
            set: function (value) {
                this._content['source'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "tag", {
            get: function () {
                return this._content['tag'];
            },
            /** Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource. */
            set: function (value) {
                this._content['tag'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "versionId", {
            get: function () {
                return this._content['versionId'];
            },
            /** The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted. */
            set: function (value) {
                this._content['versionId'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Meta.url = 'http://hl7.org/fhir/StructureDefinition/Meta';
        return Meta;
    }());
    FhirUndefined.Meta = Meta;
    /** Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification. */
    var Basic = /** @class */ (function () {
        function Basic() {
            this._content = {};
        }
        Object.defineProperty(Basic.prototype, "author", {
            get: function () {
                return this._content['author'];
            },
            /** Indicates who was responsible for creating the resource instance. */
            set: function (value) {
                this._content['author'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** Identifies the 'type' of resource - equivalent to the resource name for other resources. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "created", {
            get: function () {
                return this._content['created'];
            },
            /** Identifies when the resource was first created. */
            set: function (value) {
                this._content['created'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Identifier assigned to the resource for business purposes, outside the context of FHIR. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "subject", {
            get: function () {
                return this._content['subject'];
            },
            /** Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource. */
            set: function (value) {
                this._content['subject'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Basic.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Basic.url = 'http://hl7.org/fhir/StructureDefinition/Basic';
        return Basic;
    }());
    FhirUndefined.Basic = Basic;
    /**
     * An organization is a formal or informal grouping of people or organizations with a common purpose, such as a company, institution, corporation, community group, or healthcare practice.
     * Guidance:   When the contact is a department name, rather than a human (e.g., patient help line), include a blank family and given name, and provide the department name in contact.name.text
     */
    var PlannetOrganization = /** @class */ (function () {
        function PlannetOrganization() {
            this._content = {};
        }
        Object.defineProperty(PlannetOrganization.prototype, "active", {
            get: function () {
                return this._content['active'];
            },
            /** Whether the organization's record is still in active use. */
            set: function (value) {
                this._content['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "address", {
            get: function () {
                return this._content['address'];
            },
            /** An address for the organization. */
            set: function (value) {
                this._content['address'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "alias", {
            get: function () {
                return this._content['alias'];
            },
            /** A list of alternate names that the organization is known as, or was known as in the past. */
            set: function (value) {
                this._content['alias'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "contact", {
            get: function () {
                return this._content['contact'];
            },
            /** Contact for the organization for a certain purpose. */
            set: function (value) {
                this._content['contact'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** Technical endpoints providing access to services operated for the organization. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Identifier for the organization that is used to identify the organization across multiple disparate systems. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** A name associated with the organization. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "partOf", {
            get: function () {
                return this._content['partOf'];
            },
            /** The organization of which this organization forms a part. */
            set: function (value) {
                this._content['partOf'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** A contact detail for the organization. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganization.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The kind(s) of organization that this is. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetOrganization.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-Organization';
        return PlannetOrganization;
    }());
    FhirUndefined.PlannetOrganization = PlannetOrganization;
    /**
     * A Location is the physical place where healthcare services are provided, practitioners are employed,
     *                  organizations are based, etc. Locations can range in scope from a room in a building to a geographic region/area.
     */
    var PlannetLocation = /** @class */ (function () {
        function PlannetLocation() {
            this._content = {};
        }
        Object.defineProperty(PlannetLocation.prototype, "address", {
            get: function () {
                return this._content['address'];
            },
            /** Physical location. */
            set: function (value) {
                this._content['address'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "alias", {
            get: function () {
                return this._content['alias'];
            },
            /** A list of alternate names that the location is known as, or was known as, in the past. */
            set: function (value) {
                this._content['alias'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "availabilityExceptions", {
            get: function () {
                return this._content['availabilityExceptions'];
            },
            /** A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times. */
            set: function (value) {
                this._content['availabilityExceptions'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "description", {
            get: function () {
                return this._content['description'];
            },
            /** Description of the Location, which helps in finding or referencing the place. */
            set: function (value) {
                this._content['description'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** Technical endpoints providing access to services operated for the location. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "hoursOfOperation", {
            get: function () {
                return this._content['hoursOfOperation'];
            },
            /** What days/times during a week is this location usually open. */
            set: function (value) {
                this._content['hoursOfOperation'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Unique code or number identifying the location to its users. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "managingOrganization", {
            get: function () {
                return this._content['managingOrganization'];
            },
            /** The organization responsible for the provisioning and upkeep of the location. */
            set: function (value) {
                this._content['managingOrganization'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "mode", {
            get: function () {
                return this._content['mode'];
            },
            /** Indicates whether a resource instance represents a specific location or a class of locations. */
            set: function (value) {
                this._content['mode'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** Name of the location as used by humans. Does not need to be unique. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "operationalStatus", {
            get: function () {
                return this._content['operationalStatus'];
            },
            /** The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance. */
            set: function (value) {
                this._content['operationalStatus'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "partOf", {
            get: function () {
                return this._content['partOf'];
            },
            /** Another Location of which this Location is physically a part of. */
            set: function (value) {
                this._content['partOf'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "physicalType", {
            get: function () {
                return this._content['physicalType'];
            },
            /** Physical form of the location, e.g. building, room, vehicle, road. */
            set: function (value) {
                this._content['physicalType'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "position", {
            get: function () {
                return this._content['position'];
            },
            /** The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML). */
            set: function (value) {
                this._content['position'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "status", {
            get: function () {
                return this._content['status'];
            },
            /** The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location. */
            set: function (value) {
                this._content['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetLocation.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** Indicates the type of function performed at the location. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetLocation.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-Location';
        return PlannetLocation;
    }());
    FhirUndefined.PlannetLocation = PlannetLocation;
    /** Practitioner is a person who is directly or indirectly involved in the provisioning of healthcare. */
    var PlannetPractitioner = /** @class */ (function () {
        function PlannetPractitioner() {
            this._content = {};
        }
        Object.defineProperty(PlannetPractitioner.prototype, "active", {
            get: function () {
                return this._content['active'];
            },
            /** Whether this practitioner's record is in active use. */
            set: function (value) {
                this._content['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "address", {
            get: function () {
                return this._content['address'];
            },
            /** Address(es) of the practitioner that are not role specific (typically home address).
        Work addresses are not typically entered in this property as they are usually role dependent. */
            set: function (value) {
                this._content['address'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "birthDate", {
            get: function () {
                return this._content['birthDate'];
            },
            /** The date of birth for the practitioner. */
            set: function (value) {
                this._content['birthDate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "communication", {
            get: function () {
                return this._content['communication'];
            },
            /** A language the practitioner can use in patient communication. */
            set: function (value) {
                this._content['communication'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "gender", {
            get: function () {
                return this._content['gender'];
            },
            /** Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. */
            set: function (value) {
                this._content['gender'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** An identifier that applies to this person in this role. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** The name(s) associated with the practitioner. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "photo", {
            get: function () {
                return this._content['photo'];
            },
            /** Image of the person. */
            set: function (value) {
                this._content['photo'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "qualification", {
            get: function () {
                return this._content['qualification'];
            },
            /** The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality. */
            set: function (value) {
                this._content['qualification'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** A contact detail for the practitioner, e.g. a telephone number or an email address. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetPractitioner.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetPractitioner.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-Practitioner';
        return PlannetPractitioner;
    }());
    FhirUndefined.PlannetPractitioner = PlannetPractitioner;
    /** The OrganizationAffiliation resource describes relationships between two or more organizations, including the services one organization provides another, the location(s) where they provide services, the availability of those services, electronic endpoints, and other relevant information. */
    var PlannetOrganizationAffiliation = /** @class */ (function () {
        function PlannetOrganizationAffiliation() {
            this._content = {};
        }
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "active", {
            get: function () {
                return this._content['active'];
            },
            /** Whether this organization affiliation record is in active use. */
            set: function (value) {
                this._content['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "code", {
            get: function () {
                return this._content['code'];
            },
            /** Definition of the role the participatingOrganization plays in the association. */
            set: function (value) {
                this._content['code'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** Technical endpoints providing access to services operated for this role. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "healthcareService", {
            get: function () {
                return this._content['healthcareService'];
            },
            /** Healthcare services provided through the role. */
            set: function (value) {
                this._content['healthcareService'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Business identifiers that are specific to this role. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "location", {
            get: function () {
                return this._content['location'];
            },
            /** The location(s) at which the role occurs. */
            set: function (value) {
                this._content['location'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "network", {
            get: function () {
                return this._content['network'];
            },
            /** Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined). */
            set: function (value) {
                this._content['network'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "organization", {
            get: function () {
                return this._content['organization'];
            },
            /** Organization where the role is available (primary organization/has members). */
            set: function (value) {
                this._content['organization'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "participatingOrganization", {
            get: function () {
                return this._content['participatingOrganization'];
            },
            /** The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of). */
            set: function (value) {
                this._content['participatingOrganization'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "period", {
            get: function () {
                return this._content['period'];
            },
            /** The period during which the participatingOrganization is affiliated with the primary organization. */
            set: function (value) {
                this._content['period'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "specialty", {
            get: function () {
                return this._content['specialty'];
            },
            /** Specific specialty of the participatingOrganization in the context of the role. */
            set: function (value) {
                this._content['specialty'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** Contact details at the participatingOrganization relevant to this Affiliation. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetOrganizationAffiliation.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetOrganizationAffiliation.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-OrganizationAffiliation';
        return PlannetOrganizationAffiliation;
    }());
    FhirUndefined.PlannetOrganizationAffiliation = PlannetOrganizationAffiliation;
    /** The HealthCareService resource typically describes services offered by an organization/practitioner at a location. The resource may be used to encompass a variety of services covering the entire healthcare spectrum, including promotion, prevention, diagnostics, pharmacy, hospital and ambulatory care, home care, long-term care, and other health-related and community services. */
    var PlannetHealthcareService = /** @class */ (function () {
        function PlannetHealthcareService() {
            this._content = {};
        }
        Object.defineProperty(PlannetHealthcareService.prototype, "active", {
            get: function () {
                return this._content['active'];
            },
            /** This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this. */
            set: function (value) {
                this._content['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "appointmentRequired", {
            get: function () {
                return this._content['appointmentRequired'];
            },
            /** Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service. */
            set: function (value) {
                this._content['appointmentRequired'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "availabilityExceptions", {
            get: function () {
                return this._content['availabilityExceptions'];
            },
            /** A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times. */
            set: function (value) {
                this._content['availabilityExceptions'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "availableTime", {
            get: function () {
                return this._content['availableTime'];
            },
            /** A collection of times that the Service Site is available. */
            set: function (value) {
                this._content['availableTime'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "category", {
            get: function () {
                return this._content['category'];
            },
            /** Identifies the broad category of service being performed or delivered. */
            set: function (value) {
                this._content['category'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "characteristic", {
            get: function () {
                return this._content['characteristic'];
            },
            /** Collection of characteristics (attributes). */
            set: function (value) {
                this._content['characteristic'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "comment", {
            get: function () {
                return this._content['comment'];
            },
            /** Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName. */
            set: function (value) {
                this._content['comment'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "communication", {
            get: function () {
                return this._content['communication'];
            },
            /** Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used. */
            set: function (value) {
                this._content['communication'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "coverageArea", {
            get: function () {
                return this._content['coverageArea'];
            },
            /** The location(s) that this service is available to (not where the service is provided). */
            set: function (value) {
                this._content['coverageArea'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "eligibility", {
            get: function () {
                return this._content['eligibility'];
            },
            /** Does this service have specific eligibility requirements that need to be met in order to use the service? */
            set: function (value) {
                this._content['eligibility'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** Technical endpoints providing access to services operated for the specific healthcare services defined at this resource. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "extraDetails", {
            get: function () {
                return this._content['extraDetails'];
            },
            /** Extra details about the service that can't be placed in the other fields. */
            set: function (value) {
                this._content['extraDetails'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** External identifiers for this item. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "location", {
            get: function () {
                return this._content['location'];
            },
            /** The location(s) where this healthcare service may be provided. */
            set: function (value) {
                this._content['location'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** Further description of the service as it would be presented to a consumer while searching. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "notAvailable", {
            get: function () {
                return this._content['notAvailable'];
            },
            /** The HealthcareService is not available during this period of time due to the provided reason. */
            set: function (value) {
                this._content['notAvailable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "photo", {
            get: function () {
                return this._content['photo'];
            },
            /** If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list. */
            set: function (value) {
                this._content['photo'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "program", {
            get: function () {
                return this._content['program'];
            },
            /** Programs that this service is applicable to. */
            set: function (value) {
                this._content['program'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "providedBy", {
            get: function () {
                return this._content['providedBy'];
            },
            /** The organization that provides this healthcare service. */
            set: function (value) {
                this._content['providedBy'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "referralMethod", {
            get: function () {
                return this._content['referralMethod'];
            },
            /** Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required. */
            set: function (value) {
                this._content['referralMethod'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "serviceProvisionCode", {
            get: function () {
                return this._content['serviceProvisionCode'];
            },
            /** The code(s) that detail the conditions under which the healthcare service is available/offered. */
            set: function (value) {
                this._content['serviceProvisionCode'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "specialty", {
            get: function () {
                return this._content['specialty'];
            },
            /** Collection of specialties handled by the service site. This is more of a medical term. */
            set: function (value) {
                this._content['specialty'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** List of contacts related to this specific healthcare service. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetHealthcareService.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The specific type of service that may be delivered or performed. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetHealthcareService.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-HealthcareService';
        return PlannetHealthcareService;
    }());
    FhirUndefined.PlannetHealthcareService = PlannetHealthcareService;
    /**
     * A Network refers to a healthcare provider insurance network. A healthcare provider insurance network is an aggregation of organizations and individuals that deliver a set of services across a geography through health insurance products/plans. A network is typically owned by a payer.
     *
     * In the PlanNet IG, individuals and organizations are represented as participants in a PLan-Net Network through the practitionerRole and Plan-Net-organizationAffiliation resources, respectively.
     */
    var PlannetNetwork = /** @class */ (function () {
        function PlannetNetwork() {
            this._content = {};
        }
        Object.defineProperty(PlannetNetwork.prototype, "active", {
            get: function () {
                return this._content['active'];
            },
            /** Whether the organization's record is still in active use. */
            set: function (value) {
                this._content['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "address", {
            get: function () {
                return this._content['address'];
            },
            /** An address for the organization. */
            set: function (value) {
                this._content['address'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "alias", {
            get: function () {
                return this._content['alias'];
            },
            /** A list of alternate names that the organization is known as, or was known as in the past. */
            set: function (value) {
                this._content['alias'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "contact", {
            get: function () {
                return this._content['contact'];
            },
            /** Contact for the organization for a certain purpose. */
            set: function (value) {
                this._content['contact'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "contained", {
            get: function () {
                return this._content['contained'];
            },
            /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
            set: function (value) {
                this._content['contained'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "endpoint", {
            get: function () {
                return this._content['endpoint'];
            },
            /** Technical endpoints providing access to services operated for the organization. */
            set: function (value) {
                this._content['endpoint'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "extension", {
            get: function () {
                return this._content['extension'];
            },
            /** An Extension */
            set: function (value) {
                this._content['extension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "id", {
            get: function () {
                return this._content['id'];
            },
            /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
            set: function (value) {
                this._content['id'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "identifier", {
            get: function () {
                return this._content['identifier'];
            },
            /** Identifier for the organization that is used to identify the organization across multiple disparate systems. */
            set: function (value) {
                this._content['identifier'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "implicitRules", {
            get: function () {
                return this._content['implicitRules'];
            },
            /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
            set: function (value) {
                this._content['implicitRules'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "language", {
            get: function () {
                return this._content['language'];
            },
            /** The base language in which the resource is written. */
            set: function (value) {
                this._content['language'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "meta", {
            get: function () {
                return this._content['meta'];
            },
            /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
            set: function (value) {
                this._content['meta'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "modifierExtension", {
            get: function () {
                return this._content['modifierExtension'];
            },
            /**
             * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
             *
             * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
             */
            set: function (value) {
                this._content['modifierExtension'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "name", {
            get: function () {
                return this._content['name'];
            },
            /** A name associated with the organization. */
            set: function (value) {
                this._content['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "partOf", {
            get: function () {
                return this._content['partOf'];
            },
            /** The organization of which this organization forms a part. */
            set: function (value) {
                this._content['partOf'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "telecom", {
            get: function () {
                return this._content['telecom'];
            },
            /** A contact detail for the organization. */
            set: function (value) {
                this._content['telecom'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "text", {
            get: function () {
                return this._content['text'];
            },
            /** A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
            set: function (value) {
                this._content['text'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlannetNetwork.prototype, "type", {
            get: function () {
                return this._content['type'];
            },
            /** The kind(s) of organization that this is. */
            set: function (value) {
                this._content['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        PlannetNetwork.url = 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/plannet-Network';
        return PlannetNetwork;
    }());
    FhirUndefined.PlannetNetwork = PlannetNetwork;
})(FhirUndefined || (FhirUndefined = {}));
