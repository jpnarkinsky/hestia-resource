// Autogenerated by src/generate.  Do not edit!
// cspell: disable
namespace FhirDstu2 {
  export type TElement =
    | string
    | string[]
    | number
    | number[]
    | boolean
    | Resource
    | Resource[]
    | Address
    | Address[]
    | Age
    | Age[]
    | Annotation
    | Annotation[]
    | Attachment
    | Attachment[]
    | BackboneElement
    | BackboneElement[]
    | Base64Binary
    | Base64Binary[]
    | Boolean
    | Boolean[]
    | Code
    | Code[]
    | CodeableConcept
    | CodeableConcept[]
    | Coding
    | Coding[]
    | ContactPoint
    | ContactPoint[]
    | Count
    | Count[]
    | Date
    | Date[]
    | DateTime
    | DateTime[]
    | Decimal
    | Decimal[]
    | Distance
    | Distance[]
    | Duration
    | Duration[]
    | Element
    | Element[]
    | ElementDefinition
    | ElementDefinition[]
    | Extension
    | Extension[]
    | HumanName
    | HumanName[]
    | Id
    | Id[]
    | Identifier
    | Identifier[]
    | Instant
    | Instant[]
    | Integer
    | Integer[]
    | Markdown
    | Markdown[]
    | Meta
    | Meta[]
    | Money
    | Money[]
    | Narrative
    | Narrative[]
    | Oid
    | Oid[]
    | Period
    | Period[]
    | PositiveInt
    | PositiveInt[]
    | Quantity
    | Quantity[]
    | Range
    | Range[]
    | Ratio
    | Ratio[]
    | Reference
    | Reference[]
    | SampledData
    | SampledData[]
    | Signature
    | Signature[]
    | SimpleQuantity
    | SimpleQuantity[]
    | String
    | String[]
    | Time
    | Time[]
    | Timing
    | Timing[]
    | UnsignedInt
    | UnsignedInt[]
    | Uri
    | Uri[]
    | Uuid
    | Uuid[];

  /** Root of fhir class hierarchy */
  abstract class Base {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Base";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Base class for all data elements
     *
     * @content {Object} value
     */
    constructor(content: { [key: string]: TElement }) {
      Object.assign(this._content, content);
      this._content.resourceType = this.constructor.name;
    }
  }

  /** Base StructureDefinition for ValueSet Resource */
  export class ValueSet {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ValueSet";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A value set can also be "expanded", where the value set is turned into a
     * simple collection of enumerated codes. This element holds the expansion,
     * if it has been performed.
     */
    set expansion(value: BackboneElement) {
      this._content["expansion"] = value;
    }

    get expansion(): BackboneElement {
      return this._content["expansion"] as BackboneElement;
    }

    /**
     * A set of criteria that provide the content logical definition of the
     * value set by including or excluding codes from outside this value set.
     */
    set compose(value: BackboneElement) {
      this._content["compose"] = value;
    }

    get compose(): BackboneElement {
      return this._content["compose"] as BackboneElement;
    }

    /**
     * A definition of a code system, inlined into the value set (as a packaging
     * convenience). Note that the inline code system may be used from other
     * value sets by referring to its (codeSystem.system) directly.
     */
    set codeSystem(value: BackboneElement) {
      this._content["codeSystem"] = value;
    }

    get codeSystem(): BackboneElement {
      return this._content["codeSystem"] as BackboneElement;
    }

    /** Whether this is intended to be used with an extensible binding or not. */
    set extensible(value: Boolean) {
      this._content["extensible"] = value;
    }

    get extensible(): Boolean {
      return this._content["extensible"] as Boolean;
    }

    /**
     * A copyright statement relating to the value set and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the value set.
     */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * Explains why this value set is needed and why it has been constrained as
     * it has.
     */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /**
     * If this is set to 'true', then no new versions of the content logical
     * definition can be created. Note: Other metadata might still change.
     */
    set immutable(value: Boolean) {
      this._content["immutable"] = value;
    }

    get immutable(): Boolean {
      return this._content["immutable"] as Boolean;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of value set definitions.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /**
     * A free text natural language description of the use of the value set -
     * reason for definition, "the semantic space" to be included in the value
     * set, conditions of use, etc. The description may include a list of
     * expected usages for the value set and can also describe the approach
     * taken to build the value set.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * If a locked date is defined, then the Content Logical Definition must be
     * evaluated using the current version of all referenced code system(s) and
     * value set instances as of the locked date.
     */
    set lockedDate(value: Date) {
      this._content["lockedDate"] = value;
    }

    get lockedDate(): Date {
      return this._content["lockedDate"] as Date;
    }

    /**
     * The date that the value set status was last changed. The date must change
     * when the business version changes, if it does, and it must change if the
     * status code changes. In addition, it should change when the substantive
     * content of the implementation guide changes (e.g. the 'content logical
     * definition').
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /** The name of the individual or organization that published the value set. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * This valueset was authored for testing purposes (or
     * education/evaluation/marketing), and is not intended to be used for
     * genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of the value set. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name describing the value set. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Used to identify this version of the value set when it is referenced in a
     * specification, model, design or instance. This is an arbitrary value
     * managed by the profile author manually and the value should be a
     * timestamp.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * Formal identifier that is used to identify this value set when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * An absolute URL that is used to identify this value set when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this value set is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /** A value set specifies a set of codes drawn from one or more code systems. */
    set ValueSet(value: Array<DomainResource>) {
      this._content["ValueSet"] = value;
    }

    get ValueSet(): Array<DomainResource> {
      return this._content["ValueSet"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Parameters Resource */
  export class Parameters {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Parameters";
    protected _content: { [key: string]: TElement } = {};

    /** A parameter passed to or received from the operation. */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }

    /**
     * This special resource type is used to represent an operation request and
     * response (operations.html). It has no other use, and there is no RESTful
     * endpoint associated with it.
     */
    set Parameters(value: Array<Resource>) {
      this._content["Parameters"] = value;
    }

    get Parameters(): Array<Resource> {
      return this._content["Parameters"] as Array<Resource>;
    }
  }

  /** Base StructureDefinition for Resource Resource */
  export abstract class Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Resource";
    protected _content: { [key: string]: TElement } = {};

    /** The base language in which the resource is written. */
    set language(value: Code) {
      this._content["language"] = value;
    }

    get language(): Code {
      return this._content["language"] as Code;
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     */
    set implicitRules(value: Uri) {
      this._content["implicitRules"] = value;
    }

    get implicitRules(): Uri {
      return this._content["implicitRules"] as Uri;
    }

    /**
     * The metadata about the resource. This is content that is maintained by
     * the infrastructure. Changes to the content may not always be associated
     * with version changes to the resource.
     */
    set meta(value: Meta) {
      this._content["meta"] = value;
    }

    get meta(): Meta {
      return this._content["meta"] as Meta;
    }

    /**
     * The logical id of the resource, as used in the URL for the resource. Once
     * assigned, this value never changes.
     */
    set id(value: Id) {
      this._content["id"] = value;
    }

    get id(): Id {
      return this._content["id"] as Id;
    }
  }

  /** Base StructureDefinition for DomainResource Resource */
  export abstract class DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DomainResource";
    protected _content: { [key: string]: TElement } = {};

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the resource, and that modifies the understanding of
     * the element that contains it. Usually modifier elements provide negation
     * or qualification. In order to make the use of extensions safe and
     * manageable, there is a strict set of governance applied to the definition
     * and use of extensions. Though any implementer is allowed to define an
     * extension, there is a set of requirements that SHALL be met as part of
     * the definition of the extension. Applications processing a resource are
     * required to check for modifier extensions.
     */
    set modifierExtension(value: Array<Extension>) {
      this._content["modifierExtension"] = value;
    }

    get modifierExtension(): Array<Extension> {
      return this._content["modifierExtension"] as Array<Extension>;
    }

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the resource. In order to make the use of extensions
     * safe and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met as
     * part of the definition of the extension.
     */
    set extension(value: Array<Extension>) {
      this._content["extension"] = value;
    }

    get extension(): Array<Extension> {
      return this._content["extension"] as Array<Extension>;
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    set contained(value: Array<Resource>) {
      this._content["contained"] = value;
    }

    get contained(): Array<Resource> {
      return this._content["contained"] as Array<Resource>;
    }

    /**
     * A human-readable narrative that contains a summary of the resource, and
     * may be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    set text(value: Narrative) {
      this._content["text"] = value;
    }

    get text(): Narrative {
      return this._content["text"] as Narrative;
    }

    /** A resource that includes narrative, extensions, and contained resources. */
    set DomainResource(value: Array<Resource>) {
      this._content["DomainResource"] = value;
    }

    get DomainResource(): Array<Resource> {
      return this._content["DomainResource"] as Array<Resource>;
    }
  }

  /** Base StructureDefinition for Account Resource */
  export class Account {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Account";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Provides additional information about what the account tracks and how it
     * is used.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Indicates the organization, department, etc. with responsibility for the
     * account.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /**
     * Identifies the patient, device, practitioner, location or other object
     * the account is associated with.
     */
    set subject(
      value:
        | Reference
        | Reference
        | Reference
        | Reference
        | Reference
        | Reference,
    ) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Identifies the period of time the account applies to; e.g. accounts
     * created per fiscal year, quarter, etc.
     */
    set coveragePeriod(value: Period) {
      this._content["coveragePeriod"] = value;
    }

    get coveragePeriod(): Period {
      return this._content["coveragePeriod"] as Period;
    }

    /**
     * Represents the sum of all credits less all debits associated with the
     * account. Might be positive, zero or negative.
     */
    set balance(value: Quantity) {
      this._content["balance"] = value;
    }

    get balance(): Quantity {
      return this._content["balance"] as Quantity;
    }

    /**
     * Identifies the currency to which transactions must be converted when
     * crediting or debiting the account.
     */
    set currency(value: Coding) {
      this._content["currency"] = value;
    }

    get currency(): Coding {
      return this._content["currency"] as Coding;
    }

    /** Indicates the period of time over which the account is allowed. */
    set activePeriod(value: Period) {
      this._content["activePeriod"] = value;
    }

    get activePeriod(): Period {
      return this._content["activePeriod"] as Period;
    }

    /** Indicates whether the account is presently used/useable or not. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Categorizes the account for reporting and searching purposes. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** Name used for the account when displaying it to humans in reports, etc. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Unique identifier used to reference the account. May or may not be
     * intended for human use (e.g. credit card number).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A financial tool for tracking value accrued for a particular purpose. In
     * the healthcare field, used to track charges for a patient, cost centres,
     * etc.
     */
    set Account(value: Array<DomainResource>) {
      this._content["Account"] = value;
    }

    get Account(): Array<DomainResource> {
      return this._content["Account"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for AllergyIntolerance Resource */
  export class AllergyIntolerance {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Details about each adverse reaction event linked to exposure to the
     * identified Substance.
     */
    set reaction(value: Array<BackboneElement>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<BackboneElement> {
      return this._content["reaction"] as Array<BackboneElement>;
    }

    /**
     * Additional narrative about the propensity for the Adverse Reaction, not
     * captured in other fields.
     */
    set note(value: Annotation) {
      this._content["note"] = value;
    }

    get note(): Annotation {
      return this._content["note"] as Annotation;
    }

    /**
     * Represents the date and/or time of the last known occurrence of a
     * reaction event.
     */
    set lastOccurence(value: DateTime) {
      this._content["lastOccurence"] = value;
    }

    get lastOccurence(): DateTime {
      return this._content["lastOccurence"] as DateTime;
    }

    /** Category of the identified Substance. */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /**
     * Identification of the underlying physiological mechanism for the reaction
     * risk.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction
     * to the identified Substance.
     */
    set criticality(value: Code) {
      this._content["criticality"] = value;
    }

    get criticality(): Code {
      return this._content["criticality"] as Code;
    }

    /**
     * Assertion about certainty associated with the propensity, or potential
     * risk, of a reaction to the identified Substance.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identification of a substance, or a class of substances, that is
     * considered to be responsible for the adverse reaction risk.
     */
    set substance(value: CodeableConcept) {
      this._content["substance"] = value;
    }

    get substance(): CodeableConcept {
      return this._content["substance"] as CodeableConcept;
    }

    /** The source of the information about the allergy that is recorded. */
    set reporter(value: Reference | Reference | Reference) {
      this._content["reporter"] = value;
    }

    get reporterReference(): Reference {
      return this._content["reporter"] as Reference;
    }

    get reporterReference(): Reference {
      return this._content["reporter"] as Reference;
    }

    get reporterReference(): Reference {
      return this._content["reporter"] as Reference;
    }

    /** The patient who has the allergy or intolerance. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * conten.
     */
    set recorder(value: Reference | Reference) {
      this._content["recorder"] = value;
    }

    get recorderReference(): Reference {
      return this._content["recorder"] as Reference;
    }

    get recorderReference(): Reference {
      return this._content["recorder"] as Reference;
    }

    /** Date when the sensitivity was recorded. */
    set recordedDate(value: DateTime) {
      this._content["recordedDate"] = value;
    }

    get recordedDate(): DateTime {
      return this._content["recordedDate"] as DateTime;
    }

    /**
     * Record of the date and/or time of the onset of the Allergy or
     * Intolerance.
     */
    set onset(value: DateTime) {
      this._content["onset"] = value;
    }

    get onset(): DateTime {
      return this._content["onset"] as DateTime;
    }

    /**
     * This records identifiers associated with this allergy/intolerance concern
     * that are defined by business processes and/or used to refer to it when a
     * direct URL reference to the resource itself is not appropriate (e.g. in
     * CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Risk of harmful or undesirable, physiological response which is unique to
     * an individual and associated with exposure to a substance.
     */
    set AllergyIntolerance(value: Array<DomainResource>) {
      this._content["AllergyIntolerance"] = value;
    }

    get AllergyIntolerance(): Array<DomainResource> {
      return this._content["AllergyIntolerance"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Appointment Resource */
  export class Appointment {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Appointment";
    protected _content: { [key: string]: TElement } = {};

    /** List of participants involved in the appointment. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** Additional comments about the appointment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * The slot that this appointment is filling. If provided then the schedule
     * will not be provided as slots are not recursive, and the start/end values
     * MUST be the same as from the slot.
     */
    set slot(value: Array<Reference>) {
      this._content["slot"] = value;
    }

    get slot(): Array<Reference> {
      return this._content["slot"] as Array<Reference>;
    }

    /**
     * Number of minutes that the appointment is to take. This can be less than
     * the duration between the start and end times (where actual time of
     * appointment is only an estimate or is a planned appointment request).
     */
    set minutesDuration(value: PositiveInt) {
      this._content["minutesDuration"] = value;
    }

    get minutesDuration(): PositiveInt {
      return this._content["minutesDuration"] as PositiveInt;
    }

    /** Date/Time that the appointment is to conclude. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /** Date/Time that the appointment is to take place. */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /**
     * The brief description of the appointment as would be shown on a subject
     * line in a meeting request, or appointment list. Detailed or expanded
     * information should be put in the comment field.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The priority of the appointment. Can be used to make informed decisions
     * if needing to re-prioritize appointments. (The iCal Standard specifies 0
     * as undefined, 1 as highest, 9 as lowest priority).
     */
    set priority(value: UnsignedInt) {
      this._content["priority"] = value;
    }

    get priority(): UnsignedInt {
      return this._content["priority"] as UnsignedInt;
    }

    /**
     * The reason that this appointment is being scheduled. This is more
     * clinical than administrative.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * The type of appointment that is being booked (This may also be associated
     * with participants for location, and/or a HealthcareService).
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The overall status of the Appointment. Each of the participants has their
     * own participation status which indicates their involvement in the
     * process, however this status indicates the shared status.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * This records identifiers associated with this appointment concern that
     * are defined by business processes and/or used to refer to it when a
     * direct URL reference to the resource itself is not appropriate (e.g. in
     * CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A booking of a healthcare event among patient(s), practitioner(s),
     * related person(s) and/or device(s) for a specific date/time. This may
     * result in one or more Encounter(s).
     */
    set Appointment(value: Array<DomainResource>) {
      this._content["Appointment"] = value;
    }

    get Appointment(): Array<DomainResource> {
      return this._content["Appointment"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for AppointmentResponse Resource */
  export class AppointmentResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AppointmentResponse";
    protected _content: { [key: string]: TElement } = {};

    /** Additional comments about the appointment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * Participation status of the participant. When the status is declined or
     * tentative if the start/end times are different to the appointment, then
     * these times should be interpreted as a requested time change. When the
     * status is accepted, the times can either be the time of the appointment
     * (as a confirmation of the time) or can be empty.
     */
    set participantStatus(value: Code) {
      this._content["participantStatus"] = value;
    }

    get participantStatus(): Code {
      return this._content["participantStatus"] as Code;
    }

    /**
     * A Person, Location/HealthcareService or Device that is participating in
     * the appointment.
     */
    set actor(
      value:
        | Reference
        | Reference
        | Reference
        | Reference
        | Reference
        | Reference,
    ) {
      this._content["actor"] = value;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    /** Role of participant in the appointment. */
    set participantType(value: Array<CodeableConcept>) {
      this._content["participantType"] = value;
    }

    get participantType(): Array<CodeableConcept> {
      return this._content["participantType"] as Array<CodeableConcept>;
    }

    /**
     * This may be either the same as the appointment request to confirm the
     * details of the appointment, or alternately a new time to request a
     * re-negotiation of the end time.
     */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * Date/Time that the appointment is to take place, or requested new start
     * time.
     */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /** Appointment that this response is replying to. */
    set appointment(value: Reference) {
      this._content["appointment"] = value;
    }

    get appointment(): Reference {
      return this._content["appointment"] as Reference;
    }

    /**
     * This records identifiers associated with this appointment response
     * concern that are defined by business processes and/ or used to refer to
     * it when a direct URL reference to the resource itself is not
     * appropriate.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A reply to an appointment request for a patient and/or practitioner(s),
     * such as a confirmation or rejection.
     */
    set AppointmentResponse(value: Array<DomainResource>) {
      this._content["AppointmentResponse"] = value;
    }

    get AppointmentResponse(): Array<DomainResource> {
      return this._content["AppointmentResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for AuditEvent Resource */
  export class AuditEvent {
    static url: string = "http://hl7.org/fhir/StructureDefinition/AuditEvent";
    protected _content: { [key: string]: TElement } = {};

    /** Specific instances of data or objects that have been accessed. */
    set object(value: Array<BackboneElement>) {
      this._content["object"] = value;
    }

    get object(): Array<BackboneElement> {
      return this._content["object"] as Array<BackboneElement>;
    }

    /** Application systems and processes. */
    set source(value: BackboneElement) {
      this._content["source"] = value;
    }

    get source(): BackboneElement {
      return this._content["source"] as BackboneElement;
    }

    /** A person, a hardware device or software process. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * Identifies the name, action type, time, and disposition of the audited
     * event.
     */
    set event(value: BackboneElement) {
      this._content["event"] = value;
    }

    get event(): BackboneElement {
      return this._content["event"] as BackboneElement;
    }

    /**
     * A record of an event made for purposes of maintaining a security log.
     * Typical uses include detection of intrusion attempts and monitoring for
     * inappropriate usage.
     */
    set AuditEvent(value: Array<DomainResource>) {
      this._content["AuditEvent"] = value;
    }

    get AuditEvent(): Array<DomainResource> {
      return this._content["AuditEvent"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Basic Resource */
  export class Basic {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Basic";
    protected _content: { [key: string]: TElement } = {};

    /** Identifies when the resource was first created. */
    set created(value: Date) {
      this._content["created"] = value;
    }

    get created(): Date {
      return this._content["created"] as Date;
    }

    /** Indicates who was responsible for creating the resource instance. */
    set author(value: Reference | Reference | Reference) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Identifies the patient, practitioner, device or any other resource that
     * is the "focus" of this resource.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Identifies the 'type' of resource - equivalent to the resource name for
     * other resources.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Identifier assigned to the resource for business purposes, outside the
     * context of FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Basic is used for handling concepts not yet defined in FHIR,
     * narrative-only resources that don't map to an existing resource, and
     * custom resources not appropriate for inclusion in the FHIR
     * specification.
     */
    set Basic(value: Array<DomainResource>) {
      this._content["Basic"] = value;
    }

    get Basic(): Array<DomainResource> {
      return this._content["Basic"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Binary Resource */
  export class Binary {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Binary";
    protected _content: { [key: string]: TElement } = {};

    /** The actual content, base64 encoded. */
    set content(value: Base64Binary) {
      this._content["content"] = value;
    }

    get content(): Base64Binary {
      return this._content["content"] as Base64Binary;
    }

    /**
     * MimeType of the binary content represented as a standard MimeType (BCP
     * 13).
     */
    set contentType(value: Code) {
      this._content["contentType"] = value;
    }

    get contentType(): Code {
      return this._content["contentType"] as Code;
    }

    /**
     * A binary resource can contain any content, whether text, image, pdf, zip
     * archive, etc.
     */
    set Binary(value: Array<Resource>) {
      this._content["Binary"] = value;
    }

    get Binary(): Array<Resource> {
      return this._content["Binary"] as Array<Resource>;
    }
  }

  /** Base StructureDefinition for BodySite Resource */
  export class BodySite {
    static url: string = "http://hl7.org/fhir/StructureDefinition/BodySite";
    protected _content: { [key: string]: TElement } = {};

    /** Image or images used to identify a location. */
    set image(value: Array<Attachment>) {
      this._content["image"] = value;
    }

    get image(): Array<Attachment> {
      return this._content["image"] as Array<Attachment>;
    }

    /** Description of anatomical location. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Modifier to refine the anatomical location. These include modifiers for
     * laterality, relative location, directionality, number, and plane.
     */
    set modifier(value: Array<CodeableConcept>) {
      this._content["modifier"] = value;
    }

    get modifier(): Array<CodeableConcept> {
      return this._content["modifier"] as Array<CodeableConcept>;
    }

    /** Named anatomical location - ideally coded where possible. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Identifier for this instance of the anatomical location. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The person to which the body site belongs. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Record details about the anatomical location of a specimen or body part.
     * This resource may be used when a coded concept does not provide the
     * necessary detail needed for the use case.
     */
    set BodySite(value: Array<DomainResource>) {
      this._content["BodySite"] = value;
    }

    get BodySite(): Array<DomainResource> {
      return this._content["BodySite"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Bundle Resource */
  export class Bundle {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Bundle";
    protected _content: { [key: string]: TElement } = {};

    /** Digital Signature - base64 encoded. XML DigSIg or a JWT. */
    set signature(value: Signature) {
      this._content["signature"] = value;
    }

    get signature(): Signature {
      return this._content["signature"] as Signature;
    }

    /**
     * An entry in a bundle resource - will either contain a resource, or
     * information about a resource (transactions and history only).
     */
    set entry(value: Array<BackboneElement>) {
      this._content["entry"] = value;
    }

    get entry(): Array<BackboneElement> {
      return this._content["entry"] as Array<BackboneElement>;
    }

    /** A series of links that provide context to this bundle. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /**
     * If a set of search matches, this is the total number of matches for the
     * search (as opposed to the number of results in this bundle).
     */
    set total(value: UnsignedInt) {
      this._content["total"] = value;
    }

    get total(): UnsignedInt {
      return this._content["total"] as UnsignedInt;
    }

    /** Indicates the purpose of this bundle- how it was intended to be used. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** A container for a collection of resources. */
    set Bundle(value: Array<Resource>) {
      this._content["Bundle"] = value;
    }

    get Bundle(): Array<Resource> {
      return this._content["Bundle"] as Array<Resource>;
    }
  }

  /** Base StructureDefinition for CarePlan Resource */
  export class CarePlan {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CarePlan";
    protected _content: { [key: string]: TElement } = {};

    /** General notes about the care plan not covered elsewhere. */
    set note(value: Annotation) {
      this._content["note"] = value;
    }

    get note(): Annotation {
      return this._content["note"] as Annotation;
    }

    /**
     * Identifies a planned action to occur as part of the plan. For example, a
     * medication to be used, lab tests to perform, self-monitoring, education,
     * etc.
     */
    set activity(value: Array<BackboneElement>) {
      this._content["activity"] = value;
    }

    get activity(): Array<BackboneElement> {
      return this._content["activity"] as Array<BackboneElement>;
    }

    /** Describes the intended objective(s) of carrying out the care plan. */
    set goal(value: Array<Reference>) {
      this._content["goal"] = value;
    }

    get goal(): Array<Reference> {
      return this._content["goal"] as Array<Reference>;
    }

    /**
     * Identifies all people and organizations who are expected to be involved
     * in the care envisioned by this plan.
     */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * Identifies CarePlans with some sort of formal relationship to the current
     * plan.
     */
    set relatedPlan(value: Array<BackboneElement>) {
      this._content["relatedPlan"] = value;
    }

    get relatedPlan(): Array<BackboneElement> {
      return this._content["relatedPlan"] as Array<BackboneElement>;
    }

    /**
     * Identifies portions of the patient's record that specifically influenced
     * the formation of the plan. These might include co-morbidities, recent
     * procedures, limitations, recent assessments, etc.
     */
    set support(value: Array<Reference>) {
      this._content["support"] = value;
    }

    get support(): Array<Reference> {
      return this._content["support"] as Array<Reference>;
    }

    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose
     * management and/or mitigation are handled by this plan.
     */
    set addresses(value: Array<Reference>) {
      this._content["addresses"] = value;
    }

    get addresses(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    /** A description of the scope and nature of the plan. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Identifies what "kind" of plan this is to support differentiation between
     * multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma",
     * "disease management", "wellness plan", etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** Identifies the most recent date on which the plan has been revised. */
    set modified(value: DateTime) {
      this._content["modified"] = value;
    }

    get modified(): DateTime {
      return this._content["modified"] as DateTime;
    }

    /**
     * Identifies the individual(s) or ogranization who is responsible for the
     * content of the care plan.
     */
    set author(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["author"] = value;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /** Indicates when the plan did (or is intended to) come into effect and end. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Identifies the context in which this particular CarePlan is defined. */
    set context(value: Reference | Reference) {
      this._content["context"] = value;
    }

    get contextReference(): Reference {
      return this._content["context"] as Reference;
    }

    get contextReference(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * Indicates whether the plan is currently being acted upon, represents
     * future intentions or is now a historical record.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the patient or group whose intended care is described by the
     * plan.
     */
    set subject(value: Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * This records identifiers associated with this care plan that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Describes the intention of how one or more practitioners intend to
     * deliver care for a particular patient, group or community for a period of
     * time, possibly limited to care for a specific condition or set of
     * conditions.
     */
    set CarePlan(value: Array<DomainResource>) {
      this._content["CarePlan"] = value;
    }

    get CarePlan(): Array<DomainResource> {
      return this._content["CarePlan"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Claim Resource */
  export class Claim {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Claim";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A list of teeth which would be expected but are not found due to having
     * been previously extracted or for other reasons.
     */
    set missingTeeth(value: Array<BackboneElement>) {
      this._content["missingTeeth"] = value;
    }

    get missingTeeth(): Array<BackboneElement> {
      return this._content["missingTeeth"] as Array<BackboneElement>;
    }

    /**
     * Code to indicate that Xrays, images, emails, documents, models or
     * attachments are being sent in support of this submission.
     */
    set additionalMaterials(value: Array<Coding>) {
      this._content["additionalMaterials"] = value;
    }

    get additionalMaterials(): Array<Coding> {
      return this._content["additionalMaterials"] as Array<Coding>;
    }

    /** First tier of goods and services. */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * A list of intervention and exception codes which may influence the
     * adjudication of the claim.
     */
    set interventionException(value: Array<Coding>) {
      this._content["interventionException"] = value;
    }

    get interventionException(): Array<Coding> {
      return this._content["interventionException"] as Array<Coding>;
    }

    /** Type of accident: work, auto, etc. */
    set accidentType(value: Coding) {
      this._content["accidentType"] = value;
    }

    get accidentType(): Coding {
      return this._content["accidentType"] as Coding;
    }

    /** Date of an accident which these services are addressing. */
    set accident(value: Date) {
      this._content["accident"] = value;
    }

    get accident(): Date {
      return this._content["accident"] as Date;
    }

    /** Name of school for over-aged dependents. */
    set school(value: String) {
      this._content["school"] = value;
    }

    get school(): String {
      return this._content["school"] as String;
    }

    /** Factors which may influence the applicability of coverage. */
    set exception(value: Array<Coding>) {
      this._content["exception"] = value;
    }

    get exception(): Array<Coding> {
      return this._content["exception"] as Array<Coding>;
    }

    /** Financial instrument by which payment information for health care. */
    set coverage(value: Array<BackboneElement>) {
      this._content["coverage"] = value;
    }

    get coverage(): Array<BackboneElement> {
      return this._content["coverage"] as Array<BackboneElement>;
    }

    /** Patient Resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** List of patient conditions for which care is sought. */
    set condition(value: Array<Coding>) {
      this._content["condition"] = value;
    }

    get condition(): Array<Coding> {
      return this._content["condition"] as Array<Coding>;
    }

    /** Ordered list of patient diagnosis for which care is sought. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /**
     * The referral resource which lists the date, practitioner, reason and
     * other supporting information.
     */
    set referral(value: Reference) {
      this._content["referral"] = value;
    }

    get referral(): Reference {
      return this._content["referral"] as Reference;
    }

    /** The party to be reimbursed for the services. */
    set payee(value: BackboneElement) {
      this._content["payee"] = value;
    }

    get payee(): BackboneElement {
      return this._content["payee"] as BackboneElement;
    }

    /**
     * Original prescription to support the dispensing of pharmacy services,
     * medications or products.
     */
    set originalPrescription(value: Reference) {
      this._content["originalPrescription"] = value;
    }

    get originalPrescription(): Reference {
      return this._content["originalPrescription"] as Reference;
    }

    /** Prescription to support the dispensing of Pharmacy or Vision products. */
    set prescription(value: Reference | Reference) {
      this._content["prescription"] = value;
    }

    get prescriptionReference(): Reference {
      return this._content["prescription"] as Reference;
    }

    get prescriptionReference(): Reference {
      return this._content["prescription"] as Reference;
    }

    /** Facility where the services were provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /**
     * Person who created the invoice/claim/pre-determination or
     * pre-authorization.
     */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /**
     * In the case of a Pre-Determination/Pre-Authorization the provider may
     * request that funds in the amount of the expected Benefit be reserved
     * ('Patient' or 'Provider') to pay for the Benefits determined on the
     * subsequent claim(s). 'None' explicitly indicates no funds reserving is
     * requested.
     */
    set fundsReserve(value: Coding) {
      this._content["fundsReserve"] = value;
    }

    get fundsReserve(): Coding {
      return this._content["fundsReserve"] as Coding;
    }

    /** Immediate (stat), best effort (normal), deferred (deferred). */
    set priority(value: Coding) {
      this._content["priority"] = value;
    }

    get priority(): Coding {
      return this._content["priority"] as Coding;
    }

    /**
     * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory
     * (Pre-determination).
     */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }

    /**
     * The organization which is responsible for the bill, claim
     * pre-determination, pre-authorization.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The provider which is responsible for the bill, claim pre-determination,
     * pre-authorization.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** Insurer Identifier, typical BIN number (6 digit). */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The version of the specification from which the original instance was
     * created.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /** The version of the specification on which this instance relies. */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /**
     * The business identifier for the instance: invoice number, claim number,
     * pre-determination or pre-authorization number.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The category of claim this is. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * A provider issued list of services and products provided, or to be
     * provided, to a patient which is provided to an insurer for payment
     * recovery.
     */
    set Claim(value: Array<DomainResource>) {
      this._content["Claim"] = value;
    }

    get Claim(): Array<DomainResource> {
      return this._content["Claim"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ClaimResponse Resource */
  export class ClaimResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClaimResponse";
    protected _content: { [key: string]: TElement } = {};

    /** Financial instrument by which payment information for health care. */
    set coverage(value: Array<BackboneElement>) {
      this._content["coverage"] = value;
    }

    get coverage(): Array<BackboneElement> {
      return this._content["coverage"] as Array<BackboneElement>;
    }

    /** Note text. */
    set note(value: Array<BackboneElement>) {
      this._content["note"] = value;
    }

    get note(): Array<BackboneElement> {
      return this._content["note"] as Array<BackboneElement>;
    }

    /** The form to be used for printing the content. */
    set form(value: Coding) {
      this._content["form"] = value;
    }

    get form(): Coding {
      return this._content["form"] as Coding;
    }

    /** Status of funds reservation (For provider, for Patient, None). */
    set reserved(value: Coding) {
      this._content["reserved"] = value;
    }

    get reserved(): Coding {
      return this._content["reserved"] as Coding;
    }

    /** Payment identifier. */
    set paymentRef(value: Identifier) {
      this._content["paymentRef"] = value;
    }

    get paymentRef(): Identifier {
      return this._content["paymentRef"] as Identifier;
    }

    /** Payable less any payment adjustment. */
    set paymentAmount(value: Quantity) {
      this._content["paymentAmount"] = value;
    }

    get paymentAmount(): Quantity {
      return this._content["paymentAmount"] as Quantity;
    }

    /** Estimated payment data. */
    set paymentDate(value: Date) {
      this._content["paymentDate"] = value;
    }

    get paymentDate(): Date {
      return this._content["paymentDate"] as Date;
    }

    /** Reason for the payment adjustment. */
    set paymentAdjustmentReason(value: Coding) {
      this._content["paymentAdjustmentReason"] = value;
    }

    get paymentAdjustmentReason(): Coding {
      return this._content["paymentAdjustmentReason"] as Coding;
    }

    /**
     * Adjustment to the payment of this transaction which is not related to
     * adjudication of this transaction.
     */
    set paymentAdjustment(value: Quantity) {
      this._content["paymentAdjustment"] = value;
    }

    get paymentAdjustment(): Quantity {
      return this._content["paymentAdjustment"] as Quantity;
    }

    /**
     * Total amount of benefit payable (Equal to sum of the Benefit amounts from
     * all detail lines and additions less the Unallocated Deductible).
     */
    set totalBenefit(value: Quantity) {
      this._content["totalBenefit"] = value;
    }

    get totalBenefit(): Quantity {
      return this._content["totalBenefit"] as Quantity;
    }

    /**
     * The amount of deductible applied which was not allocated to any
     * particular service line.
     */
    set unallocDeductable(value: Quantity) {
      this._content["unallocDeductable"] = value;
    }

    get unallocDeductable(): Quantity {
      return this._content["unallocDeductable"] as Quantity;
    }

    /** The total cost of the services reported. */
    set totalCost(value: Quantity) {
      this._content["totalCost"] = value;
    }

    get totalCost(): Quantity {
      return this._content["totalCost"] as Quantity;
    }

    /** Mutually exclusive with Services Provided (Item). */
    set error(value: Array<BackboneElement>) {
      this._content["error"] = value;
    }

    get error(): Array<BackboneElement> {
      return this._content["error"] as Array<BackboneElement>;
    }

    /** The first tier service adjudications for payor added services. */
    set addItem(value: Array<BackboneElement>) {
      this._content["addItem"] = value;
    }

    get addItem(): Array<BackboneElement> {
      return this._content["addItem"] as Array<BackboneElement>;
    }

    /** The first tier service adjudications for submitted services. */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /** Party to be reimbursed: Subscriber, provider, other. */
    set payeeType(value: Coding) {
      this._content["payeeType"] = value;
    }

    get payeeType(): Coding {
      return this._content["payeeType"] as Coding;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Transaction status: error, complete. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** Original request resource referrence. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides the adjudication details from the processing of a
     * Claim resource.
     */
    set ClaimResponse(value: Array<DomainResource>) {
      this._content["ClaimResponse"] = value;
    }

    get ClaimResponse(): Array<DomainResource> {
      return this._content["ClaimResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ClinicalImpression Resource */
  export class ClinicalImpression {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClinicalImpression";
    protected _content: { [key: string]: TElement } = {};

    /** Actions taken during assessment. */
    set action(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["action"] = value;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    get actionArray<Reference>(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    /** Plan of action after assessment. */
    set plan(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["plan"] = value;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    get planArray<Reference>(): Array<Reference> {
      return this._content["plan"] as Array<Reference>;
    }

    /** Estimate of likely outcome. */
    set prognosis(value: String) {
      this._content["prognosis"] = value;
    }

    get prognosis(): String {
      return this._content["prognosis"] as String;
    }

    /** Diagnosis considered not possible. */
    set ruledOut(value: Array<BackboneElement>) {
      this._content["ruledOut"] = value;
    }

    get ruledOut(): Array<BackboneElement> {
      return this._content["ruledOut"] as Array<BackboneElement>;
    }

    /** Diagnoses/conditions resolved since the last assessment. */
    set resolved(value: Array<CodeableConcept>) {
      this._content["resolved"] = value;
    }

    get resolved(): Array<CodeableConcept> {
      return this._content["resolved"] as Array<CodeableConcept>;
    }

    /**
     * Specific findings or diagnoses that was considered likely or relevant to
     * ongoing treatment.
     */
    set finding(value: Array<BackboneElement>) {
      this._content["finding"] = value;
    }

    get finding(): Array<BackboneElement> {
      return this._content["finding"] as Array<BackboneElement>;
    }

    /** A text summary of the investigations and the diagnosis. */
    set summary(value: String) {
      this._content["summary"] = value;
    }

    get summary(): String {
      return this._content["summary"] as String;
    }

    /**
     * Reference to a specific published clinical protocol that was followed
     * during this assessment, and/or that provides evidence in support of the
     * diagnosis.
     */
    set protocol(value: Uri) {
      this._content["protocol"] = value;
    }

    get protocol(): Uri {
      return this._content["protocol"] as Uri;
    }

    /**
     * One or more sets of investigations (signs, symptions, etc.). The actual
     * grouping of investigations vary greatly depending on the type and context
     * of the assessment. These investigations may include data generated during
     * the assessment process, or data previously generated and recorded that is
     * pertinent to the outcomes.
     */
    set investigations(value: Array<BackboneElement>) {
      this._content["investigations"] = value;
    }

    get investigations(): Array<BackboneElement> {
      return this._content["investigations"] as Array<BackboneElement>;
    }

    /**
     * The request or event that necessitated this assessment. This may be a
     * diagnosis, a Care Plan, a Request Referral, or some other resource.
     */
    set trigger(value: CodeableConcept | Reference) {
      this._content["trigger"] = value;
    }

    get triggerCodeableConcept(): CodeableConcept {
      return this._content["trigger"] as CodeableConcept;
    }

    get triggerReference(): Reference {
      return this._content["trigger"] as Reference;
    }

    /** This a list of the general problems/conditions for a patient. */
    set problem(value: Array<Reference> | Array<Reference>) {
      this._content["problem"] = value;
    }

    get problemArray<Reference>(): Array<Reference> {
      return this._content["problem"] as Array<Reference>;
    }

    get problemArray<Reference>(): Array<Reference> {
      return this._content["problem"] as Array<Reference>;
    }

    /**
     * A reference to the last assesment that was conducted bon this patient.
     * Assessments are often/usually ongoing in nature; a care provider
     * (practitioner or team) will make new assessments on an ongoing basis as
     * new data arises or the patient's conditions changes.
     */
    set previous(value: Reference) {
      this._content["previous"] = value;
    }

    get previous(): Reference {
      return this._content["previous"] as Reference;
    }

    /**
     * A summary of the context and/or cause of the assessment - why / where was
     * it peformed, and what patient events/sstatus prompted it.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The point in time at which the assessment was concluded (not when it was
     * recorded).
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Identifies the workflow status of the assessment. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The clinician performing the assessment. */
    set assessor(value: Reference) {
      this._content["assessor"] = value;
    }

    get assessor(): Reference {
      return this._content["assessor"] as Reference;
    }

    /** The patient being assessed. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * A record of a clinical assessment performed to determine what problem(s)
     * may affect the patient and before planning the treatments or management
     * strategies that are best to manage a patient's condition. Assessments are
     * often 1:1 with a clinical consultation / encounter, but this varies
     * greatly depending on the clinical workflow. This resource is called
     * "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion
     * with the recording of assessment tools such as Apgar score.
     */
    set ClinicalImpression(value: Array<DomainResource>) {
      this._content["ClinicalImpression"] = value;
    }

    get ClinicalImpression(): Array<DomainResource> {
      return this._content["ClinicalImpression"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Communication Resource */
  export class Communication {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/Communication";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The communication request that was responsible for producing this
     * communication.
     */
    set requestDetail(value: Reference) {
      this._content["requestDetail"] = value;
    }

    get requestDetail(): Reference {
      return this._content["requestDetail"] as Reference;
    }

    /** The patient who was the focus of this communication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The reason or justification for the communication. */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /** The time when this communication arrived at the destination. */
    set received(value: DateTime) {
      this._content["received"] = value;
    }

    get received(): DateTime {
      return this._content["received"] as DateTime;
    }

    /** The time when this communication was sent. */
    set sent(value: DateTime) {
      this._content["sent"] = value;
    }

    get sent(): DateTime {
      return this._content["sent"] as DateTime;
    }

    /** The encounter within which the communication was sent. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** The status of the transmission. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A channel that was used for this communication (e.g. email, fax). */
    set medium(value: Array<CodeableConcept>) {
      this._content["medium"] = value;
    }

    get medium(): Array<CodeableConcept> {
      return this._content["medium"] as Array<CodeableConcept>;
    }

    /**
     * Text, attachment(s), or resource(s) that was communicated to the
     * recipient.
     */
    set payload(value: Array<BackboneElement>) {
      this._content["payload"] = value;
    }

    get payload(): Array<BackboneElement> {
      return this._content["payload"] as Array<BackboneElement>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which was the target of the communication. If receipts need to be
     * tracked by individual, a separate resource instance will need to be
     * created for each recipient. Multiple recipient communications are
     * intended where either a receipt(s) is not tracked (e.g. a mass mail-out)
     * or is captured in aggregate (all emails confirmed received by a
     * particular time).
     */
    set recipient(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["recipient"] = value;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which was the source of the communication.
     */
    set sender(
      value: Reference | Reference | Reference | Reference | Reference,
    ) {
      this._content["sender"] = value;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    /**
     * The type of message conveyed such as alert, notification, reminder,
     * instruction, etc.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * Identifiers associated with this Communication that are defined by
     * business processes and/ or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An occurrence of information being transmitted; e.g. an alert that was
     * sent to a responsible provider, a public health agency was notified about
     * a reportable condition.
     */
    set Communication(value: Array<DomainResource>) {
      this._content["Communication"] = value;
    }

    get Communication(): Array<DomainResource> {
      return this._content["Communication"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for CommunicationRequest Resource */
  export class CommunicationRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CommunicationRequest";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Characterizes how quickly the proposed act must be initiated. Includes
     * concepts such as stat, urgent, routine.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /** The patient who is the focus of this communication request. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The time when the request was made. */
    set requestedOn(value: DateTime) {
      this._content["requestedOn"] = value;
    }

    get requestedOn(): DateTime {
      return this._content["requestedOn"] as DateTime;
    }

    /** The reason or justification for the communication request. */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /** The time when this communication is to occur. */
    set scheduled(value: DateTime | Period) {
      this._content["scheduled"] = value;
    }

    get scheduledDateTime(): DateTime {
      return this._content["scheduled"] as DateTime;
    }

    get scheduledPeriod(): Period {
      return this._content["scheduled"] as Period;
    }

    /** The encounter within which the communication request was created. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** The status of the proposal or order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The responsible person who authorizes this order, e.g. physician. This
     * may be different than the author of the order statement, e.g. clerk, who
     * may have entered the statement into the order entry application.
     */
    set requester(value: Reference | Reference | Reference) {
      this._content["requester"] = value;
    }

    get requesterReference(): Reference {
      return this._content["requester"] as Reference;
    }

    get requesterReference(): Reference {
      return this._content["requester"] as Reference;
    }

    get requesterReference(): Reference {
      return this._content["requester"] as Reference;
    }

    /** A channel that was used for this communication (e.g. email, fax). */
    set medium(value: Array<CodeableConcept>) {
      this._content["medium"] = value;
    }

    get medium(): Array<CodeableConcept> {
      return this._content["medium"] as Array<CodeableConcept>;
    }

    /** Text, attachment(s), or resource(s) to be communicated to the recipient. */
    set payload(value: Array<BackboneElement>) {
      this._content["payload"] = value;
    }

    get payload(): Array<BackboneElement> {
      return this._content["payload"] as Array<BackboneElement>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which is the intended target of the communication.
     */
    set recipient(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["recipient"] = value;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which is to be the source of the communication.
     */
    set sender(
      value: Reference | Reference | Reference | Reference | Reference,
    ) {
      this._content["sender"] = value;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    get senderReference(): Reference {
      return this._content["sender"] as Reference;
    }

    /**
     * The type of message to be sent such as alert, notification, reminder,
     * instruction, etc.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * A unique ID of this request for reference purposes. It must be provided
     * if user wants it returned as part of any output, otherwise it will be
     * autogenerated, if needed, by CDS system. Does not need to be the actual
     * ID of the source system.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A request to convey information; e.g. the CDS system proposes that an
     * alert be sent to a responsible provider, the CDS system proposes that the
     * public health agency be notified about a reportable condition.
     */
    set CommunicationRequest(value: Array<DomainResource>) {
      this._content["CommunicationRequest"] = value;
    }

    get CommunicationRequest(): Array<DomainResource> {
      return this._content["CommunicationRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Composition Resource */
  export class Composition {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Composition";
    protected _content: { [key: string]: TElement } = {};

    /** The root of the sections that make up the composition. */
    set section(value: Array<BackboneElement>) {
      this._content["section"] = value;
    }

    get section(): Array<BackboneElement> {
      return this._content["section"] as Array<BackboneElement>;
    }

    /**
     * Describes the clinical encounter or type of care this documentation is
     * associated with.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The clinical service, such as a colonoscopy or an appendectomy, being
     * documented.
     */
    set event(value: Array<BackboneElement>) {
      this._content["event"] = value;
    }

    get event(): Array<BackboneElement> {
      return this._content["event"] as Array<BackboneElement>;
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the composition/document information.
     */
    set custodian(value: Reference) {
      this._content["custodian"] = value;
    }

    get custodian(): Reference {
      return this._content["custodian"] as Reference;
    }

    /**
     * A participant who has attested to the accuracy of the
     * composition/document.
     */
    set attester(value: Array<BackboneElement>) {
      this._content["attester"] = value;
    }

    get attester(): Array<BackboneElement> {
      return this._content["attester"] as Array<BackboneElement>;
    }

    /**
     * Identifies who is responsible for the information in the composition, not
     * necessarily who typed it in.
     */
    set author(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["author"] = value;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * Who or what the composition is about. The composition can be about a
     * person, (patient or healthcare practitioner), a device (e.g. a machine)
     * or even a group of subjects (such as a document about a herd of
     * livestock, or a set of patients that share a common exposure).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The code specifying the level of confidentiality of the Composition. */
    set confidentiality(value: Code) {
      this._content["confidentiality"] = value;
    }

    get confidentiality(): Code {
      return this._content["confidentiality"] as Code;
    }

    /**
     * The workflow/clinical status of this composition. The status is a marker
     * for the clinical standing of the document.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Official human-readable label for the composition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * A categorization for the type of the composition - helps for indexing and
     * searching. This may be implied by or derived from the code specified in
     * the Composition Type.
     */
    set class(value: CodeableConcept) {
      this._content["class"] = value;
    }

    get class(): CodeableConcept {
      return this._content["class"] as CodeableConcept;
    }

    /**
     * Specifies the particular kind of composition (e.g. History and Physical,
     * Discharge Summary, Progress Note). This usually equates to the purpose of
     * making the composition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The composition editing time, when the composition was last logically
     * changed by the author.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Logical identifier for the composition, assigned when created. This
     * identifier stays constant as the composition is changed over time.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A set of healthcare-related information that is assembled together into a
     * single logical document that provides a single coherent statement of
     * meaning, establishes its own context and that has clinical attestation
     * with regard to who is making the statement. While a Composition defines
     * the structure, it does not actually contain the content: rather the full
     * content of a document is contained in a Bundle, of which the Composition
     * is the first resource contained.
     */
    set Composition(value: Array<DomainResource>) {
      this._content["Composition"] = value;
    }

    get Composition(): Array<DomainResource> {
      return this._content["Composition"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ConceptMap Resource */
  export class ConceptMap {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ConceptMap";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Mappings for an individual concept in the source to one or more concepts
     * in the target.
     */
    set element(value: Array<BackboneElement>) {
      this._content["element"] = value;
    }

    get element(): Array<BackboneElement> {
      return this._content["element"] as Array<BackboneElement>;
    }

    /**
     * The target value set provides context to the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the value
     * set provides important context about how the concept mapping choices are
     * made.
     */
    set target(value: Uri | Reference | Reference) {
      this._content["target"] = value;
    }

    get targetUri(): Uri {
      return this._content["target"] as Uri;
    }

    get targetReference(): Reference {
      return this._content["target"] as Reference;
    }

    get targetReference(): Reference {
      return this._content["target"] as Reference;
    }

    /** The source value set that specifies the concepts that are being mapped. */
    set source(value: Uri | Reference | Reference) {
      this._content["source"] = value;
    }

    get sourceUri(): Uri {
      return this._content["source"] as Uri;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    /** A copyright statement relating to the concept map and/or its contents. */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * Explains why this concept map is needed and why it has been constrained
     * as it has.
     */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of concept map instances.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /**
     * A free text natural language description of the use of the concept map -
     * reason for definition, conditions of use, etc.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The date this version of the concept map was published. The date must
     * change when the business version changes, if it does, and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the concept map changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the concept
     * map.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * This ConceptMap was authored for testing purposes (or
     * education/evaluation/marketing), and is not intended to be used for
     * genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of the concept map. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name describing the concept map. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the concept map
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the profile author manually and the
     * value should be a timestamp.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * Formal identifier that is used to identify this concept map when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * An absolute URL that is used to identify this concept map when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this concept map is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A statement of relationships from one set of concepts to one or more
     * other concepts - either code systems or data elements, or classes in
     * class models.
     */
    set ConceptMap(value: Array<DomainResource>) {
      this._content["ConceptMap"] = value;
    }

    get ConceptMap(): Array<DomainResource> {
      return this._content["ConceptMap"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Condition Resource */
  export class Condition {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Condition";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Additional information about the Condition. This is a general
     * notes/comments entry for description of the Condition, its diagnosis and
     * prognosis.
     */
    set notes(value: String) {
      this._content["notes"] = value;
    }

    get notes(): String {
      return this._content["notes"] as String;
    }

    /** The anatomical location where this condition manifests itself. */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * Supporting Evidence / manifestations that are the basis on which this
     * condition is suspected or confirmed.
     */
    set evidence(value: Array<BackboneElement>) {
      this._content["evidence"] = value;
    }

    get evidence(): Array<BackboneElement> {
      return this._content["evidence"] as Array<BackboneElement>;
    }

    /**
     * Clinical stage or grade of a condition. May include formal severity
     * assessments.
     */
    set stage(value: BackboneElement) {
      this._content["stage"] = value;
    }

    get stage(): BackboneElement {
      return this._content["stage"] as BackboneElement;
    }

    /**
     * The date or estimated date that the condition resolved or went into
     * remission. This is called "abatement" because of the many overloaded
     * connotations associated with "remission" or "resolution" - Conditions are
     * never really resolved, but they can abate.
     */
    set abatement(
      value: DateTime | Quantity | Boolean | Period | Range | String,
    ) {
      this._content["abatement"] = value;
    }

    get abatementDateTime(): DateTime {
      return this._content["abatement"] as DateTime;
    }

    get abatementQuantity(): Quantity {
      return this._content["abatement"] as Quantity;
    }

    get abatementBoolean(): Boolean {
      return this._content["abatement"] as Boolean;
    }

    get abatementPeriod(): Period {
      return this._content["abatement"] as Period;
    }

    get abatementRange(): Range {
      return this._content["abatement"] as Range;
    }

    get abatementString(): String {
      return this._content["abatement"] as String;
    }

    /**
     * Estimated or actual date or date-time the condition began, in the opinion
     * of the clinician.
     */
    set onset(value: DateTime | Quantity | Period | Range | String) {
      this._content["onset"] = value;
    }

    get onsetDateTime(): DateTime {
      return this._content["onset"] as DateTime;
    }

    get onsetQuantity(): Quantity {
      return this._content["onset"] as Quantity;
    }

    get onsetPeriod(): Period {
      return this._content["onset"] as Period;
    }

    get onsetRange(): Range {
      return this._content["onset"] as Range;
    }

    get onsetString(): String {
      return this._content["onset"] as String;
    }

    /**
     * A subjective assessment of the severity of the condition as evaluated by
     * the clinician.
     */
    set severity(value: CodeableConcept) {
      this._content["severity"] = value;
    }

    get severity(): CodeableConcept {
      return this._content["severity"] as CodeableConcept;
    }

    /** The verification status to support the clinical status of the condition. */
    set verificationStatus(value: Code) {
      this._content["verificationStatus"] = value;
    }

    get verificationStatus(): Code {
      return this._content["verificationStatus"] as Code;
    }

    /** The clinical status of the condition. */
    set clinicalStatus(value: Code) {
      this._content["clinicalStatus"] = value;
    }

    get clinicalStatus(): Code {
      return this._content["clinicalStatus"] as Code;
    }

    /** A category assigned to the condition. */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** Identification of the condition, problem or diagnosis. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A date, when the Condition statement was documented. */
    set dateRecorded(value: Date) {
      this._content["dateRecorded"] = value;
    }

    get dateRecorded(): Date {
      return this._content["dateRecorded"] as Date;
    }

    /** Individual who is making the condition statement. */
    set asserter(value: Reference | Reference) {
      this._content["asserter"] = value;
    }

    get asserterReference(): Reference {
      return this._content["asserter"] as Reference;
    }

    get asserterReference(): Reference {
      return this._content["asserter"] as Reference;
    }

    /** Encounter during which the condition was first asserted. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Indicates the patient who the condition record is associated with. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * This records identifiers associated with this condition that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Use to record detailed information about conditions, problems or
     * diagnoses recognized by a clinician. There are many uses including:
     * recording a diagnosis during an encounter; populating a problem list or a
     * summary statement, such as a discharge summary.
     */
    set Condition(value: Array<DomainResource>) {
      this._content["Condition"] = value;
    }

    get Condition(): Array<DomainResource> {
      return this._content["Condition"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Conformance Resource */
  export class Conformance {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Conformance";
    protected _content: { [key: string]: TElement } = {};

    /** A document definition. */
    set document(value: Array<BackboneElement>) {
      this._content["document"] = value;
    }

    get document(): Array<BackboneElement> {
      return this._content["document"] as Array<BackboneElement>;
    }

    /** A description of the messaging capabilities of the solution. */
    set messaging(value: Array<BackboneElement>) {
      this._content["messaging"] = value;
    }

    get messaging(): Array<BackboneElement> {
      return this._content["messaging"] as Array<BackboneElement>;
    }

    /** A definition of the restful capabilities of the solution, if any. */
    set rest(value: Array<BackboneElement>) {
      this._content["rest"] = value;
    }

    get rest(): Array<BackboneElement> {
      return this._content["rest"] as Array<BackboneElement>;
    }

    /**
     * A list of profiles that represent different use cases supported by the
     * system. For a server, "supported by the system" means the system
     * hosts/produces a set of resources that are conformant to a particular
     * profile, and allows clients that use its services to search using this
     * profile and to find appropriate data. For a client, it means the system
     * will search by this profile and process data according to the guidance
     * implicit in the profile. See further discussion in [Using
     * Profiles]{profiling.html#profile-uses}.
     */
    set profile(value: Array<Reference>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Reference> {
      return this._content["profile"] as Array<Reference>;
    }

    /**
     * A list of the formats supported by this implementation using their
     * content types.
     */
    set format(value: Array<Code>) {
      this._content["format"] = value;
    }

    get format(): Array<Code> {
      return this._content["format"] as Array<Code>;
    }

    /**
     * A code that indicates whether the application accepts unknown elements or
     * extensions when reading resources.
     */
    set acceptUnknown(value: Code) {
      this._content["acceptUnknown"] = value;
    }

    get acceptUnknown(): Code {
      return this._content["acceptUnknown"] as Code;
    }

    /**
     * The version of the FHIR specification on which this conformance statement
     * is based.
     */
    set fhirVersion(value: Id) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Id {
      return this._content["fhirVersion"] as Id;
    }

    /**
     * Identifies a specific implementation instance that is described by the
     * conformance statement - i.e. a particular installation, rather than the
     * capabilities of a software program.
     */
    set implementation(value: BackboneElement) {
      this._content["implementation"] = value;
    }

    get implementation(): BackboneElement {
      return this._content["implementation"] as BackboneElement;
    }

    /**
     * Software that is covered by this conformance statement. It is used when
     * the conformance statement describes the capabilities of a particular
     * software version, independent of an installation.
     */
    set software(value: BackboneElement) {
      this._content["software"] = value;
    }

    get software(): BackboneElement {
      return this._content["software"] as BackboneElement;
    }

    /**
     * The way that this statement is intended to be used, to describe an actual
     * running instance of software, a particular product (kind not instance of
     * software) or a class of implementation (e.g. a desired purchase).
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * A copyright statement relating to the conformance statement and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the details of the system described by the
     * conformance statement.
     */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * Explains why this conformance statement is needed and why it's been
     * constrained as it has.
     */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /**
     * A free text natural language description of the conformance statement and
     * its use. Typically, this is used when the conformance statement describes
     * a desired rather than an actual solution, for example as a formal
     * expression of requirements as part of an RFP.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The date (and optionally time) when the conformance statement was
     * published. The date must change when the business version changes, if it
     * does, and it must change if the status code changes. In addition, it
     * should change when the substantive content of the conformance statement
     * changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the
     * conformance.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * A flag to indicate that this conformance statement is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of this conformance statement. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name identifying the conformance statement. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the conformance
     * statement when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the profile author
     * manually and the value should be a timestamp.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * An absolute URL that is used to identify this conformance statement when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this conformance statement is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A conformance statement is a set of capabilities of a FHIR Server that
     * may be used as a statement of actual server functionality or a statement
     * of required or desired server implementation.
     */
    set Conformance(value: DomainResource) {
      this._content["Conformance"] = value;
    }

    get Conformance(): DomainResource {
      return this._content["Conformance"] as DomainResource;
    }
  }

  /** Base StructureDefinition for Contract Resource */
  export class Contract {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Contract";
    protected _content: { [key: string]: TElement } = {};

    /** List of Computable Policy Rule Language Representations of this Contract. */
    set rule(value: Array<BackboneElement>) {
      this._content["rule"] = value;
    }

    get rule(): Array<BackboneElement> {
      return this._content["rule"] as Array<BackboneElement>;
    }

    /** List of Legal expressions or representations of this Contract. */
    set legal(value: Array<BackboneElement>) {
      this._content["legal"] = value;
    }

    get legal(): Array<BackboneElement> {
      return this._content["legal"] as Array<BackboneElement>;
    }

    /**
     * The "patient friendly language" versionof the Contract in whole or in
     * parts. "Patient friendly language" means the representation of the
     * Contract and Contract Provisions in a manner that is readily accessible
     * and understandable by a layperson in accordance with best practices for
     * communication styles that ensure that those agreeing to or signing the
     * Contract understand the roles, actions, obligations, responsibilities,
     * and implication of the agreement.
     */
    set friendly(value: Array<BackboneElement>) {
      this._content["friendly"] = value;
    }

    get friendly(): Array<BackboneElement> {
      return this._content["friendly"] as Array<BackboneElement>;
    }

    /**
     * Legally binding Contract: This is the signed and legally recognized
     * representation of the Contract, which is considered the "source of truth"
     * and which would be the basis for legal action related to enforcement of
     * this Contract.
     */
    set binding(value: Attachment | Reference | Reference | Reference) {
      this._content["binding"] = value;
    }

    get bindingAttachment(): Attachment {
      return this._content["binding"] as Attachment;
    }

    get bindingReference(): Reference {
      return this._content["binding"] as Reference;
    }

    get bindingReference(): Reference {
      return this._content["binding"] as Reference;
    }

    get bindingReference(): Reference {
      return this._content["binding"] as Reference;
    }

    /**
     * One or more Contract Provisions, which may be related and conveyed as a
     * group, and may contain nested groups.
     */
    set term(value: Array<BackboneElement>) {
      this._content["term"] = value;
    }

    get term(): Array<BackboneElement> {
      return this._content["term"] as Array<BackboneElement>;
    }

    /** Party signing this Contract. */
    set signer(value: Array<BackboneElement>) {
      this._content["signer"] = value;
    }

    get signer(): Array<BackboneElement> {
      return this._content["signer"] as Array<BackboneElement>;
    }

    /** Contract Valued Item List. */
    set valuedItem(value: Array<BackboneElement>) {
      this._content["valuedItem"] = value;
    }

    get valuedItem(): Array<BackboneElement> {
      return this._content["valuedItem"] as Array<BackboneElement>;
    }

    /** List of Contract actors. */
    set actor(value: Array<BackboneElement>) {
      this._content["actor"] = value;
    }

    get actor(): Array<BackboneElement> {
      return this._content["actor"] as Array<BackboneElement>;
    }

    /** Reason for action stipulated by this Contract. */
    set actionReason(value: Array<CodeableConcept>) {
      this._content["actionReason"] = value;
    }

    get actionReason(): Array<CodeableConcept> {
      return this._content["actionReason"] as Array<CodeableConcept>;
    }

    /** Action stipulated by this Contract. */
    set action(value: Array<CodeableConcept>) {
      this._content["action"] = value;
    }

    get action(): Array<CodeableConcept> {
      return this._content["action"] as Array<CodeableConcept>;
    }

    /**
     * More specific type or specialization of an overarching or more general
     * contract such as auto insurance, home owner insurance, prenupial
     * agreement, Advanced-Directive, or privacy consent.
     */
    set subType(value: Array<CodeableConcept>) {
      this._content["subType"] = value;
    }

    get subType(): Array<CodeableConcept> {
      return this._content["subType"] as Array<CodeableConcept>;
    }

    /**
     * Type of Contract such as an insurance policy, real estate contract, a
     * will, power of attorny, Privacy or Security policy , trust framework
     * agreement, etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Recognized governance framework or system operating with a circumscribed
     * scope in accordance with specified principles, policies, processes or
     * procedures for managing rights, actions, or behaviors of parties or
     * principals relative to resources.
     */
    set domain(value: Array<Reference>) {
      this._content["domain"] = value;
    }

    get domain(): Array<Reference> {
      return this._content["domain"] as Array<Reference>;
    }

    /**
     * A formally or informally recognized grouping of people, principals,
     * organizations, or jurisdictions formed for the purpose of achieving some
     * form of collective action such as the promulgation, administration and
     * enforcement of contracts and policies.
     */
    set authority(value: Array<Reference>) {
      this._content["authority"] = value;
    }

    get authority(): Array<Reference> {
      return this._content["authority"] as Array<Reference>;
    }

    /**
     * Who and/or what this Contract is about: typically a Patient,
     * Organization, or valued items such as goods and services.
     */
    set subject(value: Array<Reference>) {
      this._content["subject"] = value;
    }

    get subject(): Array<Reference> {
      return this._content["subject"] as Array<Reference>;
    }

    /** Relevant time or time-period when this Contract is applicable. */
    set applies(value: Period) {
      this._content["applies"] = value;
    }

    get applies(): Period {
      return this._content["applies"] as Period;
    }

    /** When this Contract was issued. */
    set issued(value: DateTime) {
      this._content["issued"] = value;
    }

    get issued(): DateTime {
      return this._content["issued"] as DateTime;
    }

    /** Unique identifier for this Contract. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A formal agreement between parties regarding the conduct of business,
     * exchange of information or other matters.
     */
    set Contract(value: Array<DomainResource>) {
      this._content["Contract"] = value;
    }

    get Contract(): Array<DomainResource> {
      return this._content["Contract"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Coverage Resource */
  export class Coverage {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Coverage";
    protected _content: { [key: string]: TElement } = {};

    /** The policy(s) which constitute this insurance coverage. */
    set contract(value: Array<Reference>) {
      this._content["contract"] = value;
    }

    get contract(): Array<Reference> {
      return this._content["contract"] as Array<Reference>;
    }

    /** The identifier for a community of providers. */
    set network(value: Identifier) {
      this._content["network"] = value;
    }

    get network(): Identifier {
      return this._content["network"] as Identifier;
    }

    /**
     * The party who 'owns' the insurance contractual relationship to the policy
     * or to whom the benefit of the policy is due.
     */
    set subscriber(value: Reference) {
      this._content["subscriber"] = value;
    }

    get subscriber(): Reference {
      return this._content["subscriber"] as Reference;
    }

    /**
     * An optional counter for a particular instance of the identified coverage
     * which increments upon each renewal.
     */
    set sequence(value: PositiveInt) {
      this._content["sequence"] = value;
    }

    get sequence(): PositiveInt {
      return this._content["sequence"] as PositiveInt;
    }

    /** A unique identifier for a dependent under the coverage. */
    set dependent(value: PositiveInt) {
      this._content["dependent"] = value;
    }

    get dependent(): PositiveInt {
      return this._content["dependent"] as PositiveInt;
    }

    /**
     * Identifies a sub-style or sub-collective of coverage issues by the
     * underwriter, for example may be used to identify a specific employer
     * group within a class of employers. May be referred to as a Section or
     * Division ID.
     */
    set subPlan(value: String) {
      this._content["subPlan"] = value;
    }

    get subPlan(): String {
      return this._content["subPlan"] as String;
    }

    /**
     * Identifies a style or collective of coverage issues by the underwriter,
     * for example may be used to identify a class of coverage or employer
     * group. May also be referred to as a Policy or Group ID.
     */
    set plan(value: String) {
      this._content["plan"] = value;
    }

    get plan(): String {
      return this._content["plan"] as String;
    }

    /**
     * Identifies a style or collective of coverage issues by the underwriter,
     * for example may be used to identify a class of coverage or employer
     * group. May also be referred to as a Policy or Group ID.
     */
    set group(value: String) {
      this._content["group"] = value;
    }

    get group(): String {
      return this._content["group"] as String;
    }

    /**
     * The main (and possibly only) identifier for the coverage - often referred
     * to as a Member Id, Subscriber Id, Certificate number or Personal Health
     * Number or Case ID.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The id issued to the subscriber. */
    set subscriberId(value: Identifier) {
      this._content["subscriberId"] = value;
    }

    get subscriberId(): Identifier {
      return this._content["subscriberId"] as Identifier;
    }

    /**
     * The type of coverage: social program, medical plan, accident coverage
     * (workers compensation, auto), group health.
     */
    set type(value: Coding) {
      this._content["type"] = value;
    }

    get type(): Coding {
      return this._content["type"] as Coding;
    }

    /**
     * Time period during which the coverage is in force. A missing start date
     * indicates the start date isn't known, a missing end date means the
     * coverage is continuing to be in force.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Business Identification Number (BIN number) used to identify the routing
     * of eclaims if the insurer themselves don't have a BIN number for all of
     * their business.
     */
    set bin(value: Identifier) {
      this._content["bin"] = value;
    }

    get bin(): Identifier {
      return this._content["bin"] as Identifier;
    }

    /** The program or plan underwriter or payor. */
    set issuer(value: Reference) {
      this._content["issuer"] = value;
    }

    get issuer(): Reference {
      return this._content["issuer"] as Reference;
    }

    /**
     * Financial instrument which may be used to pay for or reimburse health
     * care products and services.
     */
    set Coverage(value: Array<DomainResource>) {
      this._content["Coverage"] = value;
    }

    get Coverage(): Array<DomainResource> {
      return this._content["Coverage"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DataElement Resource */
  export class DataElement {
    static url: string = "http://hl7.org/fhir/StructureDefinition/DataElement";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Defines the structure, type, allowed values and other constraining
     * characteristics of the data element.
     */
    set element(value: Array<ElementDefinition>) {
      this._content["element"] = value;
    }

    get element(): Array<ElementDefinition> {
      return this._content["element"] as Array<ElementDefinition>;
    }

    /**
     * Identifies a specification (other than a terminology) that the elements
     * which make up the DataElement have some correspondence with.
     */
    set mapping(value: Array<BackboneElement>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<BackboneElement> {
      return this._content["mapping"] as Array<BackboneElement>;
    }

    /** Identifies how precise the data element is in its definition. */
    set stringency(value: Code) {
      this._content["stringency"] = value;
    }

    get stringency(): Code {
      return this._content["stringency"] as Code;
    }

    /**
     * A copyright statement relating to the definition of the data element.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the details of the definition of the data element.
     */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of data element definitions.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /**
     * The date this version of the data element was published. The date must
     * change when the business version changes, if it does, and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the data element changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the data
     * element.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * A flag to indicate that this search data element definition is authored
     * for testing purposes (or education/evaluation/marketing), and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of the data element. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The term used by humans to refer to the data element. Should ideally be
     * unique within the context in which the data element is expected to be
     * used.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the data element
     * when it is referenced in a StructureDefinition, Questionnaire or
     * instance. This is an arbitrary value managed by the definition author
     * manually.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * Formal identifier that is used to identify this data element when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An absolute URL that is used to identify this data element when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this data element is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The formal description of a single piece of information that can be
     * gathered and reported.
     */
    set DataElement(value: Array<DomainResource>) {
      this._content["DataElement"] = value;
    }

    get DataElement(): Array<DomainResource> {
      return this._content["DataElement"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DetectedIssue Resource */
  export class DetectedIssue {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DetectedIssue";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Indicates an action that has been taken or is committed to to reduce or
     * eliminate the likelihood of the risk identified by the detected issue
     * from manifesting. Can also reflect an observation of known mitigating
     * factors that may reduce/eliminate the need for any action.
     */
    set mitigation(value: Array<BackboneElement>) {
      this._content["mitigation"] = value;
    }

    get mitigation(): Array<BackboneElement> {
      return this._content["mitigation"] as Array<BackboneElement>;
    }

    /**
     * The literature, knowledge-base or similar reference that describes the
     * propensity for the detected issue identified.
     */
    set reference(value: Uri) {
      this._content["reference"] = value;
    }

    get reference(): Uri {
      return this._content["reference"] as Uri;
    }

    /** Business identifier associated with the detected issue record. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Individual or device responsible for the issue being raised. For example,
     * a decision support application or a pharmacist conducting a medication
     * review.
     */
    set author(value: Reference | Reference) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    /** The date or date-time when the detected issue was initially identified. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** A textual explanation of the detected issue. */
    set detail(value: String) {
      this._content["detail"] = value;
    }

    get detail(): String {
      return this._content["detail"] as String;
    }

    /**
     * Indicates the resource representing the current activity or proposed
     * activity that is potentially problematic.
     */
    set implicated(value: Array<Reference>) {
      this._content["implicated"] = value;
    }

    get implicated(): Array<Reference> {
      return this._content["implicated"] as Array<Reference>;
    }

    /**
     * Indicates the degree of importance associated with the identified issue
     * based on the potential impact on the patient.
     */
    set severity(value: Code) {
      this._content["severity"] = value;
    }

    get severity(): Code {
      return this._content["severity"] as Code;
    }

    /** Identifies the general type of issue identified. */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** Indicates the patient whose record the detected issue is associated with. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Indicates an actual or potential clinical issue with or between one or
     * more active or proposed clinical actions for a patient; e.g. Drug-drug
     * interaction, Ineffective treatment frequency, Procedure-condition
     * conflict, etc.
     */
    set DetectedIssue(value: Array<DomainResource>) {
      this._content["DetectedIssue"] = value;
    }

    get DetectedIssue(): Array<DomainResource> {
      return this._content["DetectedIssue"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Device Resource */
  export class Device {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Device";
    protected _content: { [key: string]: TElement } = {};

    /** A network address on which the device may be contacted directly. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * Contact details for an organization or a particular human that is
     * responsible for the device.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /** Patient information, if the resource is affixed to a person. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The place where the device can be found. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * An organization that is responsible for the provision and ongoing
     * maintenance of the device.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** Lot number assigned by the manufacturer. */
    set lotNumber(value: String) {
      this._content["lotNumber"] = value;
    }

    get lotNumber(): String {
      return this._content["lotNumber"] as String;
    }

    /**
     * United States Food and Drug Administration mandated Unique Device
     * Identifier (UDI). Use the human readable information (the content that
     * the user sees, which is sometimes different to the exact syntax
     * represented in the barcode) - see
     * http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/default.htm.
     */
    set udi(value: String) {
      this._content["udi"] = value;
    }

    get udi(): String {
      return this._content["udi"] as String;
    }

    /**
     * The date and time beyond which this device is no longer valid or should
     * not be used (if applicable).
     */
    set expiry(value: DateTime) {
      this._content["expiry"] = value;
    }

    get expiry(): DateTime {
      return this._content["expiry"] as DateTime;
    }

    /** The date and time when the device was manufactured. */
    set manufactureDate(value: DateTime) {
      this._content["manufactureDate"] = value;
    }

    get manufactureDate(): DateTime {
      return this._content["manufactureDate"] as DateTime;
    }

    /**
     * The version of the device, if the device has multiple releases under the
     * same model, or if the device is software or carries firmware.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * The "model" is an identifier assigned by the manufacturer to identify the
     * product by its type. This number is shared by the all devices sold as the
     * same type.
     */
    set model(value: String) {
      this._content["model"] = value;
    }

    get model(): String {
      return this._content["model"] as String;
    }

    /** A name of the manufacturer. */
    set manufacturer(value: String) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): String {
      return this._content["manufacturer"] as String;
    }

    /** Status of the Device availability. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Descriptive information, usage information or implantation information
     * that is not captured in an existing element.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Code or identifier to identify a kind of device. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Unique instance identifiers assigned to a device by organizations like
     * manufacturers or owners. If the identifier identifies the type of device,
     * Device.type should be used.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource identifies an instance of a manufactured item that is used
     * in the provision of healthcare without being substantially changed
     * through that activity. The device may be a medical or non-medical device.
     * Medical devices includes durable (reusable) medical equipment,
     * implantable devices, as well as disposable equipment used for diagnostic,
     * treatment, and research for healthcare and public health. Non-medical
     * devices may include items such as a machine, cellphone, computer,
     * application, etc.
     */
    set Device(value: Array<DomainResource>) {
      this._content["Device"] = value;
    }

    get Device(): Array<DomainResource> {
      return this._content["Device"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DeviceComponent Resource */
  export class DeviceComponent {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceComponent";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Describes the language code for the human-readable text string produced
     * by the device. This language code will follow the IETF language tag.
     * Example: en-US.
     */
    set languageCode(value: CodeableConcept) {
      this._content["languageCode"] = value;
    }

    get languageCode(): CodeableConcept {
      return this._content["languageCode"] as CodeableConcept;
    }

    /**
     * Describes the production specification such as component revision, serial
     * number, etc.
     */
    set productionSpecification(value: Array<BackboneElement>) {
      this._content["productionSpecification"] = value;
    }

    get productionSpecification(): Array<BackboneElement> {
      return this._content["productionSpecification"] as Array<BackboneElement>;
    }

    /**
     * Describes the physical principle of the measurement. For example:
     * thermal, chemical, acoustical, etc.
     */
    set measurementPrinciple(value: Code) {
      this._content["measurementPrinciple"] = value;
    }

    get measurementPrinciple(): Code {
      return this._content["measurementPrinciple"] as Code;
    }

    /**
     * Describes the parameter group supported by the current device component
     * that is based on some nomenclature, e.g. cardiovascular.
     */
    set parameterGroup(value: CodeableConcept) {
      this._content["parameterGroup"] = value;
    }

    get parameterGroup(): CodeableConcept {
      return this._content["parameterGroup"] as CodeableConcept;
    }

    /**
     * Indicates current operational status of the device. For example: On, Off,
     * Standby, etc.
     */
    set operationalStatus(value: Array<CodeableConcept>) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Array<CodeableConcept> {
      return this._content["operationalStatus"] as Array<CodeableConcept>;
    }

    /**
     * Describes the link to the parent resource. For example: Channel is linked
     * to its VMD parent.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /**
     * Describes the link to the source Device that contains administrative
     * device information such as manufacture, serial number, etc.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * Describes the timestamp for the most recent system change which includes
     * device configuration or setting change.
     */
    set lastSystemChange(value: Instant) {
      this._content["lastSystemChange"] = value;
    }

    get lastSystemChange(): Instant {
      return this._content["lastSystemChange"] as Instant;
    }

    /**
     * Describes the local assigned unique identification by the software. For
     * example: handle ID.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Describes the specific component type as defined in the object-oriented
     * or metric nomenclature partition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Describes the characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    set DeviceComponent(value: Array<DomainResource>) {
      this._content["DeviceComponent"] = value;
    }

    get DeviceComponent(): Array<DomainResource> {
      return this._content["DeviceComponent"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DeviceMetric Resource */
  export class DeviceMetric {
    static url: string = "http://hl7.org/fhir/StructureDefinition/DeviceMetric";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Describes the calibrations that have been performed or that are required
     * to be performed.
     */
    set calibration(value: Array<BackboneElement>) {
      this._content["calibration"] = value;
    }

    get calibration(): Array<BackboneElement> {
      return this._content["calibration"] as Array<BackboneElement>;
    }

    /**
     * Describes the measurement repetition time. This is not necessarily the
     * same as the update period. The measurement repetition time can range from
     * milliseconds up to hours. An example for a measurement repetition time in
     * the range of milliseconds is the sampling rate of an ECG. An example for
     * a measurement repetition time in the range of hours is a NIBP that is
     * triggered automatically every hour. The update period may be different
     * than the measurement repetition time, if the device does not update the
     * published observed value with the same frequency as it was measured.
     */
    set measurementPeriod(value: Timing) {
      this._content["measurementPeriod"] = value;
    }

    get measurementPeriod(): Timing {
      return this._content["measurementPeriod"] as Timing;
    }

    /**
     * Indicates the category of the observation generation process. A
     * DeviceMetric can be for example a setting, measurement, or calculation.
     */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /**
     * Describes the color representation for the metric. This is often used to
     * aid clinicians to track and identify parameter types by color. In
     * practice, consider a Patient Monitor that has ECG/HR and Pleth for
     * example; the parameters are displayed in different characteristic colors,
     * such as HR-blue, BP-green, and PR and SpO2- magenta.
     */
    set color(value: Code) {
      this._content["color"] = value;
    }

    get color(): Code {
      return this._content["color"] as Code;
    }

    /**
     * Indicates current operational state of the device. For example: On, Off,
     * Standby, etc.
     */
    set operationalStatus(value: Code) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Code {
      return this._content["operationalStatus"] as Code;
    }

    /**
     * Describes the link to the DeviceComponent that this DeviceMetric belongs
     * to and that provide information about the location of this DeviceMetric
     * in the containment structure of the parent Device. An example would be a
     * DeviceComponent that represents a Channel. This reference can be used by
     * a client application to distinguish DeviceMetrics that have the same
     * type, but should be interpreted based on their containment location.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /**
     * Describes the link to the Device that this DeviceMetric belongs to and
     * that contains administrative device information such as manufacture,
     * serial number, etc.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * Describes the unit that an observed value determined for this metric will
     * have. For example: Percent, Seconds, etc.
     */
    set unit(value: CodeableConcept) {
      this._content["unit"] = value;
    }

    get unit(): CodeableConcept {
      return this._content["unit"] as CodeableConcept;
    }

    /**
     * Describes the unique identification of this metric that has been assigned
     * by the device or gateway software. For example: handle ID. It should be
     * noted that in order to make the identifier unique, the system element of
     * the identifier should be set to the unique identifier of the device.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Describes the type of the metric. For example: Heart Rate, PEEP Setting,
     * etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Describes a measurement, calculation or setting capability of a medical
     * device.
     */
    set DeviceMetric(value: Array<DomainResource>) {
      this._content["DeviceMetric"] = value;
    }

    get DeviceMetric(): Array<DomainResource> {
      return this._content["DeviceMetric"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DeviceUseRequest Resource */
  export class DeviceUseRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceUseRequest";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Characterizes how quickly the use of device must be initiated. Includes
     * concepts such as stat, urgent, routine.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * The timing schedule for the use of the device The Schedule data type
     * allows many different expressions, for example. "Every 8 hours"; "Three
     * times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec
     * 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    set timing(value: Timing | Period | DateTime) {
      this._content["timing"] = value;
    }

    get timingTiming(): Timing {
      return this._content["timing"] as Timing;
    }

    get timingPeriod(): Period {
      return this._content["timing"] as Period;
    }

    get timingDateTime(): DateTime {
      return this._content["timing"] as DateTime;
    }

    /** The patient who will use the device. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The time at which the request was made/recorded. */
    set recordedOn(value: DateTime) {
      this._content["recordedOn"] = value;
    }

    get recordedOn(): DateTime {
      return this._content["recordedOn"] as DateTime;
    }

    /** The time when the request was made. */
    set orderedOn(value: DateTime) {
      this._content["orderedOn"] = value;
    }

    get orderedOn(): DateTime {
      return this._content["orderedOn"] as DateTime;
    }

    /**
     * The proposed act must be performed if the indicated conditions occur,
     * e.g.., shortness of breath, SpO2 less than x%.
     */
    set prnReason(value: Array<CodeableConcept>) {
      this._content["prnReason"] = value;
    }

    get prnReason(): Array<CodeableConcept> {
      return this._content["prnReason"] as Array<CodeableConcept>;
    }

    /**
     * Details about this request that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated with
     * the statement.
     */
    set notes(value: Array<String>) {
      this._content["notes"] = value;
    }

    get notes(): Array<String> {
      return this._content["notes"] as Array<String>;
    }

    /** Reason or justification for the use of this device. */
    set indication(value: Array<CodeableConcept>) {
      this._content["indication"] = value;
    }

    get indication(): Array<CodeableConcept> {
      return this._content["indication"] as Array<CodeableConcept>;
    }

    /** Identifiers assigned to this order by the orderer or by the receiver. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An encounter that provides additional context in which this request is
     * made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** The details of the device to be used. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /** The status of the request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Indicates the site on the subject's body where the device should be used
     * ( i.e. the target site).
     */
    set bodySite(value: CodeableConcept | Reference) {
      this._content["bodySite"] = value;
    }

    get bodySiteCodeableConcept(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    get bodySiteReference(): Reference {
      return this._content["bodySite"] as Reference;
    }

    /**
     * Represents a request for a patient to employ a medical device. The device
     * may be an implantable device, or an external assistive device, such as a
     * walker.
     */
    set DeviceUseRequest(value: Array<DomainResource>) {
      this._content["DeviceUseRequest"] = value;
    }

    get DeviceUseRequest(): Array<DomainResource> {
      return this._content["DeviceUseRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DeviceUseStatement Resource */
  export class DeviceUseStatement {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceUseStatement";
    protected _content: { [key: string]: TElement } = {};

    /** How often the device was used. */
    set timing(value: Timing | Period | DateTime) {
      this._content["timing"] = value;
    }

    get timingTiming(): Timing {
      return this._content["timing"] as Timing;
    }

    get timingPeriod(): Period {
      return this._content["timing"] as Period;
    }

    get timingDateTime(): DateTime {
      return this._content["timing"] as DateTime;
    }

    /** The patient who used the device. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The time at which the statement was made/recorded. */
    set recordedOn(value: DateTime) {
      this._content["recordedOn"] = value;
    }

    get recordedOn(): DateTime {
      return this._content["recordedOn"] as DateTime;
    }

    /**
     * Details about the device statement that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated with
     * the statement.
     */
    set notes(value: Array<String>) {
      this._content["notes"] = value;
    }

    get notes(): Array<String> {
      return this._content["notes"] as Array<String>;
    }

    /** Reason or justification for the use of the device. */
    set indication(value: Array<CodeableConcept>) {
      this._content["indication"] = value;
    }

    get indication(): Array<CodeableConcept> {
      return this._content["indication"] as Array<CodeableConcept>;
    }

    /** An external identifier for this statement such as an IRI. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The details of the device used. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /** The time period over which the device was used. */
    set whenUsed(value: Period) {
      this._content["whenUsed"] = value;
    }

    get whenUsed(): Period {
      return this._content["whenUsed"] as Period;
    }

    /**
     * Indicates the site on the subject's body where the device was used ( i.e.
     * the target site).
     */
    set bodySite(value: CodeableConcept | Reference) {
      this._content["bodySite"] = value;
    }

    get bodySiteCodeableConcept(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    get bodySiteReference(): Reference {
      return this._content["bodySite"] as Reference;
    }

    /**
     * A record of a device being used by a patient where the record is the
     * result of a report from the patient or another clinician.
     */
    set DeviceUseStatement(value: Array<DomainResource>) {
      this._content["DeviceUseStatement"] = value;
    }

    get DeviceUseStatement(): Array<DomainResource> {
      return this._content["DeviceUseStatement"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DiagnosticOrder Resource */
  export class DiagnosticOrder {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DiagnosticOrder";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Any other notes associated with this patient, specimen or order (e.g.
     * "patient hates needles").
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The specific diagnostic investigations that are requested as part of this
     * request. Sometimes, there can only be one item per request, but in most
     * contexts, more than one investigation can be requested.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * A summary of the events of interest that have occurred as the request is
     * processed; e.g. when the order was made, various processing steps
     * (specimens received), when it was completed.
     */
    set event(value: Array<BackboneElement>) {
      this._content["event"] = value;
    }

    get event(): Array<BackboneElement> {
      return this._content["event"] as Array<BackboneElement>;
    }

    /** The clinical priority associated with this order. */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** The status of the order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** One or more specimens that the diagnostic investigation is about. */
    set specimen(value: Array<Reference>) {
      this._content["specimen"] = value;
    }

    get specimen(): Array<Reference> {
      return this._content["specimen"] as Array<Reference>;
    }

    /**
     * Additional clinical information about the patient or specimen that may
     * influence test interpretations. This includes observations explicitly
     * requested by the producer(filler) to provide context or supporting
     * information needed to complete the order.
     */
    set supportingInformation(
      value: Array<Reference> | Array<Reference> | Array<Reference>,
    ) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformationArray<Reference>(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    get supportingInformationArray<Reference>(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    get supportingInformationArray<Reference>(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    /**
     * An explanation or justification for why this diagnostic investigation is
     * being requested. This is often for billing purposes. May relate to the
     * resources referred to in supportingInformation.
     */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Identifiers assigned to this order instance by the orderer and/or the
     * receiver and/or order fulfiller.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The practitioner that holds legal responsibility for ordering the
     * investigation.
     */
    set orderer(value: Reference) {
      this._content["orderer"] = value;
    }

    get orderer(): Reference {
      return this._content["orderer"] as Reference;
    }

    /**
     * Who or what the investigation is to be performed on. This is usually a
     * human patient, but diagnostic tests can also be requested on animals,
     * groups of humans or animals, devices such as dialysis machines, or even
     * locations (typically for environmental scans).
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * A record of a request for a diagnostic investigation service to be
     * performed.
     */
    set DiagnosticOrder(value: Array<DomainResource>) {
      this._content["DiagnosticOrder"] = value;
    }

    get DiagnosticOrder(): Array<DomainResource> {
      return this._content["DiagnosticOrder"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DiagnosticReport Resource */
  export class DiagnosticReport {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DiagnosticReport";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Rich text representation of the entire result as issued by the diagnostic
     * service. Multiple formats are allowed but they SHALL be semantically
     * equivalent.
     */
    set presentedForm(value: Array<Attachment>) {
      this._content["presentedForm"] = value;
    }

    get presentedForm(): Array<Attachment> {
      return this._content["presentedForm"] as Array<Attachment>;
    }

    /** Codes for the conclusion. */
    set codedDiagnosis(value: Array<CodeableConcept>) {
      this._content["codedDiagnosis"] = value;
    }

    get codedDiagnosis(): Array<CodeableConcept> {
      return this._content["codedDiagnosis"] as Array<CodeableConcept>;
    }

    /**
     * Concise and clinically contextualized narrative interpretation of the
     * diagnostic report.
     */
    set conclusion(value: String) {
      this._content["conclusion"] = value;
    }

    get conclusion(): String {
      return this._content["conclusion"] as String;
    }

    /**
     * A list of key images associated with this report. The images are
     * generally created during the diagnostic process, and may be directly of
     * the patient, or of treated specimens (i.e. slides of interest).
     */
    set image(value: Array<BackboneElement>) {
      this._content["image"] = value;
    }

    get image(): Array<BackboneElement> {
      return this._content["image"] as Array<BackboneElement>;
    }

    /**
     * One or more links to full details of any imaging performed during the
     * diagnostic investigation. Typically, this is imaging performed by DICOM
     * enabled modalities, but this is not required. A fully enabled PACS viewer
     * can use this information to provide views of the source images.
     */
    set imagingStudy(value: Array<Reference> | Array<Reference>) {
      this._content["imagingStudy"] = value;
    }

    get imagingStudyArray<Reference>(): Array<Reference> {
      return this._content["imagingStudy"] as Array<Reference>;
    }

    get imagingStudyArray<Reference>(): Array<Reference> {
      return this._content["imagingStudy"] as Array<Reference>;
    }

    /**
     * Observations that are part of this diagnostic report. Observations can be
     * simple name/value pairs (e.g. "atomic" results), or they can be grouping
     * observations that include references to other members of the group (e.g.
     * "panels").
     */
    set result(value: Array<Reference>) {
      this._content["result"] = value;
    }

    get result(): Array<Reference> {
      return this._content["result"] as Array<Reference>;
    }

    /** Details about the specimens on which this diagnostic report is based. */
    set specimen(value: Array<Reference>) {
      this._content["specimen"] = value;
    }

    get specimen(): Array<Reference> {
      return this._content["specimen"] as Array<Reference>;
    }

    /** Details concerning a test or procedure requested. */
    set request(value: Array<Reference> | Array<Reference> | Array<Reference>) {
      this._content["request"] = value;
    }

    get requestArray<Reference>(): Array<Reference> {
      return this._content["request"] as Array<Reference>;
    }

    get requestArray<Reference>(): Array<Reference> {
      return this._content["request"] as Array<Reference>;
    }

    get requestArray<Reference>(): Array<Reference> {
      return this._content["request"] as Array<Reference>;
    }

    /** The diagnostic service that is responsible for issuing the report. */
    set performer(value: Reference | Reference) {
      this._content["performer"] = value;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    /**
     * The date and time that this version of the report was released from the
     * source diagnostic service.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source of
     * the date/time is not known, only the date/time itself.
     */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /** The link to the health care event (encounter) when the order was made. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The subject of the report. Usually, but not always, this is a patient.
     * However diagnostic services also perform analyses on specimens collected
     * from a variety of other sources.
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /** A code or name that describes this diagnostic report. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * A code that classifies the clinical discipline, department or diagnostic
     * service that created the report (e.g. cardiology, biochemistry,
     * hematology, MRI). This is used for searching, sorting and display
     * purposes.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** The status of the diagnostic report as a whole. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The local ID assigned to the report by the order filler, usually by the
     * Information System of the diagnostic service provider.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The findings and interpretation of diagnostic tests performed on
     * patients, groups of patients, devices, and locations, and/or specimens
     * derived from these. The report includes clinical context such as
     * requesting and provider information, and some mix of atomic results,
     * images, textual and coded interpretations, and formatted representation
     * of diagnostic reports.
     */
    set DiagnosticReport(value: Array<DomainResource>) {
      this._content["DiagnosticReport"] = value;
    }

    get DiagnosticReport(): Array<DomainResource> {
      return this._content["DiagnosticReport"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DocumentManifest Resource */
  export class DocumentManifest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DocumentManifest";
    protected _content: { [key: string]: TElement } = {};

    /** Related identifiers or resources associated with the DocumentManifest. */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /** The list of Documents included in the manifest. */
    set content(value: Array<BackboneElement>) {
      this._content["content"] = value;
    }

    get content(): Array<BackboneElement> {
      return this._content["content"] as Array<BackboneElement>;
    }

    /**
     * Human-readable description of the source document. This is sometimes
     * known as the "title".
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** The status of this document manifest. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the source system, application, or software that produced the
     * document manifest.
     */
    set source(value: Uri) {
      this._content["source"] = value;
    }

    get source(): Uri {
      return this._content["source"] as Uri;
    }

    /**
     * When the document manifest was created for submission to the server (not
     * necessarily the same thing as the actual resource last modified time,
     * since it may be modified, replicated, etc.).
     */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * Identifies who is responsible for creating the manifest, and adding
     * documents to it.
     */
    set author(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["author"] = value;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * Specifies the kind of this set of documents (e.g. Patient Summary,
     * Discharge Summary, Prescription, etc.). The type of a set of documents
     * may be the same as one of the documents in it - especially if there is
     * only one - but it may be wider.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * A patient, practitioner, or organization for which this set of documents
     * is intended.
     */
    set recipient(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["recipient"] = value;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * Who or what the set of documents is about. The documents can be about a
     * person, (patient or healthcare practitioner), a device (i.e. machine) or
     * even a group of subjects (such as a document about a herd of farm
     * animals, or a set of patients that share a common exposure). If the
     * documents cross more than one subject, then more than one subject is
     * allowed here (unusual use case).
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Other identifiers associated with the document manifest, including
     * version independent identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A single identifier that uniquely identifies this manifest. Principally
     * used to refer to the manifest in non-FHIR contexts.
     */
    set masterIdentifier(value: Identifier) {
      this._content["masterIdentifier"] = value;
    }

    get masterIdentifier(): Identifier {
      return this._content["masterIdentifier"] as Identifier;
    }

    /** A manifest that defines a set of documents. */
    set DocumentManifest(value: Array<DomainResource>) {
      this._content["DocumentManifest"] = value;
    }

    get DocumentManifest(): Array<DomainResource> {
      return this._content["DocumentManifest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for DocumentReference Resource */
  export class DocumentReference {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DocumentReference";
    protected _content: { [key: string]: TElement } = {};

    /** The clinical context in which the document was prepared. */
    set context(value: BackboneElement) {
      this._content["context"] = value;
    }

    get context(): BackboneElement {
      return this._content["context"] as BackboneElement;
    }

    /**
     * The document and format referenced. There may be multiple content element
     * repetitions, each with a different format.
     */
    set content(value: Array<BackboneElement>) {
      this._content["content"] = value;
    }

    get content(): Array<BackboneElement> {
      return this._content["content"] as Array<BackboneElement>;
    }

    /**
     * A set of Security-Tag codes specifying the level of privacy/security of
     * the Document. Note that DocumentReference.meta.security contains the
     * security labels of the "reference" to the document, while
     * DocumentReference.securityLabel contains a snapshot of the security
     * labels on the document the reference refers to.
     */
    set securityLabel(value: Array<CodeableConcept>) {
      this._content["securityLabel"] = value;
    }

    get securityLabel(): Array<CodeableConcept> {
      return this._content["securityLabel"] as Array<CodeableConcept>;
    }

    /**
     * Human-readable description of the source document. This is sometimes
     * known as the "title".
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Relationships that this document has with other document references that
     * already exist.
     */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /** The status of the underlying document. */
    set docStatus(value: CodeableConcept) {
      this._content["docStatus"] = value;
    }

    get docStatus(): CodeableConcept {
      return this._content["docStatus"] as CodeableConcept;
    }

    /** The status of this document reference. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** When the document reference was created. */
    set indexed(value: Instant) {
      this._content["indexed"] = value;
    }

    get indexed(): Instant {
      return this._content["indexed"] as Instant;
    }

    /** When the document was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Which person or organization authenticates that this document is valid. */
    set authenticator(value: Reference | Reference) {
      this._content["authenticator"] = value;
    }

    get authenticatorReference(): Reference {
      return this._content["authenticator"] as Reference;
    }

    get authenticatorReference(): Reference {
      return this._content["authenticator"] as Reference;
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the document.
     */
    set custodian(value: Reference) {
      this._content["custodian"] = value;
    }

    get custodian(): Reference {
      return this._content["custodian"] as Reference;
    }

    /** Identifies who is responsible for adding the information to the document. */
    set author(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["author"] = value;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    get authorArray<Reference>(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * A categorization for the type of document referenced - helps for indexing
     * and searching. This may be implied by or derived from the code specified
     * in the DocumentReference.type.
     */
    set class(value: CodeableConcept) {
      this._content["class"] = value;
    }

    get class(): CodeableConcept {
      return this._content["class"] as CodeableConcept;
    }

    /**
     * Specifies the particular kind of document referenced (e.g. History and
     * Physical, Discharge Summary, Progress Note). This usually equates to the
     * purpose of making the document referenced.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Who or what the document is about. The document can be about a person,
     * (patient or healthcare practitioner), a device (e.g. a machine) or even a
     * group of subjects (such as a document about a herd of farm animals, or a
     * set of patients that share a common exposure).
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Other identifiers associated with the document, including version
     * independent identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Document identifier as assigned by the source of the document. This
     * identifier is specific to this version of the document. This unique
     * identifier may be used elsewhere to identify this version of the
     * document.
     */
    set masterIdentifier(value: Identifier) {
      this._content["masterIdentifier"] = value;
    }

    get masterIdentifier(): Identifier {
      return this._content["masterIdentifier"] as Identifier;
    }

    /** A reference to a document . */
    set DocumentReference(value: Array<DomainResource>) {
      this._content["DocumentReference"] = value;
    }

    get DocumentReference(): Array<DomainResource> {
      return this._content["DocumentReference"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for EligibilityRequest Resource */
  export class EligibilityRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EligibilityRequest";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The Insurer who is target of the request. */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides the insurance eligibility details from the insurer
     * regarding a specified coverage and optionally some class of service.
     */
    set EligibilityRequest(value: Array<DomainResource>) {
      this._content["EligibilityRequest"] = value;
    }

    get EligibilityRequest(): Array<DomainResource> {
      return this._content["EligibilityRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for EligibilityResponse Resource */
  export class EligibilityResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EligibilityResponse";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Transaction status: error, complete. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides eligibility and plan details from the processing
     * of an Eligibility resource.
     */
    set EligibilityResponse(value: Array<DomainResource>) {
      this._content["EligibilityResponse"] = value;
    }

    get EligibilityResponse(): Array<DomainResource> {
      return this._content["EligibilityResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Encounter Resource */
  export class Encounter {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Encounter";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Another Encounter of which this encounter is a part of (administratively
     * or in time).
     */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /**
     * An organization that is in charge of maintaining the information of this
     * Encounter (e.g. who maintains the report or the master service catalog
     * item, etc.). This MAY be the same as the organization on the Patient
     * record, however it could be different. This MAY not be not the Service
     * Delivery Location's Organization.
     */
    set serviceProvider(value: Reference) {
      this._content["serviceProvider"] = value;
    }

    get serviceProvider(): Reference {
      return this._content["serviceProvider"] as Reference;
    }

    /** List of locations where the patient has been during this encounter. */
    set location(value: Array<BackboneElement>) {
      this._content["location"] = value;
    }

    get location(): Array<BackboneElement> {
      return this._content["location"] as Array<BackboneElement>;
    }

    /** Details about the admission to a healthcare service. */
    set hospitalization(value: BackboneElement) {
      this._content["hospitalization"] = value;
    }

    get hospitalization(): BackboneElement {
      return this._content["hospitalization"] as BackboneElement;
    }

    /**
     * Reason the encounter takes place, as specified using information from
     * another resource. For admissions, this is the admission diagnosis. The
     * indication will typically be a Condition (with other resources referenced
     * in the evidence.detail), or a Procedure.
     */
    set indication(value: Array<Reference> | Array<Reference>) {
      this._content["indication"] = value;
    }

    get indicationArray<Reference>(): Array<Reference> {
      return this._content["indication"] as Array<Reference>;
    }

    get indicationArray<Reference>(): Array<Reference> {
      return this._content["indication"] as Array<Reference>;
    }

    /**
     * Reason the encounter takes place, expressed as a code. For admissions,
     * this can be used for a coded admission diagnosis.
     */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /**
     * Quantity of time the encounter lasted. This excludes the time during
     * leaves of absence.
     */
    set length(value: Quantity) {
      this._content["length"] = value;
    }

    get length(): Quantity {
      return this._content["length"] as Quantity;
    }

    /** The start and end time of the encounter. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The appointment that scheduled this encounter. */
    set appointment(value: Reference) {
      this._content["appointment"] = value;
    }

    get appointment(): Reference {
      return this._content["appointment"] as Reference;
    }

    /** The list of people responsible for providing the service. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** The referral request this encounter satisfies (incoming referral). */
    set incomingReferral(value: Array<Reference>) {
      this._content["incomingReferral"] = value;
    }

    get incomingReferral(): Array<Reference> {
      return this._content["incomingReferral"] as Array<Reference>;
    }

    /**
     * Where a specific encounter should be classified as a part of a specific
     * episode(s) of care this field should be used. This association can
     * facilitate grouping of related encounters together for a specific
     * purpose, such as government reporting, issue tracking, association via a
     * common problem. The association is recorded on the encounter as these are
     * typically created after the episode of care, and grouped on entry rather
     * than editing the episode of care to append another encounter to it (the
     * episode of care could span years).
     */
    set episodeOfCare(value: Array<Reference>) {
      this._content["episodeOfCare"] = value;
    }

    get episodeOfCare(): Array<Reference> {
      return this._content["episodeOfCare"] as Array<Reference>;
    }

    /** The patient present at the encounter. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Indicates the urgency of the encounter. */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care,
     * skilled nursing, rehabilitation).
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }

    /** Inpatient | outpatient | ambulatory | emergency +. */
    set class(value: Code) {
      this._content["class"] = value;
    }

    get class(): Code {
      return this._content["class"] as Code;
    }

    /**
     * The status history permits the encounter resource to contain the status
     * history without needing to read through the historical versions of the
     * resource, or even have the server store them.
     */
    set statusHistory(value: Array<BackboneElement>) {
      this._content["statusHistory"] = value;
    }

    get statusHistory(): Array<BackboneElement> {
      return this._content["statusHistory"] as Array<BackboneElement>;
    }

    /** Planned | arrived | in-progress | onleave | finished | cancelled. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Identifier(s) by which this encounter is known. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An interaction between a patient and healthcare provider(s) for the
     * purpose of providing healthcare service(s) or assessing the health status
     * of a patient.
     */
    set Encounter(value: Array<DomainResource>) {
      this._content["Encounter"] = value;
    }

    get Encounter(): Array<DomainResource> {
      return this._content["Encounter"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for EnrollmentRequest Resource */
  export class EnrollmentRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EnrollmentRequest";
    protected _content: { [key: string]: TElement } = {};

    /** The relationship of the patient to the subscriber. */
    set relationship(value: Coding) {
      this._content["relationship"] = value;
    }

    get relationship(): Coding {
      return this._content["relationship"] as Coding;
    }

    /** Reference to the program or plan identification, underwriter or payor. */
    set coverage(value: Reference) {
      this._content["coverage"] = value;
    }

    get coverage(): Reference {
      return this._content["coverage"] as Reference;
    }

    /** Patient Resource. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The Insurer who is target of the request. */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides the insurance enrollment details to the insurer
     * regarding a specified coverage.
     */
    set EnrollmentRequest(value: Array<DomainResource>) {
      this._content["EnrollmentRequest"] = value;
    }

    get EnrollmentRequest(): Array<DomainResource> {
      return this._content["EnrollmentRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for EnrollmentResponse Resource */
  export class EnrollmentResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EnrollmentResponse";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Transaction status: error, complete. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides enrollment and plan details from the processing of
     * an Enrollment resource.
     */
    set EnrollmentResponse(value: Array<DomainResource>) {
      this._content["EnrollmentResponse"] = value;
    }

    get EnrollmentResponse(): Array<DomainResource> {
      return this._content["EnrollmentResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for EpisodeOfCare Resource */
  export class EpisodeOfCare {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The list of practitioners that may be facilitating this episode of care
     * for specific purposes.
     */
    set careTeam(value: Array<BackboneElement>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<BackboneElement> {
      return this._content["careTeam"] as Array<BackboneElement>;
    }

    /**
     * The practitioner that is the care manager/care co-ordinator for this
     * patient.
     */
    set careManager(value: Reference) {
      this._content["careManager"] = value;
    }

    get careManager(): Reference {
      return this._content["careManager"] as Reference;
    }

    /**
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
     * referrals.
     */
    set referralRequest(value: Array<Reference>) {
      this._content["referralRequest"] = value;
    }

    get referralRequest(): Array<Reference> {
      return this._content["referralRequest"] as Array<Reference>;
    }

    /**
     * The interval during which the managing organization assumes the defined
     * responsibility.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * The organization that has assumed the specific responsibilities for the
     * specified duration.
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** The patient that this EpisodeOfCare applies to. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * A list of conditions/problems/diagnoses that this episode of care is
     * intended to be providing care for.
     */
    set condition(value: Array<Reference>) {
      this._content["condition"] = value;
    }

    get condition(): Array<Reference> {
      return this._content["condition"] as Array<Reference>;
    }

    /**
     * A classification of the type of encounter; e.g. specialist referral,
     * disease management, type of funded care.
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }

    /**
     * The history of statuses that the EpisodeOfCare has been through (without
     * requiring processing the history of the resource).
     */
    set statusHistory(value: Array<BackboneElement>) {
      this._content["statusHistory"] = value;
    }

    get statusHistory(): Array<BackboneElement> {
      return this._content["statusHistory"] as Array<BackboneElement>;
    }

    /** Planned | waitlist | active | onhold | finished | cancelled. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Identifier(s) by which this EpisodeOfCare is known. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An association between a patient and an organization / healthcare
     * provider(s) during which time encounters may occur. The managing
     * organization assumes a level of responsibility for the patient during
     * this time.
     */
    set EpisodeOfCare(value: Array<DomainResource>) {
      this._content["EpisodeOfCare"] = value;
    }

    get EpisodeOfCare(): Array<DomainResource> {
      return this._content["EpisodeOfCare"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ExplanationOfBenefit Resource */
  export class ExplanationOfBenefit {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Transaction status: error, complete. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides: the claim details; adjudication details from the
     * processing of a Claim; and optionally account balance information, for
     * informing the subscriber of the benefits provided.
     */
    set ExplanationOfBenefit(value: Array<DomainResource>) {
      this._content["ExplanationOfBenefit"] = value;
    }

    get ExplanationOfBenefit(): Array<DomainResource> {
      return this._content["ExplanationOfBenefit"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for FamilyMemberHistory Resource */
  export class FamilyMemberHistory {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The significant Conditions (or condition) that the family member had.
     * This is a repeating section to allow a system to represent more than one
     * condition per resource, though there is nothing stopping multiple
     * resources - one per condition.
     */
    set condition(value: Array<BackboneElement>) {
      this._content["condition"] = value;
    }

    get condition(): Array<BackboneElement> {
      return this._content["condition"] as Array<BackboneElement>;
    }

    /**
     * This property allows a non condition-specific note to the made about the
     * related person. Ideally, the note would be in the condition property, but
     * this is not always possible.
     */
    set note(value: Annotation) {
      this._content["note"] = value;
    }

    get note(): Annotation {
      return this._content["note"] as Annotation;
    }

    /**
     * Deceased flag or the actual or approximate age of the relative at the
     * time of death for the family member history record.
     */
    set deceased(value: Boolean | Quantity | Range | Date | String) {
      this._content["deceased"] = value;
    }

    get deceasedBoolean(): Boolean {
      return this._content["deceased"] as Boolean;
    }

    get deceasedQuantity(): Quantity {
      return this._content["deceased"] as Quantity;
    }

    get deceasedRange(): Range {
      return this._content["deceased"] as Range;
    }

    get deceasedDate(): Date {
      return this._content["deceased"] as Date;
    }

    get deceasedString(): String {
      return this._content["deceased"] as String;
    }

    /**
     * The actual or approximate age of the relative at the time the family
     * member history is recorded.
     */
    set age(value: Quantity | Range | String) {
      this._content["age"] = value;
    }

    get ageQuantity(): Quantity {
      return this._content["age"] as Quantity;
    }

    get ageRange(): Range {
      return this._content["age"] as Range;
    }

    get ageString(): String {
      return this._content["age"] as String;
    }

    /** The actual or approximate date of birth of the relative. */
    set born(value: Period | Date | String) {
      this._content["born"] = value;
    }

    get bornPeriod(): Period {
      return this._content["born"] as Period;
    }

    get bornDate(): Date {
      return this._content["born"] as Date;
    }

    get bornString(): String {
      return this._content["born"] as String;
    }

    /**
     * Administrative Gender - the gender that the relative is considered to
     * have for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /**
     * The type of relationship this person has to the patient (father, mother,
     * brother etc.).
     */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /**
     * This will either be a name or a description; e.g. "Aunt Susan", "my
     * cousin with the red hair".
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** A code specifying a state of a Family Member History record. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The date (and possibly time) when the family member history was taken. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** The person who this history concerns. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * This records identifiers associated with this family member history
     * record that are defined by business processes and/ or used to refer to it
     * when a direct URL reference to the resource itself is not appropriate
     * (e.g. in CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Significant health events and conditions for a person related to the
     * patient relevant in the context of care for the patient.
     */
    set FamilyMemberHistory(value: Array<DomainResource>) {
      this._content["FamilyMemberHistory"] = value;
    }

    get FamilyMemberHistory(): Array<DomainResource> {
      return this._content["FamilyMemberHistory"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Flag Resource */
  export class Flag {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Flag";
    protected _content: { [key: string]: TElement } = {};

    /** The coded value or textual component of the flag to display to the user. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** The person, organization or device that created the flag. */
    set author(value: Reference | Reference | Reference | Reference) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    /** This alert is only relevant during the encounter. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The patient, location, group , organization , or practitioner this is
     * about record this flag is associated with.
     */
    set subject(
      value: Reference | Reference | Reference | Reference | Reference,
    ) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The period of time from the activation of the flag to inactivation of the
     * flag. If the flag is active, the end of the period should be
     * unspecified.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Supports basic workflow. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Allows an flag to be divided into different categories like clinical,
     * administrative etc. Intended to be used as a means of filtering which
     * flags are displayed to particular user or in a given context.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * Identifier assigned to the flag for external use (outside the FHIR
     * environment).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Prospective warnings of potential issues when providing care to the
     * patient.
     */
    set Flag(value: Array<DomainResource>) {
      this._content["Flag"] = value;
    }

    get Flag(): Array<DomainResource> {
      return this._content["Flag"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Goal Resource */
  export class Goal {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Goal";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Identifies the change (or lack of change) at the point where the goal was
     * deepmed to be cancelled or achieved.
     */
    set outcome(value: Array<BackboneElement>) {
      this._content["outcome"] = value;
    }

    get outcome(): Array<BackboneElement> {
      return this._content["outcome"] as Array<BackboneElement>;
    }

    /** Any comments related to the goal. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The identified conditions and other health record elements that are
     * intended to be addressed by the goal.
     */
    set addresses(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["addresses"] = value;
    }

    get addressesArray<Reference>(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    get addressesArray<Reference>(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    get addressesArray<Reference>(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    get addressesArray<Reference>(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    get addressesArray<Reference>(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    get addressesArray<Reference>(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    /**
     * Identifies the mutually agreed level of importance associated with
     * reaching/sustaining the goal.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /** Indicates whose goal this is - patient goal, practitioner goal, etc. */
    set author(value: Reference | Reference | Reference) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    /** Captures the reason for the current status. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /**
     * Identifies when the current status. I.e. When initially created, when
     * achieved, when cancelled, etc.
     */
    set statusDate(value: Date) {
      this._content["statusDate"] = value;
    }

    get statusDate(): Date {
      return this._content["statusDate"] as Date;
    }

    /**
     * Indicates whether the goal has been reached and is still considered
     * relevant.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Human-readable description of a specific desired objective of care. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Indicates a category the goal falls within. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Indicates either the date or the duration after start by which the goal
     * should be met.
     */
    set target(value: Date | Quantity) {
      this._content["target"] = value;
    }

    get targetDate(): Date {
      return this._content["target"] as Date;
    }

    get targetQuantity(): Quantity {
      return this._content["target"] as Quantity;
    }

    /** The date or event after which the goal should begin being pursued. */
    set start(value: Date | CodeableConcept) {
      this._content["start"] = value;
    }

    get startDate(): Date {
      return this._content["start"] as Date;
    }

    get startCodeableConcept(): CodeableConcept {
      return this._content["start"] as CodeableConcept;
    }

    /**
     * Identifies the patient, group or organization for whom the goal is being
     * established.
     */
    set subject(value: Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * This records identifiers associated with this care plan that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Describes the intended objective(s) for a patient, group or organization
     * care, for example, weight loss, restoring an activity of daily living,
     * obtaining herd immunity via immunization, meeting a process improvement
     * objective, etc.
     */
    set Goal(value: Array<DomainResource>) {
      this._content["Goal"] = value;
    }

    get Goal(): Array<DomainResource> {
      return this._content["Goal"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Group Resource */
  export class Group {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Group";
    protected _content: { [key: string]: TElement } = {};

    /** Identifies the resource instances that are members of the group. */
    set member(value: Array<BackboneElement>) {
      this._content["member"] = value;
    }

    get member(): Array<BackboneElement> {
      return this._content["member"] as Array<BackboneElement>;
    }

    /** Identifies the traits shared by members of the group. */
    set characteristic(value: Array<BackboneElement>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<BackboneElement> {
      return this._content["characteristic"] as Array<BackboneElement>;
    }

    /** A count of the number of resource instances that are part of the group. */
    set quantity(value: UnsignedInt) {
      this._content["quantity"] = value;
    }

    get quantity(): UnsignedInt {
      return this._content["quantity"] as UnsignedInt;
    }

    /** A label assigned to the group for human identification and communication. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Provides a specific type of resource the group includes; e.g. "cow",
     * "syringe", etc.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * If true, indicates that the resource refers to a specific group of real
     * individuals. If false, the group defines a set of intended individuals.
     */
    set actual(value: Boolean) {
      this._content["actual"] = value;
    }

    get actual(): Boolean {
      return this._content["actual"] as Boolean;
    }

    /**
     * Identifies the broad classification of the kind of resources the group
     * includes.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** A unique business identifier for this group. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Represents a defined collection of entities that may be discussed or
     * acted upon collectively but which are not expected to act collectively
     * and are not formally or legally recognized; i.e. a collection of entities
     * that isn't an Organization.
     */
    set Group(value: Array<DomainResource>) {
      this._content["Group"] = value;
    }

    get Group(): Array<DomainResource> {
      return this._content["Group"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for HealthcareService Resource */
  export class HealthcareService {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/HealthcareService";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A description of site availability exceptions, e.g. public holiday
     * availability. Succinctly describing all possible exceptions to normal
     * site availability as details in the available Times and not available
     * Times.
     */
    set availabilityExceptions(value: String) {
      this._content["availabilityExceptions"] = value;
    }

    get availabilityExceptions(): String {
      return this._content["availabilityExceptions"] as String;
    }

    /**
     * The HealthcareService is not available during this period of time due to
     * the provided reason.
     */
    set notAvailable(value: Array<BackboneElement>) {
      this._content["notAvailable"] = value;
    }

    get notAvailable(): Array<BackboneElement> {
      return this._content["notAvailable"] as Array<BackboneElement>;
    }

    /** A collection of times that the Service Site is available. */
    set availableTime(value: Array<BackboneElement>) {
      this._content["availableTime"] = value;
    }

    get availableTime(): Array<BackboneElement> {
      return this._content["availableTime"] as Array<BackboneElement>;
    }

    /**
     * Indicates whether or not a prospective consumer will require an
     * appointment for a particular service at a site to be provided by the
     * Organization. Indicates if an appointment is required for access to this
     * service.
     */
    set appointmentRequired(value: Boolean) {
      this._content["appointmentRequired"] = value;
    }

    get appointmentRequired(): Boolean {
      return this._content["appointmentRequired"] as Boolean;
    }

    /**
     * The public part of the 'keys' allocated to an Organization by an
     * accredited body to support secure exchange of data over the internet. To
     * be provided by the Organization, where available.
     */
    set publicKey(value: String) {
      this._content["publicKey"] = value;
    }

    get publicKey(): String {
      return this._content["publicKey"] as String;
    }

    /**
     * Ways that the service accepts referrals, if this is not provided then it
     * is implied that no referral is required.
     */
    set referralMethod(value: Array<CodeableConcept>) {
      this._content["referralMethod"] = value;
    }

    get referralMethod(): Array<CodeableConcept> {
      return this._content["referralMethod"] as Array<CodeableConcept>;
    }

    /** Collection of characteristics (attributes). */
    set characteristic(value: Array<CodeableConcept>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<CodeableConcept> {
      return this._content["characteristic"] as Array<CodeableConcept>;
    }

    /** Program Names that can be used to categorize the service. */
    set programName(value: Array<String>) {
      this._content["programName"] = value;
    }

    get programName(): Array<String> {
      return this._content["programName"] as Array<String>;
    }

    /** Describes the eligibility conditions for the service. */
    set eligibilityNote(value: String) {
      this._content["eligibilityNote"] = value;
    }

    get eligibilityNote(): String {
      return this._content["eligibilityNote"] as String;
    }

    /**
     * Does this service have specific eligibility requirements that need to be
     * met in order to use the service?
     */
    set eligibility(value: CodeableConcept) {
      this._content["eligibility"] = value;
    }

    get eligibility(): CodeableConcept {
      return this._content["eligibility"] as CodeableConcept;
    }

    /**
     * The code(s) that detail the conditions under which the healthcare service
     * is available/offered.
     */
    set serviceProvisionCode(value: Array<CodeableConcept>) {
      this._content["serviceProvisionCode"] = value;
    }

    get serviceProvisionCode(): Array<CodeableConcept> {
      return this._content["serviceProvisionCode"] as Array<CodeableConcept>;
    }

    /**
     * The location(s) that this service is available to (not where the service
     * is provided).
     */
    set coverageArea(value: Array<Reference>) {
      this._content["coverageArea"] = value;
    }

    get coverageArea(): Array<Reference> {
      return this._content["coverageArea"] as Array<Reference>;
    }

    /** List of contacts related to this specific healthcare service. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /**
     * If there is a photo/symbol associated with this HealthcareService, it may
     * be included here to facilitate quick identification of the service in a
     * list.
     */
    set photo(value: Attachment) {
      this._content["photo"] = value;
    }

    get photo(): Attachment {
      return this._content["photo"] as Attachment;
    }

    /** Extra details about the service that can't be placed in the other fields. */
    set extraDetails(value: String) {
      this._content["extraDetails"] = value;
    }

    get extraDetails(): String {
      return this._content["extraDetails"] as String;
    }

    /**
     * Any additional description of the service and/or any specific issues not
     * covered by the other attributes, which can be displayed as further detail
     * under the serviceName.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * Further description of the service as it would be presented to a consumer
     * while searching.
     */
    set serviceName(value: String) {
      this._content["serviceName"] = value;
    }

    get serviceName(): String {
      return this._content["serviceName"] as String;
    }

    /** The location where this healthcare service may be provided. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** A specific type of service that may be delivered or performed. */
    set serviceType(value: Array<BackboneElement>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<BackboneElement> {
      return this._content["serviceType"] as Array<BackboneElement>;
    }

    /** Identifies the broad category of service being performed or delivered. */
    set serviceCategory(value: CodeableConcept) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): CodeableConcept {
      return this._content["serviceCategory"] as CodeableConcept;
    }

    /** The organization that provides this healthcare service. */
    set providedBy(value: Reference) {
      this._content["providedBy"] = value;
    }

    get providedBy(): Reference {
      return this._content["providedBy"] as Reference;
    }

    /** External identifiers for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The details of a healthcare service available at a location. */
    set HealthcareService(value: Array<DomainResource>) {
      this._content["HealthcareService"] = value;
    }

    get HealthcareService(): Array<DomainResource> {
      return this._content["HealthcareService"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ImagingObjectSelection Resource */
  export class ImagingObjectSelection {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImagingObjectSelection";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Study identity and locating information of the DICOM SOP instances in the
     * selection.
     */
    set study(value: Array<BackboneElement>) {
      this._content["study"] = value;
    }

    get study(): Array<BackboneElement> {
      return this._content["study"] as Array<BackboneElement>;
    }

    /**
     * Date and time when the selection of the referenced instances were made.
     * It is (typically) different from the creation date of the selection
     * resource, and from dates associated with the referenced instances (e.g.
     * capture time of the referenced image).
     */
    set authoringTime(value: DateTime) {
      this._content["authoringTime"] = value;
    }

    get authoringTime(): DateTime {
      return this._content["authoringTime"] as DateTime;
    }

    /**
     * Author of ImagingObjectSelection. It can be a human author or a device
     * which made the decision of the SOP instances selected. For example, a
     * radiologist selected a set of imaging SOP instances to attach in a
     * diagnostic report, and a CAD application may author a selection to
     * describe SOP instances it used to generate a detection conclusion.
     */
    set author(
      value: Reference | Reference | Reference | Reference | Reference,
    ) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Text description of the DICOM SOP instances selected in the
     * ImagingObjectSelection. This should be aligned with the content of the
     * title element, and can provide further explanation of the SOP instances
     * in the selection.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The reason for, or significance of, the selection of objects referenced
     * in the resource.
     */
    set title(value: CodeableConcept) {
      this._content["title"] = value;
    }

    get title(): CodeableConcept {
      return this._content["title"] as CodeableConcept;
    }

    /**
     * A patient resource reference which is the patient subject of all DICOM
     * SOP Instances in this ImagingObjectSelection.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Instance UID of the DICOM KOS SOP Instances represented in this resource. */
    set uid(value: Oid) {
      this._content["uid"] = value;
    }

    get uid(): Oid {
      return this._content["uid"] as Oid;
    }

    /**
     * A manifest of a set of DICOM Service-Object Pair Instances (SOP
     * Instances). The referenced SOP Instances (images or other content) are
     * for a single patient, and may be from one or more studies. The referenced
     * SOP Instances have been selected for a purpose, such as quality
     * assurance, conference, or consult. Reflecting that range of purposes,
     * typical ImagingObjectSelection resources may include all SOP Instances in
     * a study (perhaps for sharing through a Health Information Exchange); key
     * images from multiple studies (for reference by a referring or treating
     * physician); a multi-frame ultrasound instance ("cine" video clip) and a
     * set of measurements taken from that instance (for inclusion in a teaching
     * file); and so on.
     */
    set ImagingObjectSelection(value: Array<DomainResource>) {
      this._content["ImagingObjectSelection"] = value;
    }

    get ImagingObjectSelection(): Array<DomainResource> {
      return this._content["ImagingObjectSelection"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ImagingStudy Resource */
  export class ImagingStudy {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ImagingStudy";
    protected _content: { [key: string]: TElement } = {};

    /** Each study has one or more series of images or other content. */
    set series(value: Array<BackboneElement>) {
      this._content["series"] = value;
    }

    get series(): Array<BackboneElement> {
      return this._content["series"] as Array<BackboneElement>;
    }

    /**
     * Institution-generated description or classification of the Study
     * performed.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Who read the study and interpreted the images or other content. */
    set interpreter(value: Reference) {
      this._content["interpreter"] = value;
    }

    get interpreter(): Reference {
      return this._content["interpreter"] as Reference;
    }

    /** Type of procedure performed. */
    set procedure(value: Array<Reference>) {
      this._content["procedure"] = value;
    }

    get procedure(): Array<Reference> {
      return this._content["procedure"] as Array<Reference>;
    }

    /** Number of SOP Instances in Study. */
    set numberOfInstances(value: UnsignedInt) {
      this._content["numberOfInstances"] = value;
    }

    get numberOfInstances(): UnsignedInt {
      return this._content["numberOfInstances"] as UnsignedInt;
    }

    /** Number of Series in Study. */
    set numberOfSeries(value: UnsignedInt) {
      this._content["numberOfSeries"] = value;
    }

    get numberOfSeries(): UnsignedInt {
      return this._content["numberOfSeries"] as UnsignedInt;
    }

    /** WADO-RS resource where Study is available. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /** Availability of study (online, offline or nearline). */
    set availability(value: Code) {
      this._content["availability"] = value;
    }

    get availability(): Code {
      return this._content["availability"] as Code;
    }

    /** The requesting/referring physician. */
    set referrer(value: Reference) {
      this._content["referrer"] = value;
    }

    get referrer(): Reference {
      return this._content["referrer"] as Reference;
    }

    /**
     * A list of all the Series.ImageModality values that are actual acquisition
     * modalities, i.e. those in the DICOM Context Group 29 (value set OID
     * 1.2.840.10008.6.1.19).
     */
    set modalityList(value: Array<Coding>) {
      this._content["modalityList"] = value;
    }

    get modalityList(): Array<Coding> {
      return this._content["modalityList"] as Array<Coding>;
    }

    /**
     * A list of the diagnostic orders that resulted in this imaging study being
     * performed.
     */
    set order(value: Array<Reference>) {
      this._content["order"] = value;
    }

    get order(): Array<Reference> {
      return this._content["order"] as Array<Reference>;
    }

    /** Other identifiers for the study. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Accession Number is an identifier related to some aspect of imaging
     * workflow and data management. Usage may vary across different
     * institutions. See for instance [IHE Radiology Technical Framework Volume
     * 1 Appendix
     * A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
     */
    set accession(value: Identifier) {
      this._content["accession"] = value;
    }

    get accession(): Identifier {
      return this._content["accession"] as Identifier;
    }

    /** Formal identifier for the study. */
    set uid(value: Oid) {
      this._content["uid"] = value;
    }

    get uid(): Oid {
      return this._content["uid"] as Oid;
    }

    /** The patient imaged in the study. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Date and Time the study started. */
    set started(value: DateTime) {
      this._content["started"] = value;
    }

    get started(): DateTime {
      return this._content["started"] as DateTime;
    }

    /**
     * Representation of the content produced in a DICOM imaging study. A study
     * comprises a set of series, each of which includes a set of Service-Object
     * Pair Instances (SOP Instances - images or other data) acquired or
     * produced in a common context. A series is of only one modality (e.g.
     * X-ray, CT, MR, ultrasound), but a study may have multiple series of
     * different modalities.
     */
    set ImagingStudy(value: Array<DomainResource>) {
      this._content["ImagingStudy"] = value;
    }

    get ImagingStudy(): Array<DomainResource> {
      return this._content["ImagingStudy"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Immunization Resource */
  export class Immunization {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Immunization";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Contains information about the protocol(s) under which the vaccine was
     * administered.
     */
    set vaccinationProtocol(value: Array<BackboneElement>) {
      this._content["vaccinationProtocol"] = value;
    }

    get vaccinationProtocol(): Array<BackboneElement> {
      return this._content["vaccinationProtocol"] as Array<BackboneElement>;
    }

    /**
     * Categorical data indicating that an adverse event is associated in time
     * to an immunization.
     */
    set reaction(value: Array<BackboneElement>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<BackboneElement> {
      return this._content["reaction"] as Array<BackboneElement>;
    }

    /** Reasons why a vaccine was or was not administered. */
    set explanation(value: BackboneElement) {
      this._content["explanation"] = value;
    }

    get explanation(): BackboneElement {
      return this._content["explanation"] as BackboneElement;
    }

    /**
     * Extra information about the immunization that is not conveyed by the
     * other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The quantity of vaccine product that was administered. */
    set doseQuantity(value: Quantity) {
      this._content["doseQuantity"] = value;
    }

    get doseQuantity(): Quantity {
      return this._content["doseQuantity"] as Quantity;
    }

    /** The path by which the vaccine product is taken into the body. */
    set route(value: CodeableConcept) {
      this._content["route"] = value;
    }

    get route(): CodeableConcept {
      return this._content["route"] as CodeableConcept;
    }

    /** Body site where vaccine was administered. */
    set site(value: CodeableConcept) {
      this._content["site"] = value;
    }

    get site(): CodeableConcept {
      return this._content["site"] as CodeableConcept;
    }

    /** Date vaccine batch expires. */
    set expirationDate(value: Date) {
      this._content["expirationDate"] = value;
    }

    get expirationDate(): Date {
      return this._content["expirationDate"] as Date;
    }

    /** Lot number of the vaccine product. */
    set lotNumber(value: String) {
      this._content["lotNumber"] = value;
    }

    get lotNumber(): String {
      return this._content["lotNumber"] as String;
    }

    /** The service delivery location where the vaccine administration occurred. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Name of vaccine manufacturer. */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /**
     * The visit or admission or other contact between patient and health care
     * provider the immunization was performed as part of.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Clinician who ordered the vaccination. */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /** Clinician who administered the vaccine. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /**
     * True if this administration was reported rather than directly
     * administered.
     */
    set reported(value: Boolean) {
      this._content["reported"] = value;
    }

    get reported(): Boolean {
      return this._content["reported"] as Boolean;
    }

    /** Indicates if the vaccination was or was not given. */
    set wasNotGiven(value: Boolean) {
      this._content["wasNotGiven"] = value;
    }

    get wasNotGiven(): Boolean {
      return this._content["wasNotGiven"] as Boolean;
    }

    /** The patient who either received or did not receive the immunization. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Vaccine that was administered or was to be administered. */
    set vaccineCode(value: CodeableConcept) {
      this._content["vaccineCode"] = value;
    }

    get vaccineCode(): CodeableConcept {
      return this._content["vaccineCode"] as CodeableConcept;
    }

    /** Date vaccine administered or was to be administered. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Indicates the current status of the vaccination event. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A unique identifier assigned to this immunization record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Describes the event of a patient being administered a vaccination or a
     * record of a vaccination as reported by a patient, a clinician or another
     * party and may include vaccine reaction information and what vaccination
     * protocol was followed.
     */
    set Immunization(value: Array<DomainResource>) {
      this._content["Immunization"] = value;
    }

    get Immunization(): Array<DomainResource> {
      return this._content["Immunization"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ImmunizationRecommendation Resource */
  export class ImmunizationRecommendation {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation";
    protected _content: { [key: string]: TElement } = {};

    /** Vaccine administration recommendations. */
    set recommendation(value: Array<BackboneElement>) {
      this._content["recommendation"] = value;
    }

    get recommendation(): Array<BackboneElement> {
      return this._content["recommendation"] as Array<BackboneElement>;
    }

    /** The patient for whom the recommendations are for. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** A unique identifier assigned to this particular recommendation record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A patient's point-in-time immunization and recommendation (i.e.
     * forecasting a patient's immunization eligibility according to a published
     * schedule) with optional supporting justification.
     */
    set ImmunizationRecommendation(value: Array<DomainResource>) {
      this._content["ImmunizationRecommendation"] = value;
    }

    get ImmunizationRecommendation(): Array<DomainResource> {
      return this._content[
        "ImmunizationRecommendation"
      ] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ImplementationGuide Resource */
  export class ImplementationGuide {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImplementationGuide";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A page / section in the implementation guide. The root page is the
     * implementation guide home page.
     */
    set page(value: BackboneElement) {
      this._content["page"] = value;
    }

    get page(): BackboneElement {
      return this._content["page"] as BackboneElement;
    }

    /**
     * A binary file that is included in the implementation guide when it is
     * published.
     */
    set binary(value: Array<Uri>) {
      this._content["binary"] = value;
    }

    get binary(): Array<Uri> {
      return this._content["binary"] as Array<Uri>;
    }

    /**
     * A set of profiles that all resources covered by this implementation guide
     * must conform to.
     */
    set global(value: Array<BackboneElement>) {
      this._content["global"] = value;
    }

    get global(): Array<BackboneElement> {
      return this._content["global"] as Array<BackboneElement>;
    }

    /**
     * A logical group of resources. Logical groups can be used when building
     * pages.
     */
    set package(value: Array<BackboneElement>) {
      this._content["package"] = value;
    }

    get package(): Array<BackboneElement> {
      return this._content["package"] as Array<BackboneElement>;
    }

    /**
     * Another implementation guide that this implementation depends on.
     * Typically, an implementation guide uses value sets, profiles etc.defined
     * in other implementation guides.
     */
    set dependency(value: Array<BackboneElement>) {
      this._content["dependency"] = value;
    }

    get dependency(): Array<BackboneElement> {
      return this._content["dependency"] as Array<BackboneElement>;
    }

    /**
     * The version of the FHIR specification on which this ImplementationGuide
     * is based - this is the formal version of the specification, without the
     * revision number, e.g. [publication].[major].[minor], which is 1.0.2 for
     * this version.
     */
    set fhirVersion(value: Id) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Id {
      return this._content["fhirVersion"] as Id;
    }

    /**
     * A copyright statement relating to the implementation guide and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the details of the constraints and mappings.
     */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of implementation guides. The most common use of this
     * element is to represent the country / jurisdiction for which this
     * implementation guide was defined.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /**
     * A free text natural language description of the Implementation Guide and
     * its use.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The date this version of the implementation guide was published. The date
     * must change when the business version changes, if it does, and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the implementation guide changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the
     * implementation guide.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * This Implementation Guide was authored for testing purposes (or
     * education/evaluation/marketing), and is not intended to be used for
     * genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of the Implementation Guide. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name identifying the Implementation Guide. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the
     * Implementation Guide when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the
     * Implementation Guide author manually.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * An absolute URL that is used to identify this implementation guide when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this implementation guide is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A set of rules or how FHIR is used to solve a particular problem. This
     * resource is used to gather all the parts of an implementation guide into
     * a logical whole, and to publish a computable definition of all the
     * parts.
     */
    set ImplementationGuide(value: DomainResource) {
      this._content["ImplementationGuide"] = value;
    }

    get ImplementationGuide(): DomainResource {
      return this._content["ImplementationGuide"] as DomainResource;
    }
  }

  /** Base StructureDefinition for List Resource */
  export class List {
    static url: string = "http://hl7.org/fhir/StructureDefinition/List";
    protected _content: { [key: string]: TElement } = {};

    /** If the list is empty, why the list is empty. */
    set emptyReason(value: CodeableConcept) {
      this._content["emptyReason"] = value;
    }

    get emptyReason(): CodeableConcept {
      return this._content["emptyReason"] as CodeableConcept;
    }

    /** Entries in this list. */
    set entry(value: Array<BackboneElement>) {
      this._content["entry"] = value;
    }

    get entry(): Array<BackboneElement> {
      return this._content["entry"] as Array<BackboneElement>;
    }

    /** Comments that apply to the overall list. */
    set note(value: String) {
      this._content["note"] = value;
    }

    get note(): String {
      return this._content["note"] as String;
    }

    /**
     * How this list was prepared - whether it is a working list that is
     * suitable for being maintained on an ongoing basis, or if it represents a
     * snapshot of a list of items from another source, or whether it is a
     * prepared list where items may be marked as added, modified or deleted.
     */
    set mode(value: Code) {
      this._content["mode"] = value;
    }

    get mode(): Code {
      return this._content["mode"] as Code;
    }

    /** What order applies to the items in the list. */
    set orderedBy(value: CodeableConcept) {
      this._content["orderedBy"] = value;
    }

    get orderedBy(): CodeableConcept {
      return this._content["orderedBy"] as CodeableConcept;
    }

    /** The date that the list was prepared. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Indicates the current state of this list. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The encounter that is the context in which this list was created. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The entity responsible for deciding what the contents of the list were.
     * Where the list was created by a human, this is the same as the author of
     * the list.
     */
    set source(value: Reference | Reference | Reference) {
      this._content["source"] = value;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * The common subject (or patient) of the resources that are in the list, if
     * there is one.
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /** This code defines the purpose of the list - why it was created. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A label for the list assigned by the author. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Identifier for the List assigned for business purposes outside the
     * context of FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A set of information summarized from a list of other resources. */
    set List(value: Array<DomainResource>) {
      this._content["List"] = value;
    }

    get List(): Array<DomainResource> {
      return this._content["List"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Location Resource */
  export class Location {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Location";
    protected _content: { [key: string]: TElement } = {};

    /** Another Location which this Location is physically part of. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /**
     * The organization responsible for the provisioning and upkeep of the
     * location.
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /**
     * The absolute geographic location of the Location, expressed using the
     * WGS84 datum (This is the same co-ordinate system used in KML).
     */
    set position(value: BackboneElement) {
      this._content["position"] = value;
    }

    get position(): BackboneElement {
      return this._content["position"] as BackboneElement;
    }

    /** Physical form of the location, e.g. building, room, vehicle, road. */
    set physicalType(value: CodeableConcept) {
      this._content["physicalType"] = value;
    }

    get physicalType(): CodeableConcept {
      return this._content["physicalType"] as CodeableConcept;
    }

    /** Physical location. */
    set address(value: Address) {
      this._content["address"] = value;
    }

    get address(): Address {
      return this._content["address"] as Address;
    }

    /**
     * The contact details of communication devices available at the location.
     * This can include phone numbers, fax numbers, mobile numbers, email
     * addresses and web sites.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** Indicates the type of function performed at the location. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Indicates whether a resource instance represents a specific location or a
     * class of locations.
     */
    set mode(value: Code) {
      this._content["mode"] = value;
    }

    get mode(): Code {
      return this._content["mode"] as Code;
    }

    /**
     * Description of the Location, which helps in finding or referencing the
     * place.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Name of the location as used by humans. Does not need to be unique. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Active | suspended | inactive. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Unique code or number identifying the location to its users. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Details and position information for a physical place where services are
     * provided and resources and participants may be stored, found, contained
     * or accommodated.
     */
    set Location(value: Array<DomainResource>) {
      this._content["Location"] = value;
    }

    get Location(): Array<DomainResource> {
      return this._content["Location"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Media Resource */
  export class Media {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Media";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The actual content of the media - inline or by direct reference to the
     * media source file.
     */
    set content(value: Attachment) {
      this._content["content"] = value;
    }

    get content(): Attachment {
      return this._content["content"] as Attachment;
    }

    /** The duration of the recording in seconds - for audio and video. */
    set duration(value: UnsignedInt) {
      this._content["duration"] = value;
    }

    get duration(): UnsignedInt {
      return this._content["duration"] as UnsignedInt;
    }

    /**
     * The number of frames in a photo. This is used with a multi-page fax, or
     * an imaging acquisition context that takes multiple slices in a single
     * image, or an animated gif. If there is more than one frame, this SHALL
     * have a value in order to alert interface software that a multi-frame
     * capable rendering widget is required.
     */
    set frames(value: PositiveInt) {
      this._content["frames"] = value;
    }

    get frames(): PositiveInt {
      return this._content["frames"] as PositiveInt;
    }

    /** Width of the image in pixels (photo/video). */
    set width(value: PositiveInt) {
      this._content["width"] = value;
    }

    get width(): PositiveInt {
      return this._content["width"] as PositiveInt;
    }

    /** Height of the image in pixels (photo/video). */
    set height(value: PositiveInt) {
      this._content["height"] = value;
    }

    get height(): PositiveInt {
      return this._content["height"] as PositiveInt;
    }

    /**
     * The name of the device / manufacturer of the device that was used to make
     * the recording.
     */
    set deviceName(value: String) {
      this._content["deviceName"] = value;
    }

    get deviceName(): String {
      return this._content["deviceName"] as String;
    }

    /** The name of the imaging view e.g. Lateral or Antero-posterior (AP). */
    set view(value: CodeableConcept) {
      this._content["view"] = value;
    }

    get view(): CodeableConcept {
      return this._content["view"] as CodeableConcept;
    }

    /** The person who administered the collection of the image. */
    set operator(value: Reference) {
      this._content["operator"] = value;
    }

    get operator(): Reference {
      return this._content["operator"] as Reference;
    }

    /** Who/What this Media is a record of. */
    set subject(
      value: Reference | Reference | Reference | Reference | Reference,
    ) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Identifiers associated with the image - these may include identifiers for
     * the image itself, identifiers for the context of its collection (e.g.
     * series ids) and context ids such as accession numbers or other workflow
     * identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Details of the type of the media - usually, how it was acquired (what
     * type of device). If images sourced from a DICOM system, are wrapped in a
     * Media resource, then this is the modality.
     */
    set subtype(value: CodeableConcept) {
      this._content["subtype"] = value;
    }

    get subtype(): CodeableConcept {
      return this._content["subtype"] as CodeableConcept;
    }

    /**
     * Whether the media is a photo (still image), an audio recording, or a
     * video recording.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * A photo, video, or audio recording acquired or used in healthcare. The
     * actual content may be inline or provided by direct reference.
     */
    set Media(value: Array<DomainResource>) {
      this._content["Media"] = value;
    }

    get Media(): Array<DomainResource> {
      return this._content["Media"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Medication Resource */
  export class Medication {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Medication";
    protected _content: { [key: string]: TElement } = {};

    /** Information that only applies to packages (not products). */
    set package(value: BackboneElement) {
      this._content["package"] = value;
    }

    get package(): BackboneElement {
      return this._content["package"] as BackboneElement;
    }

    /** Information that only applies to products (not packages). */
    set product(value: BackboneElement) {
      this._content["product"] = value;
    }

    get product(): BackboneElement {
      return this._content["product"] as BackboneElement;
    }

    /** Describes the details of the manufacturer. */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /** Set to true if the item is attributable to a specific manufacturer. */
    set isBrand(value: Boolean) {
      this._content["isBrand"] = value;
    }

    get isBrand(): Boolean {
      return this._content["isBrand"] as Boolean;
    }

    /**
     * A code (or set of codes) that specify this medication, or a textual
     * description if no code is available. Usage note: This could be a standard
     * medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could
     * also be a national or local formulary code, optionally with translations
     * to other code systems.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * This resource is primarily used for the identification and definition of
     * a medication. It covers the ingredients and the packaging for a
     * medication.
     */
    set Medication(value: Array<DomainResource>) {
      this._content["Medication"] = value;
    }

    get Medication(): Array<DomainResource> {
      return this._content["Medication"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for MedicationAdministration Resource */
  export class MedicationAdministration {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationAdministration";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Describes the medication dosage information details e.g. dose, rate,
     * site, route, etc.
     */
    set dosage(value: BackboneElement) {
      this._content["dosage"] = value;
    }

    get dosage(): BackboneElement {
      return this._content["dosage"] as BackboneElement;
    }

    /**
     * Extra information about the medication administration that is not
     * conveyed by the other attributes.
     */
    set note(value: String) {
      this._content["note"] = value;
    }

    get note(): String {
      return this._content["note"] as String;
    }

    /**
     * The device used in administering the medication to the patient. For
     * example, a particular infusion pump.
     */
    set device(value: Array<Reference>) {
      this._content["device"] = value;
    }

    get device(): Array<Reference> {
      return this._content["device"] as Array<Reference>;
    }

    /**
     * Identifies the medication that was administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * A specific date/time or interval of time during which the administration
     * took place (or did not take place, when the 'notGiven' attribute is
     * true). For many administrations, such as swallowing a tablet the use of
     * dateTime is more appropriate.
     */
    set effectiveTime(value: DateTime | Period) {
      this._content["effectiveTime"] = value;
    }

    get effectiveTimeDateTime(): DateTime {
      return this._content["effectiveTime"] as DateTime;
    }

    get effectiveTimePeriod(): Period {
      return this._content["effectiveTime"] as Period;
    }

    /** A code indicating why the medication was given. */
    set reasonGiven(value: Array<CodeableConcept>) {
      this._content["reasonGiven"] = value;
    }

    get reasonGiven(): Array<CodeableConcept> {
      return this._content["reasonGiven"] as Array<CodeableConcept>;
    }

    /** A code indicating why the administration was not performed. */
    set reasonNotGiven(value: Array<CodeableConcept>) {
      this._content["reasonNotGiven"] = value;
    }

    get reasonNotGiven(): Array<CodeableConcept> {
      return this._content["reasonNotGiven"] as Array<CodeableConcept>;
    }

    /**
     * Set this to true if the record is saying that the medication was NOT
     * administered.
     */
    set wasNotGiven(value: Boolean) {
      this._content["wasNotGiven"] = value;
    }

    get wasNotGiven(): Boolean {
      return this._content["wasNotGiven"] as Boolean;
    }

    /**
     * The original request, instruction or authority to perform the
     * administration.
     */
    set prescription(value: Reference) {
      this._content["prescription"] = value;
    }

    get prescription(): Reference {
      return this._content["prescription"] as Reference;
    }

    /**
     * The visit, admission or other contact between patient and health care
     * provider the medication administration was performed as part of.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The individual who was responsible for giving the medication to the
     * patient.
     */
    set practitioner(value: Reference | Reference | Reference) {
      this._content["practitioner"] = value;
    }

    get practitionerReference(): Reference {
      return this._content["practitioner"] as Reference;
    }

    get practitionerReference(): Reference {
      return this._content["practitioner"] as Reference;
    }

    get practitionerReference(): Reference {
      return this._content["practitioner"] as Reference;
    }

    /** The person or animal receiving the medication. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Will generally be set to show that the administration has been completed.
     * For some long running administrations such as infusions it is possible
     * for an administration to be started but not completed or it may be paused
     * while some other process is under way.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * External identifier - FHIR will generate its own internal identifiers
     * (probably URLs) which do not need to be explicitly managed by the
     * resource. The identifier here is one that would be used by another
     * non-FHIR system - for example an automated medication pump would provide
     * a record each time it operated; an administration while the patient was
     * off the ward might be made with a different system and entered after the
     * event. Particularly important if these records have to be updated.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Describes the event of a patient consuming or otherwise being
     * administered a medication. This may be as simple as swallowing a tablet
     * or it may be a long running infusion. Related resources tie this event to
     * the authorizing prescription, and the specific encounter between patient
     * and health care practitioner.
     */
    set MedicationAdministration(value: Array<DomainResource>) {
      this._content["MedicationAdministration"] = value;
    }

    get MedicationAdministration(): Array<DomainResource> {
      return this._content["MedicationAdministration"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for MedicationDispense Resource */
  export class MedicationDispense {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationDispense";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Indicates whether or not substitution was made as part of the dispense.
     * In some cases substitution will be expected but does not happen, in other
     * cases substitution is not expected but does happen. This block explains
     * what substitution did or did not happen and why.
     */
    set substitution(value: BackboneElement) {
      this._content["substitution"] = value;
    }

    get substitution(): BackboneElement {
      return this._content["substitution"] as BackboneElement;
    }

    /** Indicates how the medication is to be used by the patient. */
    set dosageInstruction(value: Array<BackboneElement>) {
      this._content["dosageInstruction"] = value;
    }

    get dosageInstruction(): Array<BackboneElement> {
      return this._content["dosageInstruction"] as Array<BackboneElement>;
    }

    /**
     * Extra information about the dispense that could not be conveyed in the
     * other attributes.
     */
    set note(value: String) {
      this._content["note"] = value;
    }

    get note(): String {
      return this._content["note"] as String;
    }

    /**
     * Identifies the person who picked up the medication. This will usually be
     * a patient or their caregiver, but some cases exist where it can be a
     * healthcare professional.
     */
    set receiver(value: Array<Reference> | Array<Reference>) {
      this._content["receiver"] = value;
    }

    get receiverArray<Reference>(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    get receiverArray<Reference>(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    /**
     * Identification of the facility/location where the medication was shipped
     * to, as part of the dispense event.
     */
    set destination(value: Reference) {
      this._content["destination"] = value;
    }

    get destination(): Reference {
      return this._content["destination"] as Reference;
    }

    /**
     * The time the dispensed product was provided to the patient or their
     * representative.
     */
    set whenHandedOver(value: DateTime) {
      this._content["whenHandedOver"] = value;
    }

    get whenHandedOver(): DateTime {
      return this._content["whenHandedOver"] as DateTime;
    }

    /** The time when the dispensed product was packaged and reviewed. */
    set whenPrepared(value: DateTime) {
      this._content["whenPrepared"] = value;
    }

    get whenPrepared(): DateTime {
      return this._content["whenPrepared"] as DateTime;
    }

    /**
     * Identifies the medication being administered. This is either a link to a
     * resource representing the details of the medication or a simple attribute
     * carrying a code that identifies the medication from a known list of
     * medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /** The amount of medication expressed as a timing amount. */
    set daysSupply(value: Quantity) {
      this._content["daysSupply"] = value;
    }

    get daysSupply(): Quantity {
      return this._content["daysSupply"] as Quantity;
    }

    /**
     * The amount of medication that has been dispensed. Includes unit of
     * measure.
     */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Indicates the type of dispensing event that is performed. For example,
     * Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples,
     * etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** Indicates the medication order that is being dispensed against. */
    set authorizingPrescription(value: Array<Reference>) {
      this._content["authorizingPrescription"] = value;
    }

    get authorizingPrescription(): Array<Reference> {
      return this._content["authorizingPrescription"] as Array<Reference>;
    }

    /** The individual responsible for dispensing the medication. */
    set dispenser(value: Reference) {
      this._content["dispenser"] = value;
    }

    get dispenser(): Reference {
      return this._content["dispenser"] as Reference;
    }

    /**
     * A link to a resource representing the person to whom the medication will
     * be given.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** A code specifying the state of the set of dispense events. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifier assigned by the dispensing facility - this is an identifier
     * assigned outside FHIR.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Indicates that a medication product is to be or has been dispensed for a
     * named person/patient. This includes a description of the medication
     * product (supply) provided and the instructions for administering the
     * medication. The medication dispense is the result of a pharmacy system
     * responding to a medication order.
     */
    set MedicationDispense(value: Array<DomainResource>) {
      this._content["MedicationDispense"] = value;
    }

    get MedicationDispense(): Array<DomainResource> {
      return this._content["MedicationDispense"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for MedicationOrder Resource */
  export class MedicationOrder {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationOrder";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A link to a resource representing an earlier order or prescription that
     * this order supersedes.
     */
    set priorPrescription(value: Reference) {
      this._content["priorPrescription"] = value;
    }

    get priorPrescription(): Reference {
      return this._content["priorPrescription"] as Reference;
    }

    /**
     * Indicates whether or not substitution can or should be part of the
     * dispense. In some cases substitution must happen, in other cases
     * substitution must not happen, and in others it does not matter. This
     * block explains the prescriber's intent. If nothing is specified
     * substitution may be done.
     */
    set substitution(value: BackboneElement) {
      this._content["substitution"] = value;
    }

    get substitution(): BackboneElement {
      return this._content["substitution"] as BackboneElement;
    }

    /**
     * Indicates the specific details for the dispense or medication supply part
     * of a medication order (also known as a Medication Prescription). Note
     * that this information is NOT always sent with the order. There may be in
     * some settings (e.g. hospitals) institutional or system support for
     * completing the dispense details in the pharmacy department.
     */
    set dispenseRequest(value: BackboneElement) {
      this._content["dispenseRequest"] = value;
    }

    get dispenseRequest(): BackboneElement {
      return this._content["dispenseRequest"] as BackboneElement;
    }

    /** Indicates how the medication is to be used by the patient. */
    set dosageInstruction(value: Array<BackboneElement>) {
      this._content["dosageInstruction"] = value;
    }

    get dosageInstruction(): Array<BackboneElement> {
      return this._content["dosageInstruction"] as Array<BackboneElement>;
    }

    /**
     * Identifies the medication being administered. This is a link to a
     * resource that represents the medication which may be the details of the
     * medication or simply an attribute carrying a code that identifies the
     * medication from a known list of medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * Extra information about the prescription that could not be conveyed by
     * the other attributes.
     */
    set note(value: String) {
      this._content["note"] = value;
    }

    get note(): String {
      return this._content["note"] as String;
    }

    /** Can be the reason or the indication for writing the prescription. */
    set reason(value: CodeableConcept | Reference) {
      this._content["reason"] = value;
    }

    get reasonCodeableConcept(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    get reasonReference(): Reference {
      return this._content["reason"] as Reference;
    }

    /**
     * A link to a resource that identifies the particular occurrence of contact
     * between patient and health care provider.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** The healthcare professional responsible for authorizing the prescription. */
    set prescriber(value: Reference) {
      this._content["prescriber"] = value;
    }

    get prescriber(): Reference {
      return this._content["prescriber"] as Reference;
    }

    /**
     * A link to a resource representing the person to whom the medication will
     * be given.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The reason why the prescription was stopped, if it was. */
    set reasonEnded(value: CodeableConcept) {
      this._content["reasonEnded"] = value;
    }

    get reasonEnded(): CodeableConcept {
      return this._content["reasonEnded"] as CodeableConcept;
    }

    /** The date (and perhaps time) when the prescription was stopped. */
    set dateEnded(value: DateTime) {
      this._content["dateEnded"] = value;
    }

    get dateEnded(): DateTime {
      return this._content["dateEnded"] as DateTime;
    }

    /**
     * A code specifying the state of the order. Generally this will be active
     * or completed state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The date (and perhaps time) when the prescription was written. */
    set dateWritten(value: DateTime) {
      this._content["dateWritten"] = value;
    }

    get dateWritten(): DateTime {
      return this._content["dateWritten"] as DateTime;
    }

    /**
     * External identifier - one that would be used by another non-FHIR system -
     * for example a re-imbursement system might issue its own id for each
     * prescription that is created. This is particularly important where FHIR
     * only provides part of an entire workflow process where records have to be
     * tracked through an entire system.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An order for both supply of the medication and the instructions for
     * administration of the medication to a patient. The resource is called
     * "MedicationOrder" rather than "MedicationPrescription" to generalize the
     * use across inpatient and outpatient settings as well as for care plans,
     * etc.
     */
    set MedicationOrder(value: Array<DomainResource>) {
      this._content["MedicationOrder"] = value;
    }

    get MedicationOrder(): Array<DomainResource> {
      return this._content["MedicationOrder"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for MedicationStatement Resource */
  export class MedicationStatement {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationStatement";
    protected _content: { [key: string]: TElement } = {};

    /** Indicates how the medication is/was used by the patient. */
    set dosage(value: Array<BackboneElement>) {
      this._content["dosage"] = value;
    }

    get dosage(): Array<BackboneElement> {
      return this._content["dosage"] as Array<BackboneElement>;
    }

    /**
     * Identifies the medication being administered. This is either a link to a
     * resource representing the details of the medication or a simple attribute
     * carrying a code that identifies the medication from a known list of
     * medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * Allows linking the MedicationStatement to the underlying MedicationOrder,
     * or to other information that supports the MedicationStatement.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    /**
     * Provides extra information about the medication statement that is not
     * conveyed by the other attributes.
     */
    set note(value: String) {
      this._content["note"] = value;
    }

    get note(): String {
      return this._content["note"] as String;
    }

    /**
     * The interval of time during which it is being asserted that the patient
     * was taking the medication (or was not taking, when the wasNotGiven
     * element is true).
     */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /** A reason for why the medication is being/was taken. */
    set reasonForUse(value: CodeableConcept | Reference) {
      this._content["reasonForUse"] = value;
    }

    get reasonForUseCodeableConcept(): CodeableConcept {
      return this._content["reasonForUse"] as CodeableConcept;
    }

    get reasonForUseReference(): Reference {
      return this._content["reasonForUse"] as Reference;
    }

    /** A code indicating why the medication was not taken. */
    set reasonNotTaken(value: Array<CodeableConcept>) {
      this._content["reasonNotTaken"] = value;
    }

    get reasonNotTaken(): Array<CodeableConcept> {
      return this._content["reasonNotTaken"] as Array<CodeableConcept>;
    }

    /**
     * Set this to true if the record is saying that the medication was NOT
     * taken.
     */
    set wasNotTaken(value: Boolean) {
      this._content["wasNotTaken"] = value;
    }

    get wasNotTaken(): Boolean {
      return this._content["wasNotTaken"] as Boolean;
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the medication used that this statement is about. Generally this
     * will be active or completed.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The date when the medication statement was asserted by the information
     * source.
     */
    set dateAsserted(value: DateTime) {
      this._content["dateAsserted"] = value;
    }

    get dateAsserted(): DateTime {
      return this._content["dateAsserted"] as DateTime;
    }

    /**
     * The person who provided the information about the taking of this
     * medication.
     */
    set informationSource(value: Reference | Reference | Reference) {
      this._content["informationSource"] = value;
    }

    get informationSourceReference(): Reference {
      return this._content["informationSource"] as Reference;
    }

    get informationSourceReference(): Reference {
      return this._content["informationSource"] as Reference;
    }

    get informationSourceReference(): Reference {
      return this._content["informationSource"] as Reference;
    }

    /** The person or animal who is/was taking the medication. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * External identifier - FHIR will generate its own internal identifiers
     * (probably URLs) which do not need to be explicitly managed by the
     * resource. The identifier here is one that would be used by another
     * non-FHIR system - for example an automated medication pump would provide
     * a record each time it operated; an administration while the patient was
     * off the ward might be made with a different system and entered after the
     * event. Particularly important if these records have to be updated.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A record of a medication that is being consumed by a patient. A
     * MedicationStatement may indicate that the patient may be taking the
     * medication now, or has taken the medication in the past or will be taking
     * the medication in the future. The source of this information can be the
     * patient, significant other (such as a family member or spouse), or a
     * clinician. A common scenario where this information is captured is during
     * the history taking process during a patient visit or stay. The medication
     * information may come from e.g. the patient's memory, from a prescription
     * bottle, or from a list of medications the patient, clinician or other
     * party maintains
     *
     * The primary difference between a medication statement and a medication
     * administration is that the medication administration has complete
     * administration information and is based on actual administration
     * information from the person who administered the medication. A medication
     * statement is often, if not always, less specific. There is no required
     * date/time when the medication was administered, in fact we only know that
     * a source has reported the patient is taking this medication, where
     * details such as time, quantity, or rate or even medication product may be
     * incomplete or missing or less precise. As stated earlier, the medication
     * statement information may come from the patient's memory, from a
     * prescription bottle or from a list of medications the patient, clinician
     * or other party maintains. Medication administration is more formal and is
     * not missing detailed information.
     */
    set MedicationStatement(value: Array<DomainResource>) {
      this._content["MedicationStatement"] = value;
    }

    get MedicationStatement(): Array<DomainResource> {
      return this._content["MedicationStatement"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for MessageHeader Resource */
  export class MessageHeader {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MessageHeader";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The actual data of the message - a reference to the root/focus class of
     * the event.
     */
    set data(value: Array<Reference>) {
      this._content["data"] = value;
    }

    get data(): Array<Reference> {
      return this._content["data"] as Array<Reference>;
    }

    /**
     * Coded indication of the cause for the event - indicates a reason for the
     * occurrence of the event that is a focus of this message.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * The person or organization that accepts overall responsibility for the
     * contents of the message. The implication is that the message event
     * happened under the policies of the responsible party.
     */
    set responsible(value: Reference | Reference) {
      this._content["responsible"] = value;
    }

    get responsibleReference(): Reference {
      return this._content["responsible"] as Reference;
    }

    get responsibleReference(): Reference {
      return this._content["responsible"] as Reference;
    }

    /**
     * Allows data conveyed by a message to be addressed to a particular person
     * or department when routing to a specific application isn't sufficient.
     */
    set receiver(value: Reference | Reference) {
      this._content["receiver"] = value;
    }

    get receiverReference(): Reference {
      return this._content["receiver"] as Reference;
    }

    get receiverReference(): Reference {
      return this._content["receiver"] as Reference;
    }

    /**
     * The logical author of the message - the person or device that decided the
     * described event should happen. Where there is more than one candidate,
     * pick the most proximal to the MessageHeader. Can provide other authors in
     * extensions.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * The person or device that performed the data entry leading to this
     * message. Where there is more than one candidate, pick the most proximal
     * to the message. Can provide other enterers in extensions.
     */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** The destination application which the message is intended for. */
    set destination(value: Array<BackboneElement>) {
      this._content["destination"] = value;
    }

    get destination(): Array<BackboneElement> {
      return this._content["destination"] as Array<BackboneElement>;
    }

    /** The source application from which this message originated. */
    set source(value: BackboneElement) {
      this._content["source"] = value;
    }

    get source(): BackboneElement {
      return this._content["source"] as BackboneElement;
    }

    /**
     * Information about the message that this message is a response to. Only
     * present if this message is a response.
     */
    set response(value: BackboneElement) {
      this._content["response"] = value;
    }

    get response(): BackboneElement {
      return this._content["response"] as BackboneElement;
    }

    /**
     * Code that identifies the event this message represents and connects it
     * with its definition. Events defined as part of the FHIR specification
     * have the system value "http://hl7.org/fhir/message-events".
     */
    set event(value: Coding) {
      this._content["event"] = value;
    }

    get event(): Coding {
      return this._content["event"] as Coding;
    }

    /** The time that the message was sent. */
    set timestamp(value: Instant) {
      this._content["timestamp"] = value;
    }

    get timestamp(): Instant {
      return this._content["timestamp"] as Instant;
    }

    /**
     * The header for a message exchange that is either requesting or responding
     * to an action. The reference(s) that are the subject of the action as well
     * as other information related to the action are typically transmitted in a
     * bundle in which the MessageHeader resource instance is the first resource
     * in the bundle.
     */
    set MessageHeader(value: Array<DomainResource>) {
      this._content["MessageHeader"] = value;
    }

    get MessageHeader(): Array<DomainResource> {
      return this._content["MessageHeader"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for NamingSystem Resource */
  export class NamingSystem {
    static url: string = "http://hl7.org/fhir/StructureDefinition/NamingSystem";
    protected _content: { [key: string]: TElement } = {};

    /**
     * For naming systems that are retired, indicates the naming system that
     * should be used in their place (if any).
     */
    set replacedBy(value: Reference) {
      this._content["replacedBy"] = value;
    }

    get replacedBy(): Reference {
      return this._content["replacedBy"] as Reference;
    }

    /**
     * Indicates how the system may be identified when referenced in electronic
     * exchange.
     */
    set uniqueId(value: Array<BackboneElement>) {
      this._content["uniqueId"] = value;
    }

    get uniqueId(): Array<BackboneElement> {
      return this._content["uniqueId"] as Array<BackboneElement>;
    }

    /**
     * Provides guidance on the use of the namespace, including the handling of
     * formatting characters, use of upper vs. lower case, etc.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of naming systems.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /**
     * Details about what the namespace identifies including scope, granularity,
     * version labeling, etc.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Categorizes a naming system for easier search by grouping related naming
     * systems.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The date (and optionally time) when the system was registered or
     * published. The date must change when the business version changes, if it
     * does, and it must change if the status code changes. In addition, it
     * should change when the substantive content of the registration changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * The name of the organization that is responsible for issuing identifiers
     * or codes for this namespace and ensuring their non-collision.
     */
    set responsible(value: String) {
      this._content["responsible"] = value;
    }

    get responsible(): String {
      return this._content["responsible"] as String;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the naming
     * system.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Indicates the purpose for the naming system - what kinds of things does
     * it make unique?
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** Indicates whether the naming system is "ready for use" or not. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The descriptive name of this particular identifier type or code system. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A curated namespace that issues unique symbols within that namespace for
     * the identification of concepts, people, devices, etc. Represents a
     * "System" used within the Identifier and Coding data types.
     */
    set NamingSystem(value: Array<DomainResource>) {
      this._content["NamingSystem"] = value;
    }

    get NamingSystem(): Array<DomainResource> {
      return this._content["NamingSystem"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for NutritionOrder Resource */
  export class NutritionOrder {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/NutritionOrder";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Feeding provided through the gastrointestinal tract via a tube, catheter,
     * or stoma that delivers nutrition distal to the oral cavity.
     */
    set enteralFormula(value: BackboneElement) {
      this._content["enteralFormula"] = value;
    }

    get enteralFormula(): BackboneElement {
      return this._content["enteralFormula"] as BackboneElement;
    }

    /**
     * Oral nutritional products given in order to add further nutritional value
     * to the patient's diet.
     */
    set supplement(value: Array<BackboneElement>) {
      this._content["supplement"] = value;
    }

    get supplement(): Array<BackboneElement> {
      return this._content["supplement"] as Array<BackboneElement>;
    }

    /** Diet given orally in contrast to enteral (tube) feeding. */
    set oralDiet(value: BackboneElement) {
      this._content["oralDiet"] = value;
    }

    get oralDiet(): BackboneElement {
      return this._content["oralDiet"] as BackboneElement;
    }

    /**
     * This modifier is used to convey order-specific modifiers about the type
     * of food that should NOT be given. These can be derived from patient
     * allergies, intolerances, or preferences such as No Red Meat, No Soy or No
     * Wheat or Gluten-Free. While it should not be necessary to repeat allergy
     * or intolerance information captured in the referenced allergyIntolerance
     * resource in the excludeFoodModifier, this element may be used to convey
     * additional specificity related to foods that should be eliminated from
     * the patient’s diet for any reason. This modifier applies to the entire
     * nutrition order inclusive of the oral diet, nutritional supplements and
     * enteral formula feedings.
     */
    set excludeFoodModifier(value: Array<CodeableConcept>) {
      this._content["excludeFoodModifier"] = value;
    }

    get excludeFoodModifier(): Array<CodeableConcept> {
      return this._content["excludeFoodModifier"] as Array<CodeableConcept>;
    }

    /**
     * This modifier is used to convey order-specific modifiers about the type
     * of food that should be given. These can be derived from patient
     * allergies, intolerances, or preferences such as Halal, Vegan or Kosher.
     * This modifier applies to the entire nutrition order inclusive of the oral
     * diet, nutritional supplements and enteral formula feedings.
     */
    set foodPreferenceModifier(value: Array<CodeableConcept>) {
      this._content["foodPreferenceModifier"] = value;
    }

    get foodPreferenceModifier(): Array<CodeableConcept> {
      return this._content["foodPreferenceModifier"] as Array<CodeableConcept>;
    }

    /**
     * A link to a record of allergies or intolerances which should be included
     * in the nutrition order.
     */
    set allergyIntolerance(value: Array<Reference>) {
      this._content["allergyIntolerance"] = value;
    }

    get allergyIntolerance(): Array<Reference> {
      return this._content["allergyIntolerance"] as Array<Reference>;
    }

    /** The workflow status of the nutrition order/request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The date and time that this nutrition order was requested. */
    set dateTime(value: DateTime) {
      this._content["dateTime"] = value;
    }

    get dateTime(): DateTime {
      return this._content["dateTime"] as DateTime;
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Identifiers assigned to this order by the order sender or by the order
     * receiver.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The practitioner that holds legal responsibility for ordering the diet,
     * nutritional supplement, or formula feedings.
     */
    set orderer(value: Reference) {
      this._content["orderer"] = value;
    }

    get orderer(): Reference {
      return this._content["orderer"] as Reference;
    }

    /**
     * The person (patient) who needs the nutrition order for an oral diet,
     * nutritional supplement and/or enteral or formula feeding.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral nutritional
     * supplement to a patient/resident.
     */
    set NutritionOrder(value: Array<DomainResource>) {
      this._content["NutritionOrder"] = value;
    }

    get NutritionOrder(): Array<DomainResource> {
      return this._content["NutritionOrder"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Observation Resource */
  export class Observation {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Observation";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Some observations have multiple component observations. These component
     * observations are expressed as separate code value pairs that share the
     * same attributes. Examples include systolic and diastolic component
     * observations for blood pressure measurement and multiple component
     * observations for genetics observations.
     */
    set component(value: Array<BackboneElement>) {
      this._content["component"] = value;
    }

    get component(): Array<BackboneElement> {
      return this._content["component"] as Array<BackboneElement>;
    }

    /**
     * A reference to another resource (usually another Observation but could
     * also be a QuestionnaireAnswer) whose relationship is defined by the
     * relationship type code.
     */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /**
     * Guidance on how to interpret the value by comparison to a normal or
     * recommended range.
     */
    set referenceRange(value: Array<BackboneElement>) {
      this._content["referenceRange"] = value;
    }

    get referenceRange(): Array<BackboneElement> {
      return this._content["referenceRange"] as Array<BackboneElement>;
    }

    /** The device used to generate the observation data. */
    set device(value: Reference | Reference) {
      this._content["device"] = value;
    }

    get deviceReference(): Reference {
      return this._content["device"] as Reference;
    }

    get deviceReference(): Reference {
      return this._content["device"] as Reference;
    }

    /** The specimen that was used when this observation was made. */
    set specimen(value: Reference) {
      this._content["specimen"] = value;
    }

    get specimen(): Reference {
      return this._content["specimen"] as Reference;
    }

    /** Indicates the mechanism used to perform the observation. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /**
     * Indicates the site on the subject's body where the observation was made
     * (i.e. the target site).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /**
     * May include statements about significant, unexpected or unreliable
     * values, or information about the source of the value where this may be
     * relevant to the interpretation of the result.
     */
    set comments(value: String) {
      this._content["comments"] = value;
    }

    get comments(): String {
      return this._content["comments"] as String;
    }

    /**
     * The assessment made based on the result of the observation. Intended as a
     * simple compact code often placed adjacent to the result value in reports
     * and flow sheets to signal the meaning/normalcy status of the result.
     * Otherwise known as abnormal flag.
     */
    set interpretation(value: CodeableConcept) {
      this._content["interpretation"] = value;
    }

    get interpretation(): CodeableConcept {
      return this._content["interpretation"] as CodeableConcept;
    }

    /**
     * Provides a reason why the expected value in the element
     * Observation.value[x] is missing.
     */
    set dataAbsentReason(value: CodeableConcept) {
      this._content["dataAbsentReason"] = value;
    }

    get dataAbsentReason(): CodeableConcept {
      return this._content["dataAbsentReason"] as CodeableConcept;
    }

    /**
     * The information determined as a result of making the observation, if the
     * information has a simple value.
     */
    set value(
      value:
        | Quantity
        | CodeableConcept
        | String
        | Range
        | Ratio
        | SampledData
        | Attachment
        | Time
        | DateTime
        | Period,
    ) {
      this._content["value"] = value;
    }

    get valueQuantity(): Quantity {
      return this._content["value"] as Quantity;
    }

    get valueCodeableConcept(): CodeableConcept {
      return this._content["value"] as CodeableConcept;
    }

    get valueString(): String {
      return this._content["value"] as String;
    }

    get valueRange(): Range {
      return this._content["value"] as Range;
    }

    get valueRatio(): Ratio {
      return this._content["value"] as Ratio;
    }

    get valueSampledData(): SampledData {
      return this._content["value"] as SampledData;
    }

    get valueAttachment(): Attachment {
      return this._content["value"] as Attachment;
    }

    get valueTime(): Time {
      return this._content["value"] as Time;
    }

    get valueDateTime(): DateTime {
      return this._content["value"] as DateTime;
    }

    get valuePeriod(): Period {
      return this._content["value"] as Period;
    }

    /** Who was responsible for asserting the observed value as "true". */
    set performer(
      value:
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>
        | Array<Reference>,
    ) {
      this._content["performer"] = value;
    }

    get performerArray<Reference>(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    get performerArray<Reference>(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    get performerArray<Reference>(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    get performerArray<Reference>(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    /**
     * The date and time this observation was made available to providers,
     * typically after the results have been reviewed and verified.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /**
     * The time or time-period the observed value is asserted as being true. For
     * biological subjects - e.g. human patients - this is usually called the
     * "physiologically relevant time". This is usually either the time of the
     * procedure or of specimen collection, but very often the source of the
     * date/time is not known, only the date/time itself.
     */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * during which this observation is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The patient, or group of patients, location, or device whose
     * characteristics (direct or indirect) are described by the observation and
     * into whose record the observation is placed. Comments: Indirect
     * characteristics may be those of a specimen, fetus, donor, other observer
     * (for example a relative or EMT), or any observation made about the
     * subject.
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Describes what was observed. Sometimes this is called the observation
     * "name".
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * A code that classifies the general type of observation being made. This
     * is used for searching, sorting and display purposes.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** The status of the result value. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A unique identifier for the simple observation instance. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Measurements and simple assertions made about a patient, device or other
     * subject.
     */
    set Observation(value: Array<DomainResource>) {
      this._content["Observation"] = value;
    }

    get Observation(): Array<DomainResource> {
      return this._content["Observation"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for OperationDefinition Resource */
  export class OperationDefinition {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OperationDefinition";
    protected _content: { [key: string]: TElement } = {};

    /** The parameters for the operation/query. */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }

    /**
     * Indicates whether this operation can be invoked on a particular instance
     * of one of the given types.
     */
    set instance(value: Boolean) {
      this._content["instance"] = value;
    }

    get instance(): Boolean {
      return this._content["instance"] as Boolean;
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * resource type level for any given resource type level (e.g. without
     * needing to choose a resource type for the context).
     */
    set type(value: Array<Code>) {
      this._content["type"] = value;
    }

    get type(): Array<Code> {
      return this._content["type"] as Array<Code>;
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * system level (e.g. without needing to choose a resource type for the
     * context).
     */
    set system(value: Boolean) {
      this._content["system"] = value;
    }

    get system(): Boolean {
      return this._content["system"] as Boolean;
    }

    /**
     * Indicates that this operation definition is a constraining profile on the
     * base.
     */
    set base(value: Reference) {
      this._content["base"] = value;
    }

    get base(): Reference {
      return this._content["base"] as Reference;
    }

    /** Additional information about how to use this operation or named query. */
    set notes(value: String) {
      this._content["notes"] = value;
    }

    get notes(): String {
      return this._content["notes"] as String;
    }

    /** The name used to invoke the operation. */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * Operations that are idempotent (see [HTTP specification definition of
     * idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may
     * be invoked by performing an HTTP GET operation instead of a POST.
     */
    set idempotent(value: Boolean) {
      this._content["idempotent"] = value;
    }

    get idempotent(): Boolean {
      return this._content["idempotent"] as Boolean;
    }

    /**
     * Explains why this operation definition is needed and why it's been
     * constrained as it has.
     */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /** A free text natural language description of the profile and its use. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The date this version of the operation definition was published. The date
     * must change when the business version changes, if it does, and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the Operation Definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the operation
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * This profile was authored for testing purposes (or
     * education/evaluation/marketing), and is not intended to be used for
     * genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** Whether this is an operation or a named query. */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** The status of the profile. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name identifying the operation. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the profile when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the profile author manually and the value
     * should be a timestamp.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * An absolute URL that is used to identify this operation definition when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this operation definition is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A formal computable definition of an operation (on the RESTful interface)
     * or a named query (using the search interaction).
     */
    set OperationDefinition(value: Array<DomainResource>) {
      this._content["OperationDefinition"] = value;
    }

    get OperationDefinition(): Array<DomainResource> {
      return this._content["OperationDefinition"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for OperationOutcome Resource */
  export class OperationOutcome {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OperationOutcome";
    protected _content: { [key: string]: TElement } = {};

    /**
     * An error, warning or information message that results from a system
     * action.
     */
    set issue(value: Array<BackboneElement>) {
      this._content["issue"] = value;
    }

    get issue(): Array<BackboneElement> {
      return this._content["issue"] as Array<BackboneElement>;
    }

    /**
     * A collection of error, warning or information messages that result from a
     * system action.
     */
    set OperationOutcome(value: Array<DomainResource>) {
      this._content["OperationOutcome"] = value;
    }

    get OperationOutcome(): Array<DomainResource> {
      return this._content["OperationOutcome"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Order Resource */
  export class Order {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Order";
    protected _content: { [key: string]: TElement } = {};

    /** What action is being ordered. */
    set detail(value: Array<Reference>) {
      this._content["detail"] = value;
    }

    get detail(): Array<Reference> {
      return this._content["detail"] as Array<Reference>;
    }

    /** When order should be fulfilled. */
    set when(value: BackboneElement) {
      this._content["when"] = value;
    }

    get when(): BackboneElement {
      return this._content["when"] as BackboneElement;
    }

    /** Text - why the order was made. */
    set reason(value: CodeableConcept | Reference) {
      this._content["reason"] = value;
    }

    get reasonCodeableConcept(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    get reasonReference(): Reference {
      return this._content["reason"] as Reference;
    }

    /** Who is intended to fulfill the order. */
    set target(value: Reference | Reference | Reference) {
      this._content["target"] = value;
    }

    get targetReference(): Reference {
      return this._content["target"] as Reference;
    }

    get targetReference(): Reference {
      return this._content["target"] as Reference;
    }

    get targetReference(): Reference {
      return this._content["target"] as Reference;
    }

    /** Who initiated the order. */
    set source(value: Reference | Reference) {
      this._content["source"] = value;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    /** Patient this order is about. */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /** When the order was made. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Identifiers assigned to this order by the orderer or by the receiver. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A request to perform an action. */
    set Order(value: Array<DomainResource>) {
      this._content["Order"] = value;
    }

    get Order(): Array<DomainResource> {
      return this._content["Order"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for OrderResponse Resource */
  export class OrderResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OrderResponse";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Links to resources that provide details of the outcome of performing the
     * order; e.g. Diagnostic Reports in a response that is made to an order
     * that referenced a diagnostic order.
     */
    set fulfillment(value: Array<Reference>) {
      this._content["fulfillment"] = value;
    }

    get fulfillment(): Array<Reference> {
      return this._content["fulfillment"] as Array<Reference>;
    }

    /**
     * Additional description about the response - e.g. a text description
     * provided by a human user when making decisions about the order.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** What this response says about the status of the original order. */
    set orderStatus(value: Code) {
      this._content["orderStatus"] = value;
    }

    get orderStatus(): Code {
      return this._content["orderStatus"] as Code;
    }

    /** The person, organization, or device credited with making the response. */
    set who(value: Reference | Reference | Reference) {
      this._content["who"] = value;
    }

    get whoReference(): Reference {
      return this._content["who"] as Reference;
    }

    get whoReference(): Reference {
      return this._content["who"] as Reference;
    }

    get whoReference(): Reference {
      return this._content["who"] as Reference;
    }

    /** The date and time at which this order response was made (created/posted). */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** A reference to the order that this is in response to. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * Identifiers assigned to this order. The identifiers are usually assigned
     * by the system responding to the order, but they may be provided or added
     * to by other systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A response to an order. */
    set OrderResponse(value: Array<DomainResource>) {
      this._content["OrderResponse"] = value;
    }

    get OrderResponse(): Array<DomainResource> {
      return this._content["OrderResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Organization Resource */
  export class Organization {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Organization";
    protected _content: { [key: string]: TElement } = {};

    /** Contact for the organization for a certain purpose. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /** The organization of which this organization forms a part. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** An address for the organization. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** A contact detail for the organization. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** A name associated with the organization. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The kind of organization that this is. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** Whether the organization's record is still in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Identifier for the organization that is used to identify the organization
     * across multiple disparate systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A formally or informally recognized grouping of people or organizations
     * formed for the purpose of achieving some form of collective action.
     * Includes companies, institutions, corporations, departments, community
     * groups, healthcare practice groups, etc.
     */
    set Organization(value: Array<DomainResource>) {
      this._content["Organization"] = value;
    }

    get Organization(): Array<DomainResource> {
      return this._content["Organization"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Patient Resource */
  export class Patient {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Patient";
    protected _content: { [key: string]: TElement } = {};

    /** Link to another patient resource that concerns the same actual patient. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** Organization that is the custodian of the patient record. */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** Patient's nominated care provider. */
    set careProvider(value: Array<Reference> | Array<Reference>) {
      this._content["careProvider"] = value;
    }

    get careProviderArray<Reference>(): Array<Reference> {
      return this._content["careProvider"] as Array<Reference>;
    }

    get careProviderArray<Reference>(): Array<Reference> {
      return this._content["careProvider"] as Array<Reference>;
    }

    /**
     * Languages which may be used to communicate with the patient about his or
     * her health.
     */
    set communication(value: Array<BackboneElement>) {
      this._content["communication"] = value;
    }

    get communication(): Array<BackboneElement> {
      return this._content["communication"] as Array<BackboneElement>;
    }

    /** This patient is known to be an animal. */
    set animal(value: BackboneElement) {
      this._content["animal"] = value;
    }

    get animal(): BackboneElement {
      return this._content["animal"] as BackboneElement;
    }

    /** A contact party (e.g. guardian, partner, friend) for the patient. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /** Image of the patient. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /**
     * Indicates whether the patient is part of a multiple or indicates the
     * actual birth order.
     */
    set multipleBirth(value: Boolean | Integer) {
      this._content["multipleBirth"] = value;
    }

    get multipleBirthBoolean(): Boolean {
      return this._content["multipleBirth"] as Boolean;
    }

    get multipleBirthInteger(): Integer {
      return this._content["multipleBirth"] as Integer;
    }

    /** This field contains a patient's most recent marital (civil) status. */
    set maritalStatus(value: CodeableConcept) {
      this._content["maritalStatus"] = value;
    }

    get maritalStatus(): CodeableConcept {
      return this._content["maritalStatus"] as CodeableConcept;
    }

    /** Addresses for the individual. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** Indicates if the individual is deceased or not. */
    set deceased(value: Boolean | DateTime) {
      this._content["deceased"] = value;
    }

    get deceasedBoolean(): Boolean {
      return this._content["deceased"] as Boolean;
    }

    get deceasedDateTime(): DateTime {
      return this._content["deceased"] as DateTime;
    }

    /** The date of birth for the individual. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * Administrative Gender - the gender that the patient is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /**
     * A contact detail (e.g. a telephone number or an email address) by which
     * the individual may be contacted.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** A name associated with the individual. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** Whether this patient record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** An identifier for this patient. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Demographics and other administrative information about an individual or
     * animal receiving care or other health-related services.
     */
    set Patient(value: Array<DomainResource>) {
      this._content["Patient"] = value;
    }

    get Patient(): Array<DomainResource> {
      return this._content["Patient"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for PaymentNotice Resource */
  export class PaymentNotice {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PaymentNotice";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The payment status, typically paid: payment sent, cleared: payment
     * received.
     */
    set paymentStatus(value: Coding) {
      this._content["paymentStatus"] = value;
    }

    get paymentStatus(): Coding {
      return this._content["paymentStatus"] as Coding;
    }

    /** Reference of response to resource to reverse. */
    set response(value: Reference) {
      this._content["response"] = value;
    }

    get response(): Reference {
      return this._content["response"] as Reference;
    }

    /** Reference of resource to reverse. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The Insurer who is target of the request. */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides the status of the payment for goods and services
     * rendered, and the request and response resource references.
     */
    set PaymentNotice(value: Array<DomainResource>) {
      this._content["PaymentNotice"] = value;
    }

    get PaymentNotice(): Array<DomainResource> {
      return this._content["PaymentNotice"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for PaymentReconciliation Resource */
  export class PaymentReconciliation {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation";
    protected _content: { [key: string]: TElement } = {};

    /** Suite of notes. */
    set note(value: Array<BackboneElement>) {
      this._content["note"] = value;
    }

    get note(): Array<BackboneElement> {
      return this._content["note"] as Array<BackboneElement>;
    }

    /** Total payment amount. */
    set total(value: Quantity) {
      this._content["total"] = value;
    }

    get total(): Quantity {
      return this._content["total"] as Quantity;
    }

    /** The form to be used for printing the content. */
    set form(value: Coding) {
      this._content["form"] = value;
    }

    get form(): Coding {
      return this._content["form"] as Coding;
    }

    /** List of individual settlement amounts and the corresponding transaction. */
    set detail(value: Array<BackboneElement>) {
      this._content["detail"] = value;
    }

    get detail(): Array<BackboneElement> {
      return this._content["detail"] as Array<BackboneElement>;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The period of time for which payments have been gathered into this bulk
     * payment for settlement.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Transaction status: error, complete. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides payment details and claim references supporting a
     * bulk payment.
     */
    set PaymentReconciliation(value: Array<DomainResource>) {
      this._content["PaymentReconciliation"] = value;
    }

    get PaymentReconciliation(): Array<DomainResource> {
      return this._content["PaymentReconciliation"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Person Resource */
  export class Person {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Person";
    protected _content: { [key: string]: TElement } = {};

    /** Link to a resource that concerns the same actual person. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** Whether this person's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** The organization that is the custodian of the person record. */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /**
     * An image that can be displayed as a thumbnail of the person to enhance
     * the identification of the individual.
     */
    set photo(value: Attachment) {
      this._content["photo"] = value;
    }

    get photo(): Attachment {
      return this._content["photo"] as Attachment;
    }

    /** One or more addresses for the person. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The birth date for the person. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /** Administrative Gender. */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** A name associated with the person. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** Identifier for a person within a particular scope. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Demographics and administrative information about a person independent of
     * a specific health-related context.
     */
    set Person(value: Array<DomainResource>) {
      this._content["Person"] = value;
    }

    get Person(): Array<DomainResource> {
      return this._content["Person"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Practitioner Resource */
  export class Practitioner {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Practitioner";
    protected _content: { [key: string]: TElement } = {};

    /** A language the practitioner is able to use in patient communication. */
    set communication(value: Array<CodeableConcept>) {
      this._content["communication"] = value;
    }

    get communication(): Array<CodeableConcept> {
      return this._content["communication"] as Array<CodeableConcept>;
    }

    /** Qualifications obtained by training and certification. */
    set qualification(value: Array<BackboneElement>) {
      this._content["qualification"] = value;
    }

    get qualification(): Array<BackboneElement> {
      return this._content["qualification"] as Array<BackboneElement>;
    }

    /** The list of roles/organizations that the practitioner is associated with. */
    set practitionerRole(value: Array<BackboneElement>) {
      this._content["practitionerRole"] = value;
    }

    get practitionerRole(): Array<BackboneElement> {
      return this._content["practitionerRole"] as Array<BackboneElement>;
    }

    /** Image of the person. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /** The date of birth for the practitioner. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * Administrative Gender - the gender that the person is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /**
     * The postal address where the practitioner can be found or visited or to
     * which mail can be delivered.
     */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /**
     * A contact detail for the practitioner, e.g. a telephone number or an
     * email address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** A name associated with the person. */
    set name(value: HumanName) {
      this._content["name"] = value;
    }

    get name(): HumanName {
      return this._content["name"] as HumanName;
    }

    /** Whether this practitioner's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** An identifier that applies to this person in this role. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A person who is directly or indirectly involved in the provisioning of
     * healthcare.
     */
    set Practitioner(value: Array<DomainResource>) {
      this._content["Practitioner"] = value;
    }

    get Practitioner(): Array<DomainResource> {
      return this._content["Practitioner"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Procedure Resource */
  export class Procedure {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Procedure";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Identifies medications, devices and any other substance used as part of
     * the procedure.
     */
    set used(value: Array<Reference> | Array<Reference> | Array<Reference>) {
      this._content["used"] = value;
    }

    get usedArray<Reference>(): Array<Reference> {
      return this._content["used"] as Array<Reference>;
    }

    get usedArray<Reference>(): Array<Reference> {
      return this._content["used"] as Array<Reference>;
    }

    get usedArray<Reference>(): Array<Reference> {
      return this._content["used"] as Array<Reference>;
    }

    /**
     * A device that is implanted, removed or otherwise manipulated
     * (calibration, battery replacement, fitting a prosthesis, attaching a
     * wound-vac, etc.) as a focal portion of the Procedure.
     */
    set focalDevice(value: Array<BackboneElement>) {
      this._content["focalDevice"] = value;
    }

    get focalDevice(): Array<BackboneElement> {
      return this._content["focalDevice"] as Array<BackboneElement>;
    }

    /** Any other notes about the procedure. E.g. the operative notes. */
    set notes(value: Array<Annotation>) {
      this._content["notes"] = value;
    }

    get notes(): Array<Annotation> {
      return this._content["notes"] as Array<Annotation>;
    }

    /**
     * A reference to a resource that contains details of the request for this
     * procedure.
     */
    set request(value: Reference | Reference | Reference | Reference) {
      this._content["request"] = value;
    }

    get requestReference(): Reference {
      return this._content["request"] as Reference;
    }

    get requestReference(): Reference {
      return this._content["request"] as Reference;
    }

    get requestReference(): Reference {
      return this._content["request"] as Reference;
    }

    get requestReference(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * If the procedure required specific follow up - e.g. removal of sutures.
     * The followup may be represented as a simple note, or could potentially be
     * more complex in which case the CarePlan resource can be used.
     */
    set followUp(value: Array<CodeableConcept>) {
      this._content["followUp"] = value;
    }

    get followUp(): Array<CodeableConcept> {
      return this._content["followUp"] as Array<CodeableConcept>;
    }

    /**
     * Any complications that occurred during the procedure, or in the immediate
     * post-performance period. These are generally tracked separately from the
     * notes, which will typically describe the procedure itself rather than any
     * 'post procedure' issues.
     */
    set complication(value: Array<CodeableConcept>) {
      this._content["complication"] = value;
    }

    get complication(): Array<CodeableConcept> {
      return this._content["complication"] as Array<CodeableConcept>;
    }

    /**
     * This could be a histology result, pathology report, surgical report,
     * etc..
     */
    set report(value: Array<Reference>) {
      this._content["report"] = value;
    }

    get report(): Array<Reference> {
      return this._content["report"] as Array<Reference>;
    }

    /**
     * The outcome of the procedure - did it resolve reasons for the procedure
     * being performed?
     */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /**
     * The location where the procedure actually happened. E.g. a newborn at
     * home, a tracheostomy at a restaurant.
     */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** The encounter during which the procedure was performed. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The date(time)/period over which the procedure was performed. Allows a
     * period to support complex procedures that span more than one date, and
     * also allows for the length of the procedure to be captured.
     */
    set performed(value: DateTime | Period) {
      this._content["performed"] = value;
    }

    get performedDateTime(): DateTime {
      return this._content["performed"] as DateTime;
    }

    get performedPeriod(): Period {
      return this._content["performed"] as Period;
    }

    /** Limited to 'real' people rather than equipment. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * The reason why the procedure was performed. This may be due to a
     * Condition, may be coded entity of some type, or may simply be present as
     * text.
     */
    set reason(value: CodeableConcept | Reference) {
      this._content["reason"] = value;
    }

    get reasonCodeableConcept(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    get reasonReference(): Reference {
      return this._content["reason"] as Reference;
    }

    /**
     * Detailed and structured anatomical location information. Multiple
     * locations are allowed - e.g. multiple punch biopsies of a lesion.
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /** A code indicating why the procedure was not performed. */
    set reasonNotPerformed(value: Array<CodeableConcept>) {
      this._content["reasonNotPerformed"] = value;
    }

    get reasonNotPerformed(): Array<CodeableConcept> {
      return this._content["reasonNotPerformed"] as Array<CodeableConcept>;
    }

    /**
     * Set this to true if the record is saying that the procedure was NOT
     * performed.
     */
    set notPerformed(value: Boolean) {
      this._content["notPerformed"] = value;
    }

    get notPerformed(): Boolean {
      return this._content["notPerformed"] as Boolean;
    }

    /**
     * The specific procedure that is performed. Use text if the exact nature of
     * the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * A code that classifies the procedure for searching, sorting and display
     * purposes (e.g. "Surgical Procedure").
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * A code specifying the state of the procedure. Generally this will be
     * in-progress or completed state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The person, animal or group on which the procedure was performed. */
    set subject(value: Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * This records identifiers associated with this procedure that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An action that is or was performed on a patient. This can be a physical
     * intervention like an operation, or less invasive like counseling or
     * hypnotherapy.
     */
    set Procedure(value: Array<DomainResource>) {
      this._content["Procedure"] = value;
    }

    get Procedure(): Array<DomainResource> {
      return this._content["Procedure"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ProcedureRequest Resource */
  export class ProcedureRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProcedureRequest";
    protected _content: { [key: string]: TElement } = {};

    /** The clinical priority associated with this order. */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * The healthcare professional responsible for proposing or ordering the
     * procedure.
     */
    set orderer(value: Reference | Reference | Reference | Reference) {
      this._content["orderer"] = value;
    }

    get ordererReference(): Reference {
      return this._content["orderer"] as Reference;
    }

    get ordererReference(): Reference {
      return this._content["orderer"] as Reference;
    }

    get ordererReference(): Reference {
      return this._content["orderer"] as Reference;
    }

    get ordererReference(): Reference {
      return this._content["orderer"] as Reference;
    }

    /** The time when the request was made. */
    set orderedOn(value: DateTime) {
      this._content["orderedOn"] = value;
    }

    get orderedOn(): DateTime {
      return this._content["orderedOn"] as DateTime;
    }

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for
     * performing the procedure.
     */
    set asNeeded(value: Boolean | CodeableConcept) {
      this._content["asNeeded"] = value;
    }

    get asNeededBoolean(): Boolean {
      return this._content["asNeeded"] as Boolean;
    }

    get asNeededCodeableConcept(): CodeableConcept {
      return this._content["asNeeded"] as CodeableConcept;
    }

    /**
     * Any other notes associated with this proposal or order - e.g. provider
     * instructions.
     */
    set notes(value: Array<Annotation>) {
      this._content["notes"] = value;
    }

    get notes(): Array<Annotation> {
      return this._content["notes"] as Array<Annotation>;
    }

    /** The status of the order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** For example, the surgeon, anaethetist, endoscopist, etc. */
    set performer(value: Reference | Reference | Reference | Reference) {
      this._content["performer"] = value;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    /** The encounter within which the procedure proposal or request was created. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The timing schedule for the proposed or ordered procedure. The Schedule
     * data type allows many different expressions. E.g. "Every 8 hours"; "Three
     * times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec
     * 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    set scheduled(value: DateTime | Period | Timing) {
      this._content["scheduled"] = value;
    }

    get scheduledDateTime(): DateTime {
      return this._content["scheduled"] as DateTime;
    }

    get scheduledPeriod(): Period {
      return this._content["scheduled"] as Period;
    }

    get scheduledTiming(): Timing {
      return this._content["scheduled"] as Timing;
    }

    /**
     * The reason why the procedure is being proposed or ordered. This procedure
     * request may be motivated by a Condition for instance.
     */
    set reason(value: CodeableConcept | Reference) {
      this._content["reason"] = value;
    }

    get reasonCodeableConcept(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    get reasonReference(): Reference {
      return this._content["reason"] as Reference;
    }

    /**
     * Indicates the sites on the subject's body where the procedure should be
     * performed (I.e. the target sites).
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * The specific procedure that is ordered. Use text if the exact nature of
     * the procedure cannot be coded.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** The person, animal or group that should receive the procedure. */
    set subject(value: Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Identifiers assigned to this order by the order or by the receiver. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A request for a procedure to be performed. May be a proposal or an order. */
    set ProcedureRequest(value: Array<DomainResource>) {
      this._content["ProcedureRequest"] = value;
    }

    get ProcedureRequest(): Array<DomainResource> {
      return this._content["ProcedureRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ProcessRequest Resource */
  export class ProcessRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProcessRequest";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A period of time during which the fulfilling resources would have been
     * created.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Names of resource types to exclude. */
    set exclude(value: Array<String>) {
      this._content["exclude"] = value;
    }

    get exclude(): Array<String> {
      return this._content["exclude"] as Array<String>;
    }

    /** Names of resource types to include. */
    set include(value: Array<String>) {
      this._content["include"] = value;
    }

    get include(): Array<String> {
      return this._content["include"] as Array<String>;
    }

    /**
     * List of top level items to be re-adjudicated, if none specified then the
     * entire submission is re-adjudicated.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /** A reference to supply which authenticates the process. */
    set reference(value: String) {
      this._content["reference"] = value;
    }

    get reference(): String {
      return this._content["reference"] as String;
    }

    /** If true remove all history excluding audit. */
    set nullify(value: Boolean) {
      this._content["nullify"] = value;
    }

    get nullify(): Boolean {
      return this._content["nullify"] as Boolean;
    }

    /**
     * Reference of a prior response to resource which is the target or subject
     * of this action.
     */
    set response(value: Reference) {
      this._content["response"] = value;
    }

    get response(): Reference {
      return this._content["response"] as Reference;
    }

    /** Reference of resource which is the target or subject of this action. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the action speccified in thise
     * request.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the action specified in thise
     * request.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The organization which is the target of the request. */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** The ProcessRequest business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The type of processing action being requested, for example Reversal,
     * Readjudication, StatusRequest,PendedRequest.
     */
    set action(value: Code) {
      this._content["action"] = value;
    }

    get action(): Code {
      return this._content["action"] as Code;
    }

    /**
     * This resource provides the target, request and response, and action
     * details for an action to be performed by the target on or about existing
     * resources.
     */
    set ProcessRequest(value: Array<DomainResource>) {
      this._content["ProcessRequest"] = value;
    }

    get ProcessRequest(): Array<DomainResource> {
      return this._content["ProcessRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ProcessResponse Resource */
  export class ProcessResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProcessResponse";
    protected _content: { [key: string]: TElement } = {};

    /** Processing errors. */
    set error(value: Array<Coding>) {
      this._content["error"] = value;
    }

    get error(): Array<Coding> {
      return this._content["error"] as Array<Coding>;
    }

    /**
     * Suite of processing note or additional requirements is the processing has
     * been held.
     */
    set notes(value: Array<BackboneElement>) {
      this._content["notes"] = value;
    }

    get notes(): Array<BackboneElement> {
      return this._content["notes"] as Array<BackboneElement>;
    }

    /** The form to be used for printing the content. */
    set form(value: Coding) {
      this._content["form"] = value;
    }

    get form(): Coding {
      return this._content["form"] as Coding;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The organization who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The style (standard) and version of the original material which was
     * converted into this resource.
     */
    set originalRuleset(value: Coding) {
      this._content["originalRuleset"] = value;
    }

    get originalRuleset(): Coding {
      return this._content["originalRuleset"] as Coding;
    }

    /**
     * The version of the style of resource contents. This should be mapped to
     * the allowable profiles for this and supporting resources.
     */
    set ruleset(value: Coding) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Coding {
      return this._content["ruleset"] as Coding;
    }

    /** A description of the status of the adjudication or processing. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Transaction status: error, complete, held. */
    set outcome(value: Coding) {
      this._content["outcome"] = value;
    }

    get outcome(): Coding {
      return this._content["outcome"] as Coding;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This resource provides processing status, errors and notes from the
     * processing of a resource.
     */
    set ProcessResponse(value: Array<DomainResource>) {
      this._content["ProcessResponse"] = value;
    }

    get ProcessResponse(): Array<DomainResource> {
      return this._content["ProcessResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Provenance Resource */
  export class Provenance {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Provenance";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A digital signature on the target Reference(s). The signer should match a
     * Provenance.agent. The purpose of the signature is indicated.
     */
    set signature(value: Array<Signature>) {
      this._content["signature"] = value;
    }

    get signature(): Array<Signature> {
      return this._content["signature"] as Array<Signature>;
    }

    /** An entity used in this activity. */
    set entity(value: Array<BackboneElement>) {
      this._content["entity"] = value;
    }

    get entity(): Array<BackboneElement> {
      return this._content["entity"] as Array<BackboneElement>;
    }

    /**
     * An agent takes a role in an activity such that the agent can be assigned
     * some degree of responsibility for the activity taking place. An agent can
     * be a person, an organization, software, or other entities that may be
     * ascribed responsibility.
     */
    set agent(value: Array<BackboneElement>) {
      this._content["agent"] = value;
    }

    get agent(): Array<BackboneElement> {
      return this._content["agent"] as Array<BackboneElement>;
    }

    /**
     * Policy or plan the activity was defined by. Typically, a single activity
     * may have multiple applicable policy documents, such as patient consent,
     * guarantor funding, etc.
     */
    set policy(value: Array<Uri>) {
      this._content["policy"] = value;
    }

    get policy(): Array<Uri> {
      return this._content["policy"] as Array<Uri>;
    }

    /** Where the activity occurred, if relevant. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * An activity is something that occurs over a period of time and acts upon
     * or with entities; it may include consuming, processing, transforming,
     * modifying, relocating, using, or generating entities.
     */
    set activity(value: CodeableConcept) {
      this._content["activity"] = value;
    }

    get activity(): CodeableConcept {
      return this._content["activity"] as CodeableConcept;
    }

    /** The reason that the activity was taking place. */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /** The instant of time at which the activity was recorded. */
    set recorded(value: Instant) {
      this._content["recorded"] = value;
    }

    get recorded(): Instant {
      return this._content["recorded"] as Instant;
    }

    /** The period during which the activity occurred. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * The Reference(s) that were generated or updated by the activity described
     * in this resource. A provenance can point to more than one target if
     * multiple resources were created/updated by the same activity.
     */
    set target(value: Array<Reference>) {
      this._content["target"] = value;
    }

    get target(): Array<Reference> {
      return this._content["target"] as Array<Reference>;
    }

    /**
     * Provenance of a resource is a record that describes entities and
     * processes involved in producing and delivering or otherwise influencing
     * that resource. Provenance provides a critical foundation for assessing
     * authenticity, enabling trust, and allowing reproducibility. Provenance
     * assertions are a form of contextual metadata and can themselves become
     * important records with their own provenance. Provenance statement
     * indicates clinical significance in terms of confidence in authenticity,
     * reliability, and trustworthiness, integrity, and stage in lifecycle (e.g.
     * Document Completion - has the artifact been legally authenticated), all
     * of which may impact security, privacy, and trust policies.
     */
    set Provenance(value: Array<DomainResource>) {
      this._content["Provenance"] = value;
    }

    get Provenance(): Array<DomainResource> {
      return this._content["Provenance"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Questionnaire Resource */
  export class Questionnaire {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/Questionnaire";
    protected _content: { [key: string]: TElement } = {};

    /** A collection of related questions (or further groupings of questions). */
    set group(value: BackboneElement) {
      this._content["group"] = value;
    }

    get group(): BackboneElement {
      return this._content["group"] as BackboneElement;
    }

    /**
     * Identifies the types of subjects that can be the subject of the
     * questionnaire.
     */
    set subjectType(value: Array<Code>) {
      this._content["subjectType"] = value;
    }

    get subjectType(): Array<Code> {
      return this._content["subjectType"] as Array<Code>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /**
     * Organization or person responsible for developing and maintaining the
     * questionnaire.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /** The date that this questionnaire was last changed. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** The lifecycle status of the questionnaire as a whole. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The version number assigned by the publisher for business reasons. It may
     * remain the same when the resource is updated.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * This records identifiers associated with this question set that are
     * defined by business processes and/or used to refer to it when a direct
     * URL reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A structured set of questions intended to guide the collection of
     * answers. The questions are ordered and grouped into coherent subsets,
     * corresponding to the structure of the grouping of the underlying
     * questions.
     */
    set Questionnaire(value: Array<DomainResource>) {
      this._content["Questionnaire"] = value;
    }

    get Questionnaire(): Array<DomainResource> {
      return this._content["Questionnaire"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for QuestionnaireResponse Resource */
  export class QuestionnaireResponse {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A group of questions to a possibly similarly grouped set of questions in
     * the questionnaire response.
     */
    set group(value: BackboneElement) {
      this._content["group"] = value;
    }

    get group(): BackboneElement {
      return this._content["group"] as BackboneElement;
    }

    /**
     * Encounter during which this set of questionnaire response were collected.
     * When there were multiple encounters, this is the one considered most
     * relevant to the context of the answers.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** The person who answered the questions about the subject. */
    set source(value: Reference | Reference | Reference) {
      this._content["source"] = value;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * The date and/or time that this version of the questionnaire response was
     * authored.
     */
    set authored(value: DateTime) {
      this._content["authored"] = value;
    }

    get authored(): DateTime {
      return this._content["authored"] as DateTime;
    }

    /**
     * Person who received the answers to the questions in the
     * QuestionnaireResponse and recorded them in the system.
     */
    set author(value: Reference | Reference | Reference | Reference) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * The subject of the questionnaire response. This could be a patient,
     * organization, practitioner, device, etc. This is who/what the answers
     * apply to, but is not necessarily the source of information.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The lifecycle status of the questionnaire response as a whole. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Indicates the Questionnaire resource that defines the form for which
     * answers are being provided.
     */
    set questionnaire(value: Reference) {
      this._content["questionnaire"] = value;
    }

    get questionnaire(): Reference {
      return this._content["questionnaire"] as Reference;
    }

    /**
     * A business identifier assigned to a particular completed (or partially
     * completed) questionnaire.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A structured set of questions and their answers. The questions are
     * ordered and grouped into coherent subsets, corresponding to the structure
     * of the grouping of the underlying questions.
     */
    set QuestionnaireResponse(value: Array<DomainResource>) {
      this._content["QuestionnaireResponse"] = value;
    }

    get QuestionnaireResponse(): Array<DomainResource> {
      return this._content["QuestionnaireResponse"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for ReferralRequest Resource */
  export class ReferralRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ReferralRequest";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The period of time within which the services identified in the
     * referral/transfer of care is specified or required to occur.
     */
    set fulfillmentTime(value: Period) {
      this._content["fulfillmentTime"] = value;
    }

    get fulfillmentTime(): Period {
      return this._content["fulfillmentTime"] as Period;
    }

    /**
     * Any additional (administrative, financial or clinical) information
     * required to support request for referral or transfer of care. For
     * example: Presenting problems/chief complaints Medical History Family
     * History Alerts Allergy/Intolerance and Adverse Reactions Medications
     * Observations/Assessments (may include cognitive and fundtional
     * assessments) Diagnostic Reports Care Plan.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    /**
     * The service(s) that is/are requested to be provided to the patient. For
     * example: cardiac pacemaker insertion.
     */
    set serviceRequested(value: Array<CodeableConcept>) {
      this._content["serviceRequested"] = value;
    }

    get serviceRequested(): Array<CodeableConcept> {
      return this._content["serviceRequested"] as Array<CodeableConcept>;
    }

    /**
     * The reason element gives a short description of why the referral is being
     * made, the description expands on this to support a more complete clinical
     * summary.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Description of clinical condition indicating why referral/transfer of
     * care is requested. For example: Pathological Anomalies, Disabled
     * (physical or mental), Behavioral Management.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * Date/DateTime the request for referral or transfer of care is sent by the
     * author.
     */
    set dateSent(value: DateTime) {
      this._content["dateSent"] = value;
    }

    get dateSent(): DateTime {
      return this._content["dateSent"] as DateTime;
    }

    /**
     * The encounter at which the request for referral or transfer of care is
     * initiated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The healthcare provider(s) or provider organization(s) who/which is to
     * receive the referral/transfer of care request.
     */
    set recipient(value: Array<Reference> | Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    get recipientArray<Reference>(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * The healthcare provider or provider organization who/which initiated the
     * referral/transfer of care request. Can also be Patient (a self
     * referral).
     */
    set requester(value: Reference | Reference | Reference) {
      this._content["requester"] = value;
    }

    get requesterReference(): Reference {
      return this._content["requester"] as Reference;
    }

    get requesterReference(): Reference {
      return this._content["requester"] as Reference;
    }

    get requesterReference(): Reference {
      return this._content["requester"] as Reference;
    }

    /** The patient who is the subject of a referral or transfer of care request. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * An indication of the urgency of referral (or where applicable the type of
     * transfer of care) request.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * Indication of the clinical domain or discipline to which the referral or
     * transfer of care request is sent. For example: Cardiology
     * Gastroenterology Diabetology.
     */
    set specialty(value: CodeableConcept) {
      this._content["specialty"] = value;
    }

    get specialty(): CodeableConcept {
      return this._content["specialty"] as CodeableConcept;
    }

    /**
     * An indication of the type of referral (or where applicable the type of
     * transfer of care) request.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Date/DateTime of creation for draft requests and date of activation for
     * active requests.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Business identifier that uniquely identifies the referral/care transfer
     * request instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The workflow status of the referral or transfer of care request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Used to record and send details about a request for referral service or
     * transfer of a patient to the care of another provider or provider
     * organization.
     */
    set ReferralRequest(value: Array<DomainResource>) {
      this._content["ReferralRequest"] = value;
    }

    get ReferralRequest(): Array<DomainResource> {
      return this._content["ReferralRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for RelatedPerson Resource */
  export class RelatedPerson {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RelatedPerson";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The period of time that this relationship is considered to be valid. If
     * there are no dates defined, then the interval is unknown.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Image of the person. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /** Address where the related person can be contacted or visited. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The date on which the related person was born. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * Administrative Gender - the gender that the person is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** A name associated with the person. */
    set name(value: HumanName) {
      this._content["name"] = value;
    }

    get name(): HumanName {
      return this._content["name"] as HumanName;
    }

    /** The nature of the relationship between a patient and the related person. */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /** The patient this person is related to. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Identifier for a person within a particular scope. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Information about a person that is involved in the care for a patient,
     * but who is not the target of healthcare, nor has a formal responsibility
     * in the care process.
     */
    set RelatedPerson(value: Array<DomainResource>) {
      this._content["RelatedPerson"] = value;
    }

    get RelatedPerson(): Array<DomainResource> {
      return this._content["RelatedPerson"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for RiskAssessment Resource */
  export class RiskAssessment {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RiskAssessment";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A description of the steps that might be taken to reduce the identified
     * risk(s).
     */
    set mitigation(value: String) {
      this._content["mitigation"] = value;
    }

    get mitigation(): String {
      return this._content["mitigation"] as String;
    }

    /** Describes the expected outcome for the subject. */
    set prediction(value: Array<BackboneElement>) {
      this._content["prediction"] = value;
    }

    get prediction(): Array<BackboneElement> {
      return this._content["prediction"] as Array<BackboneElement>;
    }

    /**
     * Indicates the source data considered as part of the assessment
     * (FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    set basis(value: Array<Reference>) {
      this._content["basis"] = value;
    }

    get basis(): Array<Reference> {
      return this._content["basis"] as Array<Reference>;
    }

    /** The algorithm, process or mechanism used to evaluate the risk. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /** Business identifier assigned to the risk assessment. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The provider or software application that performed the assessment. */
    set performer(value: Reference | Reference) {
      this._content["performer"] = value;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    get performerReference(): Reference {
      return this._content["performer"] as Reference;
    }

    /** The encounter where the assessment was performed. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * For assessments or prognosis specific to a particular condition,
     * indicates the condition being assessed.
     */
    set condition(value: Reference) {
      this._content["condition"] = value;
    }

    get condition(): Reference {
      return this._content["condition"] as Reference;
    }

    /** The date (and possibly time) the risk assessment was performed. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** The patient or group the risk assessment applies to. */
    set subject(value: Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * An assessment of the likely outcome(s) for a patient or other subject as
     * well as the likelihood of each outcome.
     */
    set RiskAssessment(value: Array<DomainResource>) {
      this._content["RiskAssessment"] = value;
    }

    get RiskAssessment(): Array<DomainResource> {
      return this._content["RiskAssessment"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Schedule Resource */
  export class Schedule {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Schedule";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Comments on the availability to describe any extended information. Such
     * as custom constraints on the slot(s) that may be associated.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * The period of time that the slots that are attached to this Schedule
     * resource cover (even if none exist). These cover the amount of time that
     * an organization's planning horizon; the interval for which they are
     * currently accepting appointments. This does not define a "template" for
     * planning outside these dates.
     */
    set planningHorizon(value: Period) {
      this._content["planningHorizon"] = value;
    }

    get planningHorizon(): Period {
      return this._content["planningHorizon"] as Period;
    }

    /**
     * The resource this Schedule resource is providing availability information
     * for. These are expected to usually be one of HealthcareService, Location,
     * Practitioner, Device, Patient or RelatedPerson.
     */
    set actor(
      value:
        | Reference
        | Reference
        | Reference
        | Reference
        | Reference
        | Reference,
    ) {
      this._content["actor"] = value;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    get actorReference(): Reference {
      return this._content["actor"] as Reference;
    }

    /**
     * The schedule type can be used for the categorization of healthcare
     * services or other appointment types.
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }

    /** External Ids for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A container for slot(s) of time that may be available for booking
     * appointments.
     */
    set Schedule(value: Array<DomainResource>) {
      this._content["Schedule"] = value;
    }

    get Schedule(): Array<DomainResource> {
      return this._content["Schedule"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for SearchParameter Resource */
  export class SearchParameter {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SearchParameter";
    protected _content: { [key: string]: TElement } = {};

    /** Types of resource (if a resource is referenced). */
    set target(value: Array<Code>) {
      this._content["target"] = value;
    }

    get target(): Array<Code> {
      return this._content["target"] as Array<Code>;
    }

    /**
     * How the search parameter relates to the set of elements returned by
     * evaluating the xpath query.
     */
    set xpathUsage(value: Code) {
      this._content["xpathUsage"] = value;
    }

    get xpathUsage(): Code {
      return this._content["xpathUsage"] as Code;
    }

    /**
     * An XPath expression that returns a set of elements for the search
     * parameter.
     */
    set xpath(value: String) {
      this._content["xpath"] = value;
    }

    get xpath(): String {
      return this._content["xpath"] as String;
    }

    /** A description of the search parameters and how it used. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The type of value a search parameter refers to, and how the content is
     * interpreted.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** The base resource type that this search parameter refers to. */
    set base(value: Code) {
      this._content["base"] = value;
    }

    get base(): Code {
      return this._content["base"] as Code;
    }

    /**
     * The code used in the URL or the parameter name in a parameters resource
     * for this search parameter.
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /** The Scope and Usage that this search parameter was created to meet. */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /**
     * The date (and optionally time) when the search parameter definition was
     * published. The date must change when the business version changes, if it
     * does, and it must change if the status code changes. In addition, it
     * should change when the substantive content of the search parameter
     * changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the search
     * parameter.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * A flag to indicate that this search parameter definition is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of this search parameter definition. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name identifying the search parameter. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * An absolute URL that is used to identify this search parameter when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this search parameter is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A search parameter that defines a named search item that can be used to
     * search/filter on a resource.
     */
    set SearchParameter(value: DomainResource) {
      this._content["SearchParameter"] = value;
    }

    get SearchParameter(): DomainResource {
      return this._content["SearchParameter"] as DomainResource;
    }
  }

  /** Base StructureDefinition for Slot Resource */
  export class Slot {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Slot";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Comments on the slot to describe any extended information. Such as custom
     * constraints on the slot.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * This slot has already been overbooked, appointments are unlikely to be
     * accepted for this time.
     */
    set overbooked(value: Boolean) {
      this._content["overbooked"] = value;
    }

    get overbooked(): Boolean {
      return this._content["overbooked"] as Boolean;
    }

    /** Date/Time that the slot is to conclude. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /** Date/Time that the slot is to begin. */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /** Busy | free | busy-unavailable | busy-tentative. */
    set freeBusyType(value: Code) {
      this._content["freeBusyType"] = value;
    }

    get freeBusyType(): Code {
      return this._content["freeBusyType"] as Code;
    }

    /**
     * The schedule resource that this slot defines an interval of status
     * information.
     */
    set schedule(value: Reference) {
      this._content["schedule"] = value;
    }

    get schedule(): Reference {
      return this._content["schedule"] as Reference;
    }

    /**
     * The type of appointments that can be booked into this slot (ideally this
     * would be an identifiable service - which is at a location, rather than
     * the location itself). If provided then this overrides the value provided
     * on the availability resource.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** External Ids for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A slot of time on a schedule that may be available for booking
     * appointments.
     */
    set Slot(value: Array<DomainResource>) {
      this._content["Slot"] = value;
    }

    get Slot(): Array<DomainResource> {
      return this._content["Slot"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Specimen Resource */
  export class Specimen {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Specimen";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The container holding the specimen. The recursive nature of containers;
     * i.e. blood in tube in tray in rack is not addressed here.
     */
    set container(value: Array<BackboneElement>) {
      this._content["container"] = value;
    }

    get container(): Array<BackboneElement> {
      return this._content["container"] as Array<BackboneElement>;
    }

    /** Details concerning treatment and processing steps for the specimen. */
    set treatment(value: Array<BackboneElement>) {
      this._content["treatment"] = value;
    }

    get treatment(): Array<BackboneElement> {
      return this._content["treatment"] as Array<BackboneElement>;
    }

    /** Details concerning the specimen collection. */
    set collection(value: BackboneElement) {
      this._content["collection"] = value;
    }

    get collection(): BackboneElement {
      return this._content["collection"] as BackboneElement;
    }

    /** Time when specimen was received for processing or testing. */
    set receivedTime(value: DateTime) {
      this._content["receivedTime"] = value;
    }

    get receivedTime(): DateTime {
      return this._content["receivedTime"] as DateTime;
    }

    /**
     * The identifier assigned by the lab when accessioning specimen(s). This is
     * not necessarily the same as the specimen identifier, depending on local
     * lab procedures.
     */
    set accessionIdentifier(value: Identifier) {
      this._content["accessionIdentifier"] = value;
    }

    get accessionIdentifier(): Identifier {
      return this._content["accessionIdentifier"] as Identifier;
    }

    /**
     * Where the specimen came from. This may be from the patient(s) or from the
     * environment or a device.
     */
    set subject(value: Reference | Reference | Reference | Reference) {
      this._content["subject"] = value;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Reference to the parent (source) specimen which is used when the specimen
     * was either derived from or a component of another specimen.
     */
    set parent(value: Array<Reference>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Reference> {
      return this._content["parent"] as Array<Reference>;
    }

    /** The kind of material that forms the specimen. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** The availability of the specimen. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Id for specimen. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A sample to be used for analysis. */
    set Specimen(value: Array<DomainResource>) {
      this._content["Specimen"] = value;
    }

    get Specimen(): Array<DomainResource> {
      return this._content["Specimen"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for StructureDefinition Resource */
  export class StructureDefinition {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/StructureDefinition";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A differential view is expressed relative to the base StructureDefinition
     * - a statement of differences that it applies.
     */
    set differential(value: BackboneElement) {
      this._content["differential"] = value;
    }

    get differential(): BackboneElement {
      return this._content["differential"] as BackboneElement;
    }

    /**
     * A snapshot view is expressed in a stand alone form that can be used and
     * interpreted without considering the base StructureDefinition.
     */
    set snapshot(value: BackboneElement) {
      this._content["snapshot"] = value;
    }

    get snapshot(): BackboneElement {
      return this._content["snapshot"] as BackboneElement;
    }

    /**
     * An absolute URI that is the base structure from which this set of
     * constraints is derived.
     */
    set base(value: Uri) {
      this._content["base"] = value;
    }

    get base(): Uri {
      return this._content["base"] as Uri;
    }

    /**
     * Identifies the types of resource or data type elements to which the
     * extension can be applied.
     */
    set context(value: Array<String>) {
      this._content["context"] = value;
    }

    get context(): Array<String> {
      return this._content["context"] as Array<String>;
    }

    /**
     * If this is an extension, Identifies the context within FHIR resources
     * where the extension can be used.
     */
    set contextType(value: Code) {
      this._content["contextType"] = value;
    }

    get contextType(): Code {
      return this._content["contextType"] as Code;
    }

    /**
     * Whether structure this definition describes is abstract or not - that is,
     * whether an actual exchanged item can ever be of this type.
     */
    set abstract(value: Boolean) {
      this._content["abstract"] = value;
    }

    get abstract(): Boolean {
      return this._content["abstract"] as Boolean;
    }

    /**
     * The type of type that is being constrained - a data type, an extension, a
     * resource, including abstract ones. If this field is present, it indicates
     * that the structure definition is a constraint. If it is not present, then
     * the structure definition is the definition of a base structure.
     */
    set constrainedType(value: Code) {
      this._content["constrainedType"] = value;
    }

    get constrainedType(): Code {
      return this._content["constrainedType"] as Code;
    }

    /** Defines the kind of structure that this definition is describing. */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** An external specification that the content is mapped to. */
    set mapping(value: Array<BackboneElement>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<BackboneElement> {
      return this._content["mapping"] as Array<BackboneElement>;
    }

    /**
     * The version of the FHIR specification on which this StructureDefinition
     * is based - this is the formal version of the specification, without the
     * revision number, e.g. [publication].[major].[minor], which is 1.0.2 for
     * this version.
     */
    set fhirVersion(value: Id) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Id {
      return this._content["fhirVersion"] as Id;
    }

    /**
     * A set of terms from external terminologies that may be used to assist
     * with indexing and searching of templates.
     */
    set code(value: Array<Coding>) {
      this._content["code"] = value;
    }

    get code(): Array<Coding> {
      return this._content["code"] as Array<Coding>;
    }

    /**
     * A copyright statement relating to the structure definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the details of the constraints and mappings.
     */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * Explains why this structure definition is needed and why it's been
     * constrained as it has.
     */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of structure definitions.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /**
     * A free text natural language description of the StructureDefinition and
     * its use.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The date this version of the structure definition was published. The date
     * must change when the business version changes, if it does, and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the structure definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the structure
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * This StructureDefinition was authored for testing purposes (or
     * education/evaluation/marketing), and is not intended to be used for
     * genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** The status of the StructureDefinition. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Defined so that applications can use this name when displaying the value
     * of the extension to the user.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /** A free text natural language name identifying the StructureDefinition. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the
     * StructureDefinition when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the
     * StructureDefinition author manually.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * Formal identifier that is used to identify this StructureDefinition when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance (should be globally unique OID, UUID, or
     * URI), (if it's not possible to use the literal URI).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An absolute URL that is used to identify this structure definition when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this structure definition is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A definition of a FHIR structure. This resource is used to describe the
     * underlying resources, data types defined in FHIR, and also for describing
     * extensions, and constraints on resources and data types.
     */
    set StructureDefinition(value: DomainResource) {
      this._content["StructureDefinition"] = value;
    }

    get StructureDefinition(): DomainResource {
      return this._content["StructureDefinition"] as DomainResource;
    }
  }

  /** Base StructureDefinition for Subscription Resource */
  export class Subscription {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Subscription";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A tag to add to any resource that matches the criteria, after the
     * subscription is processed.
     */
    set tag(value: Array<Coding>) {
      this._content["tag"] = value;
    }

    get tag(): Array<Coding> {
      return this._content["tag"] as Array<Coding>;
    }

    /** The time for the server to turn the subscription off. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * Details where to send notifications when resources are received that meet
     * the criteria.
     */
    set channel(value: BackboneElement) {
      this._content["channel"] = value;
    }

    get channel(): BackboneElement {
      return this._content["channel"] as BackboneElement;
    }

    /**
     * A record of the last error that occurred when the server processed a
     * notification.
     */
    set error(value: String) {
      this._content["error"] = value;
    }

    get error(): String {
      return this._content["error"] as String;
    }

    /**
     * The status of the subscription, which marks the server state for managing
     * the subscription.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A description of why this subscription is defined. */
    set reason(value: String) {
      this._content["reason"] = value;
    }

    get reason(): String {
      return this._content["reason"] as String;
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /**
     * The rules that the server should use to determine when to generate
     * notifications for this subscription.
     */
    set criteria(value: String) {
      this._content["criteria"] = value;
    }

    get criteria(): String {
      return this._content["criteria"] as String;
    }

    /**
     * The subscription resource is used to define a push based subscription
     * from a server to another system. Once a subscription is registered with
     * the server, the server checks every resource that is created or updated,
     * and if the resource matches the given criteria, it sends a message on the
     * defined "channel" so that another system is able to take an appropriate
     * action.
     */
    set Subscription(value: Array<DomainResource>) {
      this._content["Subscription"] = value;
    }

    get Subscription(): Array<DomainResource> {
      return this._content["Subscription"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for Substance Resource */
  export class Substance {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Substance";
    protected _content: { [key: string]: TElement } = {};

    /** A substance can be composed of other substances. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /**
     * Substance may be used to describe a kind of substance, or a specific
     * package/container of the substance: an instance.
     */
    set instance(value: Array<BackboneElement>) {
      this._content["instance"] = value;
    }

    get instance(): Array<BackboneElement> {
      return this._content["instance"] as Array<BackboneElement>;
    }

    /**
     * A description of the substance - its appearance, handling requirements,
     * and other usage notes.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** A code (or set of codes) that identify this substance. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * A code that classifies the general type of substance. This is used for
     * searching, sorting and display purposes.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** Unique identifier for the substance. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A homogeneous material with a definite composition. */
    set Substance(value: Array<DomainResource>) {
      this._content["Substance"] = value;
    }

    get Substance(): Array<DomainResource> {
      return this._content["Substance"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for SupplyDelivery Resource */
  export class SupplyDelivery {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SupplyDelivery";
    protected _content: { [key: string]: TElement } = {};

    /** Identifies the person who picked up the Supply. */
    set receiver(value: Array<Reference>) {
      this._content["receiver"] = value;
    }

    get receiver(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    /**
     * Identification of the facility/location where the Supply was shipped to,
     * as part of the dispense event.
     */
    set destination(value: Reference) {
      this._content["destination"] = value;
    }

    get destination(): Reference {
      return this._content["destination"] as Reference;
    }

    /** The time the dispensed item was sent or handed to the patient (or agent). */
    set time(value: DateTime) {
      this._content["time"] = value;
    }

    get time(): DateTime {
      return this._content["time"] as DateTime;
    }

    /** The time the dispense event occurred. */
    set whenPrepared(value: Period) {
      this._content["whenPrepared"] = value;
    }

    get whenPrepared(): Period {
      return this._content["whenPrepared"] as Period;
    }

    /**
     * The individual responsible for dispensing the medication, supplier or
     * device.
     */
    set supplier(value: Reference) {
      this._content["supplier"] = value;
    }

    get supplier(): Reference {
      return this._content["supplier"] as Reference;
    }

    /**
     * Identifies the medication, substance or device being dispensed. This is
     * either a link to a resource representing the details of the item or a
     * simple attribute carrying a code that identifies the item from a known
     * list.
     */
    set suppliedItem(value: Reference | Reference | Reference) {
      this._content["suppliedItem"] = value;
    }

    get suppliedItemReference(): Reference {
      return this._content["suppliedItem"] as Reference;
    }

    get suppliedItemReference(): Reference {
      return this._content["suppliedItem"] as Reference;
    }

    get suppliedItemReference(): Reference {
      return this._content["suppliedItem"] as Reference;
    }

    /** The amount of supply that has been dispensed. Includes unit of measure. */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Indicates the type of dispensing event that is performed. Examples
     * include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill,
     * Samples, etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * A link to a resource representing the person whom the delivered item is
     * for.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** A code specifying the state of the dispense event. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifier assigned by the dispensing facility when the item(s) is
     * dispensed.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** Record of delivery of what is supplied. */
    set SupplyDelivery(value: Array<DomainResource>) {
      this._content["SupplyDelivery"] = value;
    }

    get SupplyDelivery(): Array<DomainResource> {
      return this._content["SupplyDelivery"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for SupplyRequest Resource */
  export class SupplyRequest {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SupplyRequest";
    protected _content: { [key: string]: TElement } = {};

    /** When the request should be fulfilled. */
    set when(value: BackboneElement) {
      this._content["when"] = value;
    }

    get when(): BackboneElement {
      return this._content["when"] as BackboneElement;
    }

    /** Why the supply item was requested. */
    set reason(value: CodeableConcept | Reference) {
      this._content["reason"] = value;
    }

    get reasonCodeableConcept(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    get reasonReference(): Reference {
      return this._content["reason"] as Reference;
    }

    /** Who is intended to fulfill the request. */
    set supplier(value: Array<Reference>) {
      this._content["supplier"] = value;
    }

    get supplier(): Array<Reference> {
      return this._content["supplier"] as Array<Reference>;
    }

    /** The item that is requested to be supplied. */
    set orderedItem(value: Reference | Reference | Reference) {
      this._content["orderedItem"] = value;
    }

    get orderedItemReference(): Reference {
      return this._content["orderedItem"] as Reference;
    }

    get orderedItemReference(): Reference {
      return this._content["orderedItem"] as Reference;
    }

    get orderedItemReference(): Reference {
      return this._content["orderedItem"] as Reference;
    }

    /**
     * Category of supply, e.g. central, non-stock, etc. This is used to support
     * work flows associated with the supply process.
     */
    set kind(value: CodeableConcept) {
      this._content["kind"] = value;
    }

    get kind(): CodeableConcept {
      return this._content["kind"] as CodeableConcept;
    }

    /** Status of the supply request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Unique identifier for this supply request. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** When the request was made. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * The Practitioner , Organization or Patient who initiated this order for
     * the supply.
     */
    set source(value: Reference | Reference | Reference) {
      this._content["source"] = value;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * A link to a resource representing the person whom the ordered item is
     * for.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * A record of a request for a medication, substance or device used in the
     * healthcare setting.
     */
    set SupplyRequest(value: Array<DomainResource>) {
      this._content["SupplyRequest"] = value;
    }

    get SupplyRequest(): Array<DomainResource> {
      return this._content["SupplyRequest"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for TestScript Resource */
  export class TestScript {
    static url: string = "http://hl7.org/fhir/StructureDefinition/TestScript";
    protected _content: { [key: string]: TElement } = {};

    /**
     * A series of operations required to clean up after the all the tests are
     * executed (successfully or otherwise).
     */
    set teardown(value: BackboneElement) {
      this._content["teardown"] = value;
    }

    get teardown(): BackboneElement {
      return this._content["teardown"] as BackboneElement;
    }

    /** A test in this script. */
    set test(value: Array<BackboneElement>) {
      this._content["test"] = value;
    }

    get test(): Array<BackboneElement> {
      return this._content["test"] as Array<BackboneElement>;
    }

    /** A series of required setup operations before tests are executed. */
    set setup(value: BackboneElement) {
      this._content["setup"] = value;
    }

    get setup(): BackboneElement {
      return this._content["setup"] as BackboneElement;
    }

    /**
     * Variable is set based either on element value in response body or on
     * header field value in the response headers.
     */
    set variable(value: Array<BackboneElement>) {
      this._content["variable"] = value;
    }

    get variable(): Array<BackboneElement> {
      return this._content["variable"] as Array<BackboneElement>;
    }

    /** Reference to the profile to be used for validation. */
    set profile(value: Array<Reference>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Reference> {
      return this._content["profile"] as Array<Reference>;
    }

    /**
     * Fixture in the test script - by reference (uri). All fixtures are
     * required for the test script to execute.
     */
    set fixture(value: Array<BackboneElement>) {
      this._content["fixture"] = value;
    }

    get fixture(): Array<BackboneElement> {
      return this._content["fixture"] as Array<BackboneElement>;
    }

    /**
     * If the tests apply to more than one FHIR server (e.g. cross-server
     * interoperability tests) then multiserver=true. Defaults to false if value
     * is unspecified.
     */
    set multiserver(value: Boolean) {
      this._content["multiserver"] = value;
    }

    get multiserver(): Boolean {
      return this._content["multiserver"] as Boolean;
    }

    /**
     * The required capability must exist and are assumed to function correctly
     * on the FHIR server being tested.
     */
    set metadata(value: BackboneElement) {
      this._content["metadata"] = value;
    }

    get metadata(): BackboneElement {
      return this._content["metadata"] as BackboneElement;
    }

    /**
     * A copyright statement relating to the Test Script and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the details of the constraints and mappings.
     */
    set copyright(value: String) {
      this._content["copyright"] = value;
    }

    get copyright(): String {
      return this._content["copyright"] as String;
    }

    /**
     * Explains why this Test Script is needed and why it's been constrained as
     * it has.
     */
    set requirements(value: String) {
      this._content["requirements"] = value;
    }

    get requirements(): String {
      return this._content["requirements"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of Test Scripts.
     */
    set useContext(value: Array<CodeableConcept>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<CodeableConcept> {
      return this._content["useContext"] as Array<CodeableConcept>;
    }

    /** A free text natural language description of the TestScript and its use. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The date this version of the test tcript was published. The date must
     * change when the business version changes, if it does, and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the test cases change.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Contacts to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the Test
     * Script.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * This TestScript was authored for testing purposes (or
     * education/evaluation/marketing), and is not intended to be used for
     * genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Identifier for the TestScript assigned for external purposes outside the
     * context of FHIR.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The status of the TestScript. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A free text natural language name identifying the TestScript. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The identifier that is used to identify this version of the TestScript.
     * This is an arbitrary value managed by the TestScript author manually.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * An absolute URL that is used to identify this Test Script. This SHALL be
     * a URL, SHOULD be globally unique, and SHOULD be an address at which this
     * Test Script is (or will be) published.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * TestScript is a resource that specifies a suite of tests against a FHIR
     * server implementation to determine compliance against the FHIR
     * specification.
     */
    set TestScript(value: Array<DomainResource>) {
      this._content["TestScript"] = value;
    }

    get TestScript(): Array<DomainResource> {
      return this._content["TestScript"] as Array<DomainResource>;
    }
  }

  /** Base StructureDefinition for VisionPrescription Resource */
  export class VisionPrescription {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/VisionPrescription";
    protected _content: { [key: string]: TElement } = {};

    /** Deals with details of the dispense part of the supply specification. */
    set dispense(value: Array<BackboneElement>) {
      this._content["dispense"] = value;
    }

    get dispense(): Array<BackboneElement> {
      return this._content["dispense"] as Array<BackboneElement>;
    }

    /** Can be the reason or the indication for writing the prescription. */
    set reason(value: CodeableConcept | Reference) {
      this._content["reason"] = value;
    }

    get reasonCodeableConcept(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    get reasonReference(): Reference {
      return this._content["reason"] as Reference;
    }

    /**
     * A link to a resource that identifies the particular occurrence of contact
     * between patient and health care provider.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** The healthcare professional responsible for authorizing the prescription. */
    set prescriber(value: Reference) {
      this._content["prescriber"] = value;
    }

    get prescriber(): Reference {
      return this._content["prescriber"] as Reference;
    }

    /**
     * A link to a resource representing the person to whom the vision products
     * will be supplied.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The date (and perhaps time) when the prescription was written. */
    set dateWritten(value: DateTime) {
      this._content["dateWritten"] = value;
    }

    get dateWritten(): DateTime {
      return this._content["dateWritten"] as DateTime;
    }

    /**
     * Business identifier which may be used by other parties to reference or
     * identify the prescription.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An authorization for the supply of glasses and/or contact lenses to a
     * patient.
     */
    set VisionPrescription(value: Array<DomainResource>) {
      this._content["VisionPrescription"] = value;
    }

    get VisionPrescription(): Array<DomainResource> {
      return this._content["VisionPrescription"] as Array<DomainResource>;
    }
  }
}
