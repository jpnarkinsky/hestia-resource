// Autogenerated by src/generate.  Do not edit!
// cspell: disable
namespace FhirStu3 {
  export type TElement =
    | string
    | string[]
    | number
    | number[]
    | boolean
    | Resource
    | Resource[]
    | Address
    | Address[]
    | Age
    | Age[]
    | Annotation
    | Annotation[]
    | Attachment
    | Attachment[]
    | BackboneElement
    | BackboneElement[]
    | Base64Binary
    | Base64Binary[]
    | Boolean
    | Boolean[]
    | Code
    | Code[]
    | CodeableConcept
    | CodeableConcept[]
    | Coding
    | Coding[]
    | ContactDetail
    | ContactDetail[]
    | ContactPoint
    | ContactPoint[]
    | Contributor
    | Contributor[]
    | Count
    | Count[]
    | DataRequirement
    | DataRequirement[]
    | Date
    | Date[]
    | DateTime
    | DateTime[]
    | Decimal
    | Decimal[]
    | Distance
    | Distance[]
    | Dosage
    | Dosage[]
    | Duration
    | Duration[]
    | Element
    | Element[]
    | ElementDefinition
    | ElementDefinition[]
    | Extension
    | Extension[]
    | HumanName
    | HumanName[]
    | Id
    | Id[]
    | Identifier
    | Identifier[]
    | Instant
    | Instant[]
    | Integer
    | Integer[]
    | Markdown
    | Markdown[]
    | Meta
    | Meta[]
    | Money
    | Money[]
    | Narrative
    | Narrative[]
    | Oid
    | Oid[]
    | ParameterDefinition
    | ParameterDefinition[]
    | Period
    | Period[]
    | PositiveInt
    | PositiveInt[]
    | Quantity
    | Quantity[]
    | Range
    | Range[]
    | Ratio
    | Ratio[]
    | Reference
    | Reference[]
    | RelatedArtifact
    | RelatedArtifact[]
    | SampledData
    | SampledData[]
    | Signature
    | Signature[]
    | SimpleQuantity
    | SimpleQuantity[]
    | String
    | String[]
    | Time
    | Time[]
    | Timing
    | Timing[]
    | TriggerDefinition
    | TriggerDefinition[]
    | UnsignedInt
    | UnsignedInt[]
    | Uri
    | Uri[]
    | UsageContext
    | UsageContext[]
    | Uuid
    | Uuid[]
    | Xhtml
    | Xhtml[];

  /** Root of fhir class hierarchy */
  abstract class Base {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Base";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Base class for all data elements
     *
     * @content {Object} value
     */
    constructor(content: { [key: string]: TElement }) {
      Object.assign(this._content, content);
      this._content.resourceType = this.constructor.name;
    }
  }

  /** Base StructureDefinition for Resource Resource */
  export abstract class Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Resource";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The logical id of the resource, as used in the URL for the resource. Once
     * assigned, this value never changes.
     */
    set id(value: Id) {
      this._content["id"] = value;
    }

    get id(): Id {
      return this._content["id"] as Id;
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     */
    set implicitRules(value: Uri) {
      this._content["implicitRules"] = value;
    }

    get implicitRules(): Uri {
      return this._content["implicitRules"] as Uri;
    }

    /** The base language in which the resource is written. */
    set language(value: Code) {
      this._content["language"] = value;
    }

    get language(): Code {
      return this._content["language"] as Code;
    }

    /**
     * The metadata about the resource. This is content that is maintained by
     * the infrastructure. Changes to the content may not always be associated
     * with version changes to the resource.
     */
    set meta(value: Meta) {
      this._content["meta"] = value;
    }

    get meta(): Meta {
      return this._content["meta"] as Meta;
    }
  }

  /** Base StructureDefinition for DomainResource Resource */
  export abstract class DomainResource extends Resource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DomainResource";

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    set contained(value: Array<Resource>) {
      this._content["contained"] = value;
    }

    get contained(): Array<Resource> {
      return this._content["contained"] as Array<Resource>;
    }

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the resource. In order to make the use of extensions
     * safe and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met as
     * part of the definition of the extension.
     */
    set extension(value: Array<Extension>) {
      this._content["extension"] = value;
    }

    get extension(): Array<Extension> {
      return this._content["extension"] as Array<Extension>;
    }

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the resource, and that modifies the understanding of
     * the element that contains it. Usually modifier elements provide negation
     * or qualification. In order to make the use of extensions safe and
     * manageable, there is a strict set of governance applied to the definition
     * and use of extensions. Though any implementer is allowed to define an
     * extension, there is a set of requirements that SHALL be met as part of
     * the definition of the extension. Applications processing a resource are
     * required to check for modifier extensions.
     */
    set modifierExtension(value: Array<Extension>) {
      this._content["modifierExtension"] = value;
    }

    get modifierExtension(): Array<Extension> {
      return this._content["modifierExtension"] as Array<Extension>;
    }

    /**
     * A human-readable narrative that contains a summary of the resource, and
     * may be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    set text(value: Narrative) {
      this._content["text"] = value;
    }

    get text(): Narrative {
      return this._content["text"] as Narrative;
    }
  }

  /** Base StructureDefinition for Account Resource */
  export class Account extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Account";

    /**
     * Indicates the period of time over which the account is allowed to have
     * transactions posted to it. This period may be different to the
     * coveragePeriod which is the duration of time that services may occur.
     */
    set active(value: Period) {
      this._content["active"] = value;
    }

    get active(): Period {
      return this._content["active"] as Period;
    }

    /**
     * Represents the sum of all credits less all debits associated with the
     * account. Might be positive, zero or negative.
     */
    set balance(value: Money) {
      this._content["balance"] = value;
    }

    get balance(): Money {
      return this._content["balance"] as Money;
    }

    /**
     * The party(s) that are responsible for covering the payment of this
     * account, and what order should they be applied to the account.
     */
    set coverage(value: Array<BackboneElement>) {
      this._content["coverage"] = value;
    }

    get coverage(): Array<BackboneElement> {
      return this._content["coverage"] as Array<BackboneElement>;
    }

    /**
     * Provides additional information about what the account tracks and how it
     * is used.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Parties financially responsible for the account. */
    set guarantor(value: Array<BackboneElement>) {
      this._content["guarantor"] = value;
    }

    get guarantor(): Array<BackboneElement> {
      return this._content["guarantor"] as Array<BackboneElement>;
    }

    /**
     * Unique identifier used to reference the account. May or may not be
     * intended for human use (e.g. credit card number).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Name used for the account when displaying it to humans in reports, etc. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Indicates the organization, department, etc. with responsibility for the
     * account.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /**
     * Identifies the period of time the account applies to; e.g. accounts
     * created per fiscal year, quarter, etc.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Indicates whether the account is presently used/usable or not. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the patient, device, practitioner, location or other object
     * the account is associated with.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Categorizes the account for reporting and searching purposes. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for ActivityDefinition Resource */
  export class ActivityDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ActivityDefinition";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * Indicates the sites on the subject's body where the procedure should be
     * performed (I.e. the target sites).
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * Detailed description of the type of activity; e.g. What lab test, what
     * procedure, what kind of encounter.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A contributor to the content of the asset, including authors, editors,
     * reviewers, and endorsers.
     */
    set contributor(value: Array<Contributor>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Contributor> {
      return this._content["contributor"] as Array<Contributor>;
    }

    /**
     * A copyright statement relating to the activity definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the activity definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the activity definition was
     * published. The date must change if and when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the activity definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the activity definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Provides detailed dosage instructions in the same way that they are
     * described for MedicationRequest resources.
     */
    set dosage(value: Array<Dosage>) {
      this._content["dosage"] = value;
    }

    get dosage(): Array<Dosage> {
      return this._content["dosage"] as Array<Dosage>;
    }

    /**
     * Dynamic values that will be evaluated to produce values for elements of
     * the resulting resource. For example, if the dosage of a medication must
     * be computed based on the patient's weight, a dynamic value would be used
     * to specify an expression that calculated the weight, and the path on the
     * intent resource that would contain the result.
     */
    set dynamicValue(value: Array<BackboneElement>) {
      this._content["dynamicValue"] = value;
    }

    get dynamicValue(): Array<BackboneElement> {
      return this._content["dynamicValue"] as Array<BackboneElement>;
    }

    /**
     * The period during which the activity definition content was or is planned
     * to be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A boolean value to indicate that this activity definition is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this activity definition
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the activity definition is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A description of the kind of resource the activity definition is
     * representing. For example, a MedicationRequest, a ProcedureRequest, or a
     * CommunicationRequest. Typically, but not always, this is a Request
     * resource.
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval, but doesn't change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing any formal logic used by the
     * asset.
     */
    set library(value: Array<Reference>) {
      this._content["library"] = value;
    }

    get library(): Array<Reference> {
      return this._content["library"] as Array<Reference>;
    }

    /**
     * Identifies the facility where the activity will occur; e.g. home,
     * hospital, specific clinic, etc.
     */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * A natural language name identifying the activity definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Indicates who should participate in performing the action described. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * Identifies the food, drug or other product being consumed or supplied in
     * the activity.
     */
    set product(value: Reference) {
      this._content["product"] = value;
    }

    get product(): Reference {
      return this._content["product"] as Reference;
    }

    /**
     * The name of the individual or organization that published the activity
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this activity definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Identifies the quantity expected to be consumed at once (per dose, per
     * meal, etc.).
     */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * The status of this activity definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The period, timing or frequency upon which the described activity is to
     * occur.
     */
    set timing(value: Timing) {
      this._content["timing"] = value;
    }

    get timing(): Timing {
      return this._content["timing"] as Timing;
    }

    /** A short, descriptive, user-friendly title for the activity definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the activity. Topics provide
     * a high-level categorization of the activity that can be useful for
     * filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * A reference to a StructureMap resource that defines a transform that can
     * be executed to produce the intent resource using the ActivityDefinition
     * instance as the input.
     */
    set transform(value: Reference) {
      this._content["transform"] = value;
    }

    get transform(): Reference {
      return this._content["transform"] as Reference;
    }

    /**
     * An absolute URI that is used to identify this activity definition when it
     * is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this activity definition is (or will be) published. The URL SHOULD
     * include the major version of the activity definition. For more
     * information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the asset is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate activity definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the activity
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the activity definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active assets.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for AdverseEvent Resource */
  export class AdverseEvent extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/AdverseEvent";

    /**
     * The type of event which is important to characterize what occurred and
     * caused harm to the subject, or had the potential to cause harm to the
     * subject.
     */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /** The date (and perhaps time) when the adverse event occurred. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Describes the adverse event in text. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Parties that may or should contribute or have contributed information to
     * the Act. Such information includes information leading to the decision to
     * perform the Act and how to perform the Act (e.g. consultant), information
     * that the Act itself seeks to reveal (e.g. informant of clinical history),
     * or information about what Act was performed (e.g. informant witness).
     */
    set eventParticipant(value: Reference) {
      this._content["eventParticipant"] = value;
    }

    get eventParticipant(): Reference {
      return this._content["eventParticipant"] as Reference;
    }

    /**
     * The identifier(s) of this adverse event that are assigned by business
     * processes and/or used to refer to it when a direct URL reference to the
     * resource itsefl is not appropriate.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The information about where the adverse event occurred. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Describes the type of outcome from the adverse event. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /**
     * Includes information about the reaction that occurred as a result of
     * exposure to a substance (for example, a drug or a chemical).
     */
    set reaction(value: Array<Reference>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<Reference> {
      return this._content["reaction"] as Array<Reference>;
    }

    /**
     * Information on who recorded the adverse event. May be the patient or a
     * practitioner.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /** AdverseEvent.referenceDocument. */
    set referenceDocument(value: Array<Reference>) {
      this._content["referenceDocument"] = value;
    }

    get referenceDocument(): Array<Reference> {
      return this._content["referenceDocument"] as Array<Reference>;
    }

    /** Describes the seriousness or severity of the adverse event. */
    set seriousness(value: CodeableConcept) {
      this._content["seriousness"] = value;
    }

    get seriousness(): CodeableConcept {
      return this._content["seriousness"] as CodeableConcept;
    }

    /** AdverseEvent.study. */
    set study(value: Array<Reference>) {
      this._content["study"] = value;
    }

    get study(): Array<Reference> {
      return this._content["study"] as Array<Reference>;
    }

    /**
     * This subject or group impacted by the event. With a prospective adverse
     * event, there will be no subject as the adverse event was prevented.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** AdverseEvent.subjectMedicalHistory. */
    set subjectMedicalHistory(value: Array<Reference>) {
      this._content["subjectMedicalHistory"] = value;
    }

    get subjectMedicalHistory(): Array<Reference> {
      return this._content["subjectMedicalHistory"] as Array<Reference>;
    }

    /** Describes the entity that is suspected to have caused the adverse event. */
    set suspectEntity(value: Array<BackboneElement>) {
      this._content["suspectEntity"] = value;
    }

    get suspectEntity(): Array<BackboneElement> {
      return this._content["suspectEntity"] as Array<BackboneElement>;
    }

    /**
     * This element defines the specific type of event that occurred or that was
     * prevented from occurring.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for AllergyIntolerance Resource */
  export class AllergyIntolerance extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance";

    /**
     * The date on which the existance of the AllergyIntolerance was first
     * asserted or acknowledged.
     */
    set assertedDate(value: DateTime) {
      this._content["assertedDate"] = value;
    }

    get assertedDate(): DateTime {
      return this._content["assertedDate"] as DateTime;
    }

    /** The source of the information about the allergy that is recorded. */
    set asserter(value: Reference) {
      this._content["asserter"] = value;
    }

    get asserter(): Reference {
      return this._content["asserter"] as Reference;
    }

    /** Category of the identified substance. */
    set category(value: Array<Code>) {
      this._content["category"] = value;
    }

    get category(): Array<Code> {
      return this._content["category"] as Array<Code>;
    }

    /** The clinical status of the allergy or intolerance. */
    set clinicalStatus(value: Code) {
      this._content["clinicalStatus"] = value;
    }

    get clinicalStatus(): Code {
      return this._content["clinicalStatus"] as Code;
    }

    /**
     * Code for an allergy or intolerance statement (either a positive or a
     * negated/excluded statement). This may be a code for a substance or
     * pharmaceutical product that is considered to be responsible for the
     * adverse reaction risk (e.g., "Latex"), an allergy or intolerance
     * condition (e.g., "Latex allergy"), or a negated/excluded code for a
     * specific substance or class (e.g., "No latex allergy") or a general or
     * categorical negated statement (e.g., "No known allergy", "No known drug
     * allergies").
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction
     * to the identified substance.
     */
    set criticality(value: Code) {
      this._content["criticality"] = value;
    }

    get criticality(): Code {
      return this._content["criticality"] as Code;
    }

    /**
     * This records identifiers associated with this allergy/intolerance concern
     * that are defined by business processes and/or used to refer to it when a
     * direct URL reference to the resource itself is not appropriate (e.g. in
     * CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Represents the date and/or time of the last known occurrence of a
     * reaction event.
     */
    set lastOccurrence(value: DateTime) {
      this._content["lastOccurrence"] = value;
    }

    get lastOccurrence(): DateTime {
      return this._content["lastOccurrence"] as DateTime;
    }

    /**
     * Additional narrative about the propensity for the Adverse Reaction, not
     * captured in other fields.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Estimated or actual date, date-time, or age when allergy or intolerance
     * was identified.
     */
    set onset(value: DateTime) {
      this._content["onset"] = value;
    }

    get onset(): DateTime {
      return this._content["onset"] as DateTime;
    }

    /** The patient who has the allergy or intolerance. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Details about each adverse reaction event linked to exposure to the
     * identified substance.
     */
    set reaction(value: Array<BackboneElement>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<BackboneElement> {
      return this._content["reaction"] as Array<BackboneElement>;
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * content.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /**
     * Identification of the underlying physiological mechanism for the reaction
     * risk.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * Assertion about certainty associated with the propensity, or potential
     * risk, of a reaction to the identified substance (including pharmaceutical
     * product).
     */
    set verificationStatus(value: Code) {
      this._content["verificationStatus"] = value;
    }

    get verificationStatus(): Code {
      return this._content["verificationStatus"] as Code;
    }
  }

  /** Base StructureDefinition for Appointment Resource */
  export class Appointment extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Appointment";

    /**
     * The style of appointment or patient that has been booked in the slot (not
     * service type).
     */
    set appointmentType(value: CodeableConcept) {
      this._content["appointmentType"] = value;
    }

    get appointmentType(): CodeableConcept {
      return this._content["appointmentType"] as CodeableConcept;
    }

    /** Additional comments about the appointment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * The date that this appointment was initially created. This could be
     * different to the meta.lastModified value on the initial entry, as this
     * could have been before the resource was created on the FHIR server, and
     * should remain unchanged over the lifespan of the appointment.
     */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The brief description of the appointment as would be shown on a subject
     * line in a meeting request, or appointment list. Detailed or expanded
     * information should be put in the comment field.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Date/Time that the appointment is to conclude. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * This records identifiers associated with this appointment concern that
     * are defined by business processes and/or used to refer to it when a
     * direct URL reference to the resource itself is not appropriate (e.g. in
     * CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The referral request this appointment is allocated to assess (incoming
     * referral).
     */
    set incomingReferral(value: Array<Reference>) {
      this._content["incomingReferral"] = value;
    }

    get incomingReferral(): Array<Reference> {
      return this._content["incomingReferral"] as Array<Reference>;
    }

    /**
     * Reason the appointment has been scheduled to take place, as specified
     * using information from another resource. When the patient arrives and the
     * encounter begins it may be used as the admission diagnosis. The
     * indication will typically be a Condition (with other resources referenced
     * in the evidence.detail), or a Procedure.
     */
    set indication(value: Array<Reference>) {
      this._content["indication"] = value;
    }

    get indication(): Array<Reference> {
      return this._content["indication"] as Array<Reference>;
    }

    /**
     * Number of minutes that the appointment is to take. This can be less than
     * the duration between the start and end times (where actual time of
     * appointment is only an estimate or is a planned appointment request).
     */
    set minutesDuration(value: PositiveInt) {
      this._content["minutesDuration"] = value;
    }

    get minutesDuration(): PositiveInt {
      return this._content["minutesDuration"] as PositiveInt;
    }

    /** List of participants involved in the appointment. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * The priority of the appointment. Can be used to make informed decisions
     * if needing to re-prioritize appointments. (The iCal Standard specifies 0
     * as undefined, 1 as highest, 9 as lowest priority).
     */
    set priority(value: UnsignedInt) {
      this._content["priority"] = value;
    }

    get priority(): UnsignedInt {
      return this._content["priority"] as UnsignedInt;
    }

    /**
     * The reason that this appointment is being scheduled. This is more
     * clinical than administrative.
     */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /**
     * A set of date ranges (potentially including times) that the appointment
     * is preferred to be scheduled within. When using these values, the minutes
     * duration should be provided to indicate the length of the appointment to
     * fill and populate the start/end times for the actual allocated time.
     */
    set requestedPeriod(value: Array<Period>) {
      this._content["requestedPeriod"] = value;
    }

    get requestedPeriod(): Array<Period> {
      return this._content["requestedPeriod"] as Array<Period>;
    }

    /**
     * A broad categorisation of the service that is to be performed during this
     * appointment.
     */
    set serviceCategory(value: CodeableConcept) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): CodeableConcept {
      return this._content["serviceCategory"] as CodeableConcept;
    }

    /** The specific service that is to be performed during this appointment. */
    set serviceType(value: Array<CodeableConcept>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<CodeableConcept> {
      return this._content["serviceType"] as Array<CodeableConcept>;
    }

    /**
     * The slots from the participants' schedules that will be filled by the
     * appointment.
     */
    set slot(value: Array<Reference>) {
      this._content["slot"] = value;
    }

    get slot(): Array<Reference> {
      return this._content["slot"] as Array<Reference>;
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** Date/Time that the appointment is to take place. */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /**
     * The overall status of the Appointment. Each of the participants has their
     * own participation status which indicates their involvement in the
     * process, however this status indicates the shared status.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Additional information to support the appointment provided when making
     * the appointment.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for AppointmentResponse Resource */
  export class AppointmentResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AppointmentResponse";

    /**
     * A Person, Location/HealthcareService or Device that is participating in
     * the appointment.
     */
    set actor(value: Reference) {
      this._content["actor"] = value;
    }

    get actor(): Reference {
      return this._content["actor"] as Reference;
    }

    /** Appointment that this response is replying to. */
    set appointment(value: Reference) {
      this._content["appointment"] = value;
    }

    get appointment(): Reference {
      return this._content["appointment"] as Reference;
    }

    /** Additional comments about the appointment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * This may be either the same as the appointment request to confirm the
     * details of the appointment, or alternately a new time to request a
     * re-negotiation of the end time.
     */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * This records identifiers associated with this appointment response
     * concern that are defined by business processes and/ or used to refer to
     * it when a direct URL reference to the resource itself is not
     * appropriate.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Participation status of the participant. When the status is declined or
     * tentative if the start/end times are different to the appointment, then
     * these times should be interpreted as a requested time change. When the
     * status is accepted, the times can either be the time of the appointment
     * (as a confirmation of the time) or can be empty.
     */
    set participantStatus(value: Code) {
      this._content["participantStatus"] = value;
    }

    get participantStatus(): Code {
      return this._content["participantStatus"] as Code;
    }

    /** Role of participant in the appointment. */
    set participantType(value: Array<CodeableConcept>) {
      this._content["participantType"] = value;
    }

    get participantType(): Array<CodeableConcept> {
      return this._content["participantType"] as Array<CodeableConcept>;
    }

    /**
     * Date/Time that the appointment is to take place, or requested new start
     * time.
     */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }
  }

  /** Base StructureDefinition for AuditEvent Resource */
  export class AuditEvent extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/AuditEvent";

    /**
     * Indicator for type of action performed during the event that generated
     * the audit.
     */
    set action(value: Code) {
      this._content["action"] = value;
    }

    get action(): Code {
      return this._content["action"] as Code;
    }

    /** An actor taking an active role in the event or activity that is logged. */
    set agent(value: Array<BackboneElement>) {
      this._content["agent"] = value;
    }

    get agent(): Array<BackboneElement> {
      return this._content["agent"] as Array<BackboneElement>;
    }

    /** Specific instances of data or objects that have been accessed. */
    set entity(value: Array<BackboneElement>) {
      this._content["entity"] = value;
    }

    get entity(): Array<BackboneElement> {
      return this._content["entity"] as Array<BackboneElement>;
    }

    /** Indicates whether the event succeeded or failed. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** A free text description of the outcome of the event. */
    set outcomeDesc(value: String) {
      this._content["outcomeDesc"] = value;
    }

    get outcomeDesc(): String {
      return this._content["outcomeDesc"] as String;
    }

    /** The purposeOfUse (reason) that was used during the event being recorded. */
    set purposeOfEvent(value: Array<CodeableConcept>) {
      this._content["purposeOfEvent"] = value;
    }

    get purposeOfEvent(): Array<CodeableConcept> {
      return this._content["purposeOfEvent"] as Array<CodeableConcept>;
    }

    /** The time when the event occurred on the source. */
    set recorded(value: Instant) {
      this._content["recorded"] = value;
    }

    get recorded(): Instant {
      return this._content["recorded"] as Instant;
    }

    /** The system that is reporting the event. */
    set source(value: BackboneElement) {
      this._content["source"] = value;
    }

    get source(): BackboneElement {
      return this._content["source"] as BackboneElement;
    }

    /** Identifier for the category of event. */
    set subtype(value: Array<Coding>) {
      this._content["subtype"] = value;
    }

    get subtype(): Array<Coding> {
      return this._content["subtype"] as Array<Coding>;
    }

    /**
     * Identifier for a family of the event. For example, a menu item, program,
     * rule, policy, function code, application name or URL. It identifies the
     * performed function.
     */
    set type(value: Coding) {
      this._content["type"] = value;
    }

    get type(): Coding {
      return this._content["type"] as Coding;
    }
  }

  /** Base StructureDefinition for Basic Resource */
  export class Basic extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Basic";

    /** Indicates who was responsible for creating the resource instance. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Identifies the 'type' of resource - equivalent to the resource name for
     * other resources.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Identifies when the resource was first created. */
    set created(value: Date) {
      this._content["created"] = value;
    }

    get created(): Date {
      return this._content["created"] as Date;
    }

    /**
     * Identifier assigned to the resource for business purposes, outside the
     * context of FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Identifies the patient, practitioner, device or any other resource that
     * is the "focus" of this resource.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for Binary Resource */
  export class Binary extends Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Binary";

    /** The actual content, base64 encoded. */
    set content(value: Base64Binary) {
      this._content["content"] = value;
    }

    get content(): Base64Binary {
      return this._content["content"] as Base64Binary;
    }

    /**
     * MimeType of the binary content represented as a standard MimeType (BCP
     * 13).
     */
    set contentType(value: Code) {
      this._content["contentType"] = value;
    }

    get contentType(): Code {
      return this._content["contentType"] as Code;
    }

    /**
     * Treat this binary as if it was this other resource for access control
     * purposes.
     */
    set securityContext(value: Reference) {
      this._content["securityContext"] = value;
    }

    get securityContext(): Reference {
      return this._content["securityContext"] as Reference;
    }
  }

  /** Base StructureDefinition for BodySite Resource */
  export class BodySite extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/BodySite";

    /** Whether this body site is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** Named anatomical location - ideally coded where possible. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A summary, charactarization or explanation of the anatomic location. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Identifier for this instance of the anatomical location. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Image or images used to identify a location. */
    set image(value: Array<Attachment>) {
      this._content["image"] = value;
    }

    get image(): Array<Attachment> {
      return this._content["image"] as Array<Attachment>;
    }

    /** The person to which the body site belongs. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Qualifier to refine the anatomical location. These include qualifiers for
     * laterality, relative location, directionality, number, and plane.
     */
    set qualifier(value: Array<CodeableConcept>) {
      this._content["qualifier"] = value;
    }

    get qualifier(): Array<CodeableConcept> {
      return this._content["qualifier"] as Array<CodeableConcept>;
    }
  }

  /** Base StructureDefinition for Bundle Resource */
  export class Bundle extends Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Bundle";

    /**
     * An entry in a bundle resource - will either contain a resource, or
     * information about a resource (transactions and history only).
     */
    set entry(value: Array<BackboneElement>) {
      this._content["entry"] = value;
    }

    get entry(): Array<BackboneElement> {
      return this._content["entry"] as Array<BackboneElement>;
    }

    /**
     * A persistent identifier for the batch that won't change as a batch is
     * copied from server to server.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** A series of links that provide context to this bundle. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** Digital Signature - base64 encoded. XML-DSIg or a JWT. */
    set signature(value: Signature) {
      this._content["signature"] = value;
    }

    get signature(): Signature {
      return this._content["signature"] as Signature;
    }

    /**
     * If a set of search matches, this is the total number of matches for the
     * search (as opposed to the number of results in this bundle).
     */
    set total(value: UnsignedInt) {
      this._content["total"] = value;
    }

    get total(): UnsignedInt {
      return this._content["total"] as UnsignedInt;
    }

    /** Indicates the purpose of this bundle - how it was intended to be used. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /** Base StructureDefinition for CapabilityStatement Resource */
  export class CapabilityStatement extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CapabilityStatement";

    /**
     * A code that indicates whether the application accepts unknown elements or
     * extensions when reading resources.
     */
    set acceptUnknown(value: Code) {
      this._content["acceptUnknown"] = value;
    }

    get acceptUnknown(): Code {
      return this._content["acceptUnknown"] as Code;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the capability statement and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the capability statement.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the capability statement was
     * published. The date must change if and when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the capability statement changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the capability statement from
     * a consumer's perspective. Typically, this is used when the capability
     * statement describes a desired rather than an actual solution, for example
     * as a formal expression of requirements as part of an RFP.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** A document definition. */
    set document(value: Array<BackboneElement>) {
      this._content["document"] = value;
    }

    get document(): Array<BackboneElement> {
      return this._content["document"] as Array<BackboneElement>;
    }

    /**
     * A boolean value to indicate that this capability statement is authored
     * for testing purposes (or education/evaluation/marketing), and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * The version of the FHIR specification on which this capability statement
     * is based.
     */
    set fhirVersion(value: Id) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Id {
      return this._content["fhirVersion"] as Id;
    }

    /**
     * A list of the formats supported by this implementation using their
     * content types.
     */
    set format(value: Array<Code>) {
      this._content["format"] = value;
    }

    get format(): Array<Code> {
      return this._content["format"] as Array<Code>;
    }

    /**
     * Identifies a specific implementation instance that is described by the
     * capability statement - i.e. a particular installation, rather than the
     * capabilities of a software program.
     */
    set implementation(value: BackboneElement) {
      this._content["implementation"] = value;
    }

    get implementation(): BackboneElement {
      return this._content["implementation"] as BackboneElement;
    }

    /**
     * A list of implementation guides that the server does (or should) support
     * in their entirety.
     */
    set implementationGuide(value: Array<Uri>) {
      this._content["implementationGuide"] = value;
    }

    get implementationGuide(): Array<Uri> {
      return this._content["implementationGuide"] as Array<Uri>;
    }

    /**
     * Reference to a canonical URL of another CapabilityStatement that this
     * software implements or uses. This capability statement is a published API
     * description that corresponds to a business service. The rest of the
     * capability statement does not need to repeat the details of the
     * referenced resource, but can do so.
     */
    set instantiates(value: Array<Uri>) {
      this._content["instantiates"] = value;
    }

    get instantiates(): Array<Uri> {
      return this._content["instantiates"] as Array<Uri>;
    }

    /**
     * A legal or geographic region in which the capability statement is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The way that this statement is intended to be used, to describe an actual
     * running instance of software, a particular product (kind not instance of
     * software) or a class of implementation (e.g. a desired purchase).
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** A description of the messaging capabilities of the solution. */
    set messaging(value: Array<BackboneElement>) {
      this._content["messaging"] = value;
    }

    get messaging(): Array<BackboneElement> {
      return this._content["messaging"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the capability statement. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A list of the patch formats supported by this implementation using their
     * content types.
     */
    set patchFormat(value: Array<Code>) {
      this._content["patchFormat"] = value;
    }

    get patchFormat(): Array<Code> {
      return this._content["patchFormat"] as Array<Code>;
    }

    /**
     * A list of profiles that represent different use cases supported by the
     * system. For a server, "supported by the system" means the system
     * hosts/produces a set of resources that are conformant to a particular
     * profile, and allows clients that use its services to search using this
     * profile and to find appropriate data. For a client, it means the system
     * will search by this profile and process data according to the guidance
     * implicit in the profile. See further discussion in [Using
     * Profiles](profiling.html#profile-uses).
     */
    set profile(value: Array<Reference>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Reference> {
      return this._content["profile"] as Array<Reference>;
    }

    /**
     * The name of the individual or organization that published the capability
     * statement.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this capability statement is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** A definition of the restful capabilities of the solution, if any. */
    set rest(value: Array<BackboneElement>) {
      this._content["rest"] = value;
    }

    get rest(): Array<BackboneElement> {
      return this._content["rest"] as Array<BackboneElement>;
    }

    /**
     * Software that is covered by this capability statement. It is used when
     * the capability statement describes the capabilities of a particular
     * software version, independent of an installation.
     */
    set software(value: BackboneElement) {
      this._content["software"] = value;
    }

    get software(): BackboneElement {
      return this._content["software"] as BackboneElement;
    }

    /**
     * The status of this capability statement. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the capability statement. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this capability statement when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this capability statement is (or will be) published. The URL SHOULD
     * include the major version of the capability statement. For more
     * information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate capability statement instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the capability
     * statement when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the capability statement
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for CarePlan Resource */
  export class CarePlan extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CarePlan";

    /**
     * Identifies a planned action to occur as part of the plan. For example, a
     * medication to be used, lab tests to perform, self-monitoring, education,
     * etc.
     */
    set activity(value: Array<BackboneElement>) {
      this._content["activity"] = value;
    }

    get activity(): Array<BackboneElement> {
      return this._content["activity"] as Array<BackboneElement>;
    }

    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose
     * management and/or mitigation are handled by this plan.
     */
    set addresses(value: Array<Reference>) {
      this._content["addresses"] = value;
    }

    get addresses(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    /**
     * Identifies the individual(s) or ogranization who is responsible for the
     * content of the care plan.
     */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /** A care plan that is fulfilled in whole or in part by this care plan. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Identifies all people and organizations who are expected to be involved
     * in the care envisioned by this plan.
     */
    set careTeam(value: Array<Reference>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<Reference> {
      return this._content["careTeam"] as Array<Reference>;
    }

    /**
     * Identifies what "kind" of plan this is to support differentiation between
     * multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma",
     * "disease management", "wellness plan", etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Identifies the original context in which this particular CarePlan was
     * created.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * Identifies the protocol, questionnaire, guideline or other specification
     * the care plan should be conducted in accordance with.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /** A description of the scope and nature of the plan. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Describes the intended objective(s) of carrying out the care plan. */
    set goal(value: Array<Reference>) {
      this._content["goal"] = value;
    }

    get goal(): Array<Reference> {
      return this._content["goal"] as Array<Reference>;
    }

    /**
     * This records identifiers associated with this care plan that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Indicates the level of authority/intentionality associated with the care
     * plan and where the care plan fits into the workflow chain.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /** General notes about the care plan not covered elsewhere. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A larger care plan of which this particular care plan is a component or
     * step.
     */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Indicates when the plan did (or is intended to) come into effect and end. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Completed or terminated care plan whose function is taken by this new
     * care plan.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * Indicates whether the plan is currently being acted upon, represents
     * future intentions or is now a historical record.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the patient or group whose intended care is described by the
     * plan.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Identifies portions of the patient's record that specifically influenced
     * the formation of the plan. These might include co-morbidities, recent
     * procedures, limitations, recent assessments, etc.
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }

    /** Human-friendly name for the CarePlan. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }
  }

  /** Base StructureDefinition for CareTeam Resource */
  export class CareTeam extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CareTeam";

    /**
     * Identifies what kind of team. This is to support differentiation between
     * multiple co-existing teams, such as care plan team, episode of care team,
     * longitudinal care team.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * care team.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * This records identifiers associated with this care team that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The organization responsible for the care team. */
    set managingOrganization(value: Array<Reference>) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Array<Reference> {
      return this._content["managingOrganization"] as Array<Reference>;
    }

    /**
     * A label for human use intended to distinguish like teams. E.g. the "red"
     * vs. "green" trauma teams.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Comments made about the CareTeam. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Identifies all people and organizations who are expected to be involved
     * in the care team.
     */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** Indicates when the team did (or is intended to) come into effect and end. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Describes why the care team exists. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Condition(s) that this care team addresses. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** Indicates the current state of the care team. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the patient or group whose intended care is handled by the
     * team.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for ChargeItem Resource */
  export class ChargeItem extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ChargeItem";

    /** Account into which this ChargeItems belongs. */
    set account(value: Array<Reference>) {
      this._content["account"] = value;
    }

    get account(): Array<Reference> {
      return this._content["account"] as Array<Reference>;
    }

    /** The anatomical location where the related service has been applied. */
    set bodysite(value: Array<CodeableConcept>) {
      this._content["bodysite"] = value;
    }

    get bodysite(): Array<CodeableConcept> {
      return this._content["bodysite"] as Array<CodeableConcept>;
    }

    /** A code that identifies the charge, like a billing code. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * event.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * References the source of pricing information, rules of application for
     * the code this ChargeItem uses.
     */
    set definition(value: Array<Uri>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Uri> {
      return this._content["definition"] as Array<Uri>;
    }

    /** Date the charge item was entered. */
    set enteredDate(value: DateTime) {
      this._content["enteredDate"] = value;
    }

    get enteredDate(): DateTime {
      return this._content["enteredDate"] as DateTime;
    }

    /** The device, practitioner, etc. who entered the charge item. */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /**
     * Factor overriding the factor determined by the rules associated with the
     * code.
     */
    set factorOverride(value: Decimal) {
      this._content["factorOverride"] = value;
    }

    get factorOverride(): Decimal {
      return this._content["factorOverride"] as Decimal;
    }

    /** Identifiers assigned to this event performer or other systems. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Comments made about the event by the performer, subject or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Date/time(s) or duration when the charged service was applied. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /**
     * If the list price or the rule based factor associated with the code is
     * overridden, this attribute can capture a text to indicate the reason for
     * this action.
     */
    set overrideReason(value: String) {
      this._content["overrideReason"] = value;
    }

    get overrideReason(): String {
      return this._content["overrideReason"] as String;
    }

    /** ChargeItems can be grouped to larger ChargeItems covering the whole set. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Indicates who or what performed or participated in the charged service. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** The organization requesting the service. */
    set performingOrganization(value: Reference) {
      this._content["performingOrganization"] = value;
    }

    get performingOrganization(): Reference {
      return this._content["performingOrganization"] as Reference;
    }

    /**
     * Total price of the charge overriding the list price associated with the
     * code.
     */
    set priceOverride(value: Money) {
      this._content["priceOverride"] = value;
    }

    get priceOverride(): Money {
      return this._content["priceOverride"] as Money;
    }

    /** Quantity of which the charge item has been serviced. */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /** Describes why the event occurred in coded or textual form. */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /** The organization performing the service. */
    set requestingOrganization(value: Reference) {
      this._content["requestingOrganization"] = value;
    }

    get requestingOrganization(): Reference {
      return this._content["requestingOrganization"] as Reference;
    }

    /** Indicated the rendered service that caused this charge. */
    set service(value: Array<Reference>) {
      this._content["service"] = value;
    }

    get service(): Array<Reference> {
      return this._content["service"] as Array<Reference>;
    }

    /** The current state of the ChargeItem. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The individual or set of individuals the action is being or was performed
     * on.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Further information supporting the this charge. */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for Claim Resource */
  export class Claim extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Claim";

    /** An accident which resulted in the need for healthcare services. */
    set accident(value: BackboneElement) {
      this._content["accident"] = value;
    }

    get accident(): BackboneElement {
      return this._content["accident"] as BackboneElement;
    }

    /** The billable period for which charges are being submitted. */
    set billablePeriod(value: Period) {
      this._content["billablePeriod"] = value;
    }

    get billablePeriod(): Period {
      return this._content["billablePeriod"] as Period;
    }

    /**
     * The members of the team who provided the overall service as well as their
     * role and whether responsible and qualifications.
     */
    set careTeam(value: Array<BackboneElement>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<BackboneElement> {
      return this._content["careTeam"] as Array<BackboneElement>;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** List of patient diagnosis for which care is sought. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /**
     * The start and optional end dates of when the patient was precluded from
     * working due to the treatable condition(s).
     */
    set employmentImpacted(value: Period) {
      this._content["employmentImpacted"] = value;
    }

    get employmentImpacted(): Period {
      return this._content["employmentImpacted"] as Period;
    }

    /**
     * Person who created the invoice/claim/pre-determination or
     * pre-authorization.
     */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** Facility where the services were provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /**
     * In the case of a Pre-Determination/Pre-Authorization the provider may
     * request that funds in the amount of the expected Benefit be reserved
     * ('Patient' or 'Provider') to pay for the Benefits determined on the
     * subsequent claim(s). 'None' explicitly indicates no funds reserving is
     * requested.
     */
    set fundsReserve(value: CodeableConcept) {
      this._content["fundsReserve"] = value;
    }

    get fundsReserve(): CodeableConcept {
      return this._content["fundsReserve"] as CodeableConcept;
    }

    /**
     * The start and optional end dates of when the patient was confined to a
     * treatment center.
     */
    set hospitalization(value: Period) {
      this._content["hospitalization"] = value;
    }

    get hospitalization(): Period {
      return this._content["hospitalization"] as Period;
    }

    /**
     * The business identifier for the instance: claim number, pre-determination
     * or pre-authorization number.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Additional information codes regarding exceptions, special
     * considerations, the condition, situation, prior or concurrent issues.
     * Often there are mutiple jurisdiction specific valuesets which are
     * required.
     */
    set information(value: Array<BackboneElement>) {
      this._content["information"] = value;
    }

    get information(): Array<BackboneElement> {
      return this._content["information"] as Array<BackboneElement>;
    }

    /** Financial instrument by which payment information for health care. */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /** The Insurer who is target of the request. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /** First tier of goods and services. */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * The organization which is responsible for the bill, claim
     * pre-determination, pre-authorization.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * Original prescription which has been superceded by this prescription to
     * support the dispensing of pharmacy services, medications or products. For
     * example, a physician may prescribe a medication which the pharmacy
     * determines is contraindicated, or for which the patient has an
     * intolerance, and therefor issues a new precription for an alternate
     * medication which has the same theraputic intent. The prescription from
     * the pharmacy becomes the 'prescription' and that from the physician
     * becomes the 'original prescription'.
     */
    set originalPrescription(value: Reference) {
      this._content["originalPrescription"] = value;
    }

    get originalPrescription(): Reference {
      return this._content["originalPrescription"] as Reference;
    }

    /** Patient Resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The party to be reimbursed for the services. */
    set payee(value: BackboneElement) {
      this._content["payee"] = value;
    }

    get payee(): BackboneElement {
      return this._content["payee"] as BackboneElement;
    }

    /** Prescription to support the dispensing of Pharmacy or Vision products. */
    set prescription(value: Reference) {
      this._content["prescription"] = value;
    }

    get prescription(): Reference {
      return this._content["prescription"] as Reference;
    }

    /** Immediate (STAT), best effort (NORMAL), deferred (DEFER). */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /** Ordered list of patient procedures performed to support the adjudication. */
    set procedure(value: Array<BackboneElement>) {
      this._content["procedure"] = value;
    }

    get procedure(): Array<BackboneElement> {
      return this._content["procedure"] as Array<BackboneElement>;
    }

    /**
     * The provider which is responsible for the bill, claim pre-determination,
     * pre-authorization.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /**
     * The referral resource which lists the date, practitioner, reason and
     * other supporting information.
     */
    set referral(value: Reference) {
      this._content["referral"] = value;
    }

    get referral(): Reference {
      return this._content["referral"] as Reference;
    }

    /**
     * Other claims which are related to this claim such as prior claim versions
     * or for related services.
     */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A finer grained suite of claim subtype codes which may convey Inpatient
     * vs Outpatient and/or a specialty service. In the US the BillType.
     */
    set subType(value: Array<CodeableConcept>) {
      this._content["subType"] = value;
    }

    get subType(): Array<CodeableConcept> {
      return this._content["subType"] as Array<CodeableConcept>;
    }

    /** The total value of the claim. */
    set total(value: Money) {
      this._content["total"] = value;
    }

    get total(): Money {
      return this._content["total"] as Money;
    }

    /**
     * The category of claim, eg, oral, pharmacy, vision, insitutional,
     * professional.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory
     * (Pre-determination).
     */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /** Base StructureDefinition for ClaimResponse Resource */
  export class ClaimResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClaimResponse";

    /** The first tier service adjudications for payor added services. */
    set addItem(value: Array<BackboneElement>) {
      this._content["addItem"] = value;
    }

    get addItem(): Array<BackboneElement> {
      return this._content["addItem"] as Array<BackboneElement>;
    }

    /**
     * Request for additional supporting or authorizing information, such as:
     * documents, images or resources.
     */
    set communicationRequest(value: Array<Reference>) {
      this._content["communicationRequest"] = value;
    }

    get communicationRequest(): Array<Reference> {
      return this._content["communicationRequest"] as Array<Reference>;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Mutually exclusive with Services Provided (Item). */
    set error(value: Array<BackboneElement>) {
      this._content["error"] = value;
    }

    get error(): Array<BackboneElement> {
      return this._content["error"] as Array<BackboneElement>;
    }

    /** The form to be used for printing the content. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Financial instrument by which payment information for health care. */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /** The Insurer who produced this adjudicated response. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /** The first tier service adjudications for submitted services. */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /** Processing outcome errror, partial or complete processing. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** Patient Resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Party to be reimbursed: Subscriber, provider, other. */
    set payeeType(value: CodeableConcept) {
      this._content["payeeType"] = value;
    }

    get payeeType(): CodeableConcept {
      return this._content["payeeType"] as CodeableConcept;
    }

    /** Payment details for the claim if the claim has been paid. */
    set payment(value: BackboneElement) {
      this._content["payment"] = value;
    }

    get payment(): BackboneElement {
      return this._content["payment"] as BackboneElement;
    }

    /** Note text. */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /** Original request resource referrence. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** Status of funds reservation (For provider, for Patient, None). */
    set reserved(value: Coding) {
      this._content["reserved"] = value;
    }

    get reserved(): Coding {
      return this._content["reserved"] as Coding;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Total amount of benefit payable (Equal to sum of the Benefit amounts from
     * all detail lines and additions less the Unallocated Deductible).
     */
    set totalBenefit(value: Money) {
      this._content["totalBenefit"] = value;
    }

    get totalBenefit(): Money {
      return this._content["totalBenefit"] as Money;
    }

    /** The total cost of the services reported. */
    set totalCost(value: Money) {
      this._content["totalCost"] = value;
    }

    get totalCost(): Money {
      return this._content["totalCost"] as Money;
    }

    /**
     * The amount of deductible applied which was not allocated to any
     * particular service line.
     */
    set unallocDeductable(value: Money) {
      this._content["unallocDeductable"] = value;
    }

    get unallocDeductable(): Money {
      return this._content["unallocDeductable"] as Money;
    }
  }

  /** Base StructureDefinition for ClinicalImpression Resource */
  export class ClinicalImpression extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClinicalImpression";

    /** Action taken as part of assessment procedure. */
    set action(value: Array<Reference>) {
      this._content["action"] = value;
    }

    get action(): Array<Reference> {
      return this._content["action"] as Array<Reference>;
    }

    /** The clinician performing the assessment. */
    set assessor(value: Reference) {
      this._content["assessor"] = value;
    }

    get assessor(): Reference {
      return this._content["assessor"] as Reference;
    }

    /** Categorizes the type of clinical assessment performed. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** The encounter or episode of care this impression was created as part of. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** Indicates when the documentation of the assessment was complete. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A summary of the context and/or cause of the assessment - why / where was
     * it performed, and what patient events/status prompted it.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** The point in time or period over which the subject was assessed. */
    set effective(value: DateTime) {
      this._content["effective"] = value;
    }

    get effective(): DateTime {
      return this._content["effective"] as DateTime;
    }

    /**
     * Specific findings or diagnoses that was considered likely or relevant to
     * ongoing treatment.
     */
    set finding(value: Array<BackboneElement>) {
      this._content["finding"] = value;
    }

    get finding(): Array<BackboneElement> {
      return this._content["finding"] as Array<BackboneElement>;
    }

    /**
     * A unique identifier assigned to the clinical impression that remains
     * consistent regardless of what server the impression is stored on.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * One or more sets of investigations (signs, symptions, etc.). The actual
     * grouping of investigations vary greatly depending on the type and context
     * of the assessment. These investigations may include data generated during
     * the assessment process, or data previously generated and recorded that is
     * pertinent to the outcomes.
     */
    set investigation(value: Array<BackboneElement>) {
      this._content["investigation"] = value;
    }

    get investigation(): Array<BackboneElement> {
      return this._content["investigation"] as Array<BackboneElement>;
    }

    /**
     * Commentary about the impression, typically recorded after the impression
     * itself was made, though supplemental notes by the original author could
     * also appear.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A reference to the last assesment that was conducted bon this patient.
     * Assessments are often/usually ongoing in nature; a care provider
     * (practitioner or team) will make new assessments on an ongoing basis as
     * new data arises or the patient's conditions changes.
     */
    set previous(value: Reference) {
      this._content["previous"] = value;
    }

    get previous(): Reference {
      return this._content["previous"] as Reference;
    }

    /** This a list of the relevant problems/conditions for a patient. */
    set problem(value: Array<Reference>) {
      this._content["problem"] = value;
    }

    get problem(): Array<Reference> {
      return this._content["problem"] as Array<Reference>;
    }

    /** Estimate of likely outcome. */
    set prognosisCodeableConcept(value: Array<CodeableConcept>) {
      this._content["prognosisCodeableConcept"] = value;
    }

    get prognosisCodeableConcept(): Array<CodeableConcept> {
      return this._content[
        "prognosisCodeableConcept"
      ] as Array<CodeableConcept>;
    }

    /** RiskAssessment expressing likely outcome. */
    set prognosisReference(value: Array<Reference>) {
      this._content["prognosisReference"] = value;
    }

    get prognosisReference(): Array<Reference> {
      return this._content["prognosisReference"] as Array<Reference>;
    }

    /**
     * Reference to a specific published clinical protocol that was followed
     * during this assessment, and/or that provides evidence in support of the
     * diagnosis.
     */
    set protocol(value: Array<Uri>) {
      this._content["protocol"] = value;
    }

    get protocol(): Array<Uri> {
      return this._content["protocol"] as Array<Uri>;
    }

    /** Identifies the workflow status of the assessment. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient or group of individuals assessed as part of this record. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** A text summary of the investigations and the diagnosis. */
    set summary(value: String) {
      this._content["summary"] = value;
    }

    get summary(): String {
      return this._content["summary"] as String;
    }
  }

  /** Base StructureDefinition for CodeSystem Resource */
  export class CodeSystem extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CodeSystem";

    /**
     * If code comparison is case sensitive when codes within this system are
     * compared to each other.
     */
    set caseSensitive(value: Boolean) {
      this._content["caseSensitive"] = value;
    }

    get caseSensitive(): Boolean {
      return this._content["caseSensitive"] as Boolean;
    }

    /** True If code system defines a post-composition grammar. */
    set compositional(value: Boolean) {
      this._content["compositional"] = value;
    }

    get compositional(): Boolean {
      return this._content["compositional"] as Boolean;
    }

    /**
     * Concepts that are in the code system. The concept definitions are
     * inherently hierarchical, but the definitions must be consulted to
     * determine what the meaning of the hierarchical relationships are.
     */
    set concept(value: Array<BackboneElement>) {
      this._content["concept"] = value;
    }

    get concept(): Array<BackboneElement> {
      return this._content["concept"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * How much of the content of the code system - the concepts and codes it
     * defines - are represented in this resource.
     */
    set content(value: Code) {
      this._content["content"] = value;
    }

    get content(): Code {
      return this._content["content"] as Code;
    }

    /**
     * A copyright statement relating to the code system and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the code system.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The total number of concepts defined by the code system. Where the code
     * system has a compositional grammar, the count refers to the number of
     * base (primitive) concepts.
     */
    set count(value: UnsignedInt) {
      this._content["count"] = value;
    }

    get count(): UnsignedInt {
      return this._content["count"] as UnsignedInt;
    }

    /**
     * The date (and optionally time) when the code system was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the code system changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the code system from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this code system is authored for testing
     * purposes (or education/evaluation/marketing), and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A filter that can be used in a value set compose statement when selecting
     * concepts using a filter.
     */
    set filter(value: Array<BackboneElement>) {
      this._content["filter"] = value;
    }

    get filter(): Array<BackboneElement> {
      return this._content["filter"] as Array<BackboneElement>;
    }

    /** The meaning of the hierarchy of concepts. */
    set hierarchyMeaning(value: Code) {
      this._content["hierarchyMeaning"] = value;
    }

    get hierarchyMeaning(): Code {
      return this._content["hierarchyMeaning"] as Code;
    }

    /**
     * A formal identifier that is used to identify this code system when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A legal or geographic region in which the code system is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the code system. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A property defines an additional slot through which additional
     * information can be provided about a concept.
     */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the code
     * system.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this code system is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this code system. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the code system. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this code system when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this code system is (or will be) published. The URL SHOULD include the
     * major version of the code system. For more information see [Technical and
     * Business Versions](resource.html#versions). This is used in
     * [Coding]{datatypes.html#Coding}.system.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate code system instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /** Canonical URL of value set that contains the entire code system. */
    set valueSet(value: Uri) {
      this._content["valueSet"] = value;
    }

    get valueSet(): Uri {
      return this._content["valueSet"] as Uri;
    }

    /**
     * The identifier that is used to identify this version of the code system
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the code system author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     * This is used in [Coding]{datatypes.html#Coding}.version.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * This flag is used to signify that the code system has not (or does not)
     * maintain the definitions, and a version must be specified when
     * referencing this code system.
     */
    set versionNeeded(value: Boolean) {
      this._content["versionNeeded"] = value;
    }

    get versionNeeded(): Boolean {
      return this._content["versionNeeded"] as Boolean;
    }
  }

  /** Base StructureDefinition for Communication Resource */
  export class Communication extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/Communication";

    /**
     * An order, proposal or plan fulfilled in whole or in part by this
     * Communication.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The type of message conveyed such as alert, notification, reminder,
     * instruction, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** The encounter within which the communication was sent. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A protocol, guideline, or other definition that was adhered to in whole
     * or in part by this communication event.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * Identifiers associated with this Communication that are defined by
     * business processes and/ or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A channel that was used for this communication (e.g. email, fax). */
    set medium(value: Array<CodeableConcept>) {
      this._content["medium"] = value;
    }

    get medium(): Array<CodeableConcept> {
      return this._content["medium"] as Array<CodeableConcept>;
    }

    /**
     * If true, indicates that the described communication event did not
     * actually occur.
     */
    set notDone(value: Boolean) {
      this._content["notDone"] = value;
    }

    get notDone(): Boolean {
      return this._content["notDone"] as Boolean;
    }

    /**
     * Describes why the communication event did not occur in coded and/or
     * textual form.
     */
    set notDoneReason(value: CodeableConcept) {
      this._content["notDoneReason"] = value;
    }

    get notDoneReason(): CodeableConcept {
      return this._content["notDoneReason"] as CodeableConcept;
    }

    /**
     * Additional notes or commentary about the communication by the sender,
     * receiver or other interested parties.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Part of this action. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Text, attachment(s), or resource(s) that was communicated to the
     * recipient.
     */
    set payload(value: Array<BackboneElement>) {
      this._content["payload"] = value;
    }

    get payload(): Array<BackboneElement> {
      return this._content["payload"] as Array<BackboneElement>;
    }

    /** The reason or justification for the communication. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this communication. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** The time when this communication arrived at the destination. */
    set received(value: DateTime) {
      this._content["received"] = value;
    }

    get received(): DateTime {
      return this._content["received"] as DateTime;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which was the target of the communication. If receipts need to be
     * tracked by individual, a separate resource instance will need to be
     * created for each recipient. Multiple recipient communications are
     * intended where either a receipt(s) is not tracked (e.g. a mass mail-out)
     * or is captured in aggregate (all emails confirmed received by a
     * particular time).
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which was the source of the communication.
     */
    set sender(value: Reference) {
      this._content["sender"] = value;
    }

    get sender(): Reference {
      return this._content["sender"] as Reference;
    }

    /** The time when this communication was sent. */
    set sent(value: DateTime) {
      this._content["sent"] = value;
    }

    get sent(): DateTime {
      return this._content["sent"] as DateTime;
    }

    /** The status of the transmission. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient or group that was the focus of this communication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The resources which were responsible for or related to producing this
     * communication.
     */
    set topic(value: Array<Reference>) {
      this._content["topic"] = value;
    }

    get topic(): Array<Reference> {
      return this._content["topic"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for CommunicationRequest Resource */
  export class CommunicationRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CommunicationRequest";

    /**
     * For draft requests, indicates the date of initial creation. For requests
     * with other statuses, indicates the date of activation.
     */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /** A plan or proposal that is fulfilled in whole or in part by this request. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The type of message to be sent such as alert, notification, reminder,
     * instruction, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The encounter or episode of care within which the communication request
     * was created.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A shared identifier common to all requests that were authorized more or
     * less simultaneously by a single author, representing the identifier of
     * the requisition, prescription or similar form.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * A unique ID of this request for reference purposes. It must be provided
     * if user wants it returned as part of any output, otherwise it will be
     * autogenerated, if needed, by CDS system. Does not need to be the actual
     * ID of the source system.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A channel that was used for this communication (e.g. email, fax). */
    set medium(value: Array<CodeableConcept>) {
      this._content["medium"] = value;
    }

    get medium(): Array<CodeableConcept> {
      return this._content["medium"] as Array<CodeableConcept>;
    }

    /**
     * Comments made about the request by the requester, sender, recipient,
     * subject or other participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The time when this communication is to occur. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /** Text, attachment(s), or resource(s) to be communicated to the recipient. */
    set payload(value: Array<BackboneElement>) {
      this._content["payload"] = value;
    }

    get payload(): Array<BackboneElement> {
      return this._content["payload"] as Array<BackboneElement>;
    }

    /**
     * Characterizes how quickly the proposed act must be initiated. Includes
     * concepts such as stat, urgent, routine.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** Describes why the request is being made in coded or textual form. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this request. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system,
     * device, group, or care team) which is the intended target of the
     * communication.
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * Completed or terminated request(s) whose function is taken by this new
     * request.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which is to be the source of the communication.
     */
    set sender(value: Reference) {
      this._content["sender"] = value;
    }

    get sender(): Reference {
      return this._content["sender"] as Reference;
    }

    /** The status of the proposal or order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient or group that is the focus of this communication request. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The resources which were related to producing this communication request. */
    set topic(value: Array<Reference>) {
      this._content["topic"] = value;
    }

    get topic(): Array<Reference> {
      return this._content["topic"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for CompartmentDefinition Resource */
  export class CompartmentDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CompartmentDefinition";

    /** Which compartment this definition describes. */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the compartment definition was
     * published. The date must change if and when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the compartment definition
     * changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the compartment definition
     * from a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this compartment definition is authored
     * for testing purposes (or education/evaluation/marketing), and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A legal or geographic region in which the compartment definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the compartment definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the compartment
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this compartment definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** Information about how a resource is related to the compartment. */
    set resource(value: Array<BackboneElement>) {
      this._content["resource"] = value;
    }

    get resource(): Array<BackboneElement> {
      return this._content["resource"] as Array<BackboneElement>;
    }

    /** Whether the search syntax is supported,. */
    set search(value: Boolean) {
      this._content["search"] = value;
    }

    get search(): Boolean {
      return this._content["search"] as Boolean;
    }

    /**
     * The status of this compartment definition. Enables tracking the
     * life-cycle of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the compartment definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this compartment definition when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this compartment definition is (or will be) published. The URL
     * SHOULD include the major version of the compartment definition. For more
     * information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate compartment definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }
  }

  /** Base StructureDefinition for Composition Resource */
  export class Composition extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Composition";

    /**
     * A participant who has attested to the accuracy of the
     * composition/document.
     */
    set attester(value: Array<BackboneElement>) {
      this._content["attester"] = value;
    }

    get attester(): Array<BackboneElement> {
      return this._content["attester"] as Array<BackboneElement>;
    }

    /**
     * Identifies who is responsible for the information in the composition, not
     * necessarily who typed it in.
     */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * A categorization for the type of the composition - helps for indexing and
     * searching. This may be implied by or derived from the code specified in
     * the Composition Type.
     */
    set class(value: CodeableConcept) {
      this._content["class"] = value;
    }

    get class(): CodeableConcept {
      return this._content["class"] as CodeableConcept;
    }

    /** The code specifying the level of confidentiality of the Composition. */
    set confidentiality(value: Code) {
      this._content["confidentiality"] = value;
    }

    get confidentiality(): Code {
      return this._content["confidentiality"] as Code;
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the composition/document information.
     */
    set custodian(value: Reference) {
      this._content["custodian"] = value;
    }

    get custodian(): Reference {
      return this._content["custodian"] as Reference;
    }

    /**
     * The composition editing time, when the composition was last logically
     * changed by the author.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Describes the clinical encounter or type of care this documentation is
     * associated with.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The clinical service, such as a colonoscopy or an appendectomy, being
     * documented.
     */
    set event(value: Array<BackboneElement>) {
      this._content["event"] = value;
    }

    get event(): Array<BackboneElement> {
      return this._content["event"] as Array<BackboneElement>;
    }

    /**
     * Logical identifier for the composition, assigned when created. This
     * identifier stays constant as the composition is changed over time.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Relationships that this composition has with other compositions or
     * documents that already exist.
     */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /** The root of the sections that make up the composition. */
    set section(value: Array<BackboneElement>) {
      this._content["section"] = value;
    }

    get section(): Array<BackboneElement> {
      return this._content["section"] as Array<BackboneElement>;
    }

    /**
     * The workflow/clinical status of this composition. The status is a marker
     * for the clinical standing of the document.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Who or what the composition is about. The composition can be about a
     * person, (patient or healthcare practitioner), a device (e.g. a machine)
     * or even a group of subjects (such as a document about a herd of
     * livestock, or a set of patients that share a common exposure).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Official human-readable label for the composition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Specifies the particular kind of composition (e.g. History and Physical,
     * Discharge Summary, Progress Note). This usually equates to the purpose of
     * making the composition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for ConceptMap Resource */
  export class ConceptMap extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ConceptMap";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the concept map and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the concept map.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the concept map was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the concept map changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the concept map from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this concept map is authored for testing
     * purposes (or education/evaluation/marketing), and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** A group of mappings that all have the same source and target system. */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this concept map when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A legal or geographic region in which the concept map is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the concept map. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the concept
     * map.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this concept map is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** The source value set that specifies the concepts that are being mapped. */
    set source(value: Uri) {
      this._content["source"] = value;
    }

    get source(): Uri {
      return this._content["source"] as Uri;
    }

    /**
     * The status of this concept map. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The target value set provides context to the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the value
     * set provides important context about how the concept mapping choices are
     * made.
     */
    set target(value: Uri) {
      this._content["target"] = value;
    }

    get target(): Uri {
      return this._content["target"] as Uri;
    }

    /** A short, descriptive, user-friendly title for the concept map. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this concept map when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this concept map is (or will be) published. The URL SHOULD include the
     * major version of the concept map. For more information see [Technical and
     * Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate concept map instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the concept map
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the concept map author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Condition Resource */
  export class Condition extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Condition";

    /**
     * The date or estimated date that the condition resolved or went into
     * remission. This is called "abatement" because of the many overloaded
     * connotations associated with "remission" or "resolution" - Conditions are
     * never really resolved, but they can abate.
     */
    set abatement(value: DateTime) {
      this._content["abatement"] = value;
    }

    get abatement(): DateTime {
      return this._content["abatement"] as DateTime;
    }

    /**
     * The date on which the existance of the Condition was first asserted or
     * acknowledged.
     */
    set assertedDate(value: DateTime) {
      this._content["assertedDate"] = value;
    }

    get assertedDate(): DateTime {
      return this._content["assertedDate"] as DateTime;
    }

    /** Individual who is making the condition statement. */
    set asserter(value: Reference) {
      this._content["asserter"] = value;
    }

    get asserter(): Reference {
      return this._content["asserter"] as Reference;
    }

    /** The anatomical location where this condition manifests itself. */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /** A category assigned to the condition. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** The clinical status of the condition. */
    set clinicalStatus(value: Code) {
      this._content["clinicalStatus"] = value;
    }

    get clinicalStatus(): Code {
      return this._content["clinicalStatus"] as Code;
    }

    /** Identification of the condition, problem or diagnosis. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Encounter during which the condition was first asserted. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * Supporting Evidence / manifestations that are the basis on which this
     * condition is suspected or confirmed.
     */
    set evidence(value: Array<BackboneElement>) {
      this._content["evidence"] = value;
    }

    get evidence(): Array<BackboneElement> {
      return this._content["evidence"] as Array<BackboneElement>;
    }

    /**
     * This records identifiers associated with this condition that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Additional information about the Condition. This is a general
     * notes/comments entry for description of the Condition, its diagnosis and
     * prognosis.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Estimated or actual date or date-time the condition began, in the opinion
     * of the clinician.
     */
    set onset(value: DateTime) {
      this._content["onset"] = value;
    }

    get onset(): DateTime {
      return this._content["onset"] as DateTime;
    }

    /**
     * A subjective assessment of the severity of the condition as evaluated by
     * the clinician.
     */
    set severity(value: CodeableConcept) {
      this._content["severity"] = value;
    }

    get severity(): CodeableConcept {
      return this._content["severity"] as CodeableConcept;
    }

    /**
     * Clinical stage or grade of a condition. May include formal severity
     * assessments.
     */
    set stage(value: BackboneElement) {
      this._content["stage"] = value;
    }

    get stage(): BackboneElement {
      return this._content["stage"] as BackboneElement;
    }

    /**
     * Indicates the patient or group who the condition record is associated
     * with.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The verification status to support the clinical status of the condition. */
    set verificationStatus(value: Code) {
      this._content["verificationStatus"] = value;
    }

    get verificationStatus(): Code {
      return this._content["verificationStatus"] as Code;
    }
  }

  /** Base StructureDefinition for Consent Resource */
  export class Consent extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Consent";

    /** Actions controlled by this consent. */
    set action(value: Array<CodeableConcept>) {
      this._content["action"] = value;
    }

    get action(): Array<CodeableConcept> {
      return this._content["action"] as Array<CodeableConcept>;
    }

    /**
     * Who or what is controlled by this consent. Use group to identify a set of
     * actors by some property they share (e.g. 'admitting officers').
     */
    set actor(value: Array<BackboneElement>) {
      this._content["actor"] = value;
    }

    get actor(): Array<BackboneElement> {
      return this._content["actor"] as Array<BackboneElement>;
    }

    /**
     * A classification of the type of consents found in the statement. This
     * element supports indexing and retrieval of consent statements.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Either the Grantor, which is the entity responsible for granting the
     * rights listed in a Consent Directive or the Grantee, which is the entity
     * responsible for complying with the Consent Directive, including any
     * obligations or limitations on authorizations and enforcement of
     * prohibitions.
     */
    set consentingParty(value: Array<Reference>) {
      this._content["consentingParty"] = value;
    }

    get consentingParty(): Array<Reference> {
      return this._content["consentingParty"] as Array<Reference>;
    }

    /**
     * The resources controlled by this consent, if specific resources are
     * referenced.
     */
    set data(value: Array<BackboneElement>) {
      this._content["data"] = value;
    }

    get data(): Array<BackboneElement> {
      return this._content["data"] as Array<BackboneElement>;
    }

    /**
     * Clinical or Operational Relevant period of time that bounds the data
     * controlled by this consent.
     */
    set dataPeriod(value: Period) {
      this._content["dataPeriod"] = value;
    }

    get dataPeriod(): Period {
      return this._content["dataPeriod"] as Period;
    }

    /** When this Consent was issued / created / indexed. */
    set dateTime(value: DateTime) {
      this._content["dateTime"] = value;
    }

    get dateTime(): DateTime {
      return this._content["dateTime"] as DateTime;
    }

    /**
     * An exception to the base policy of this consent. An exception can be an
     * addition or removal of access permissions.
     */
    set except(value: Array<BackboneElement>) {
      this._content["except"] = value;
    }

    get except(): Array<BackboneElement> {
      return this._content["except"] as Array<BackboneElement>;
    }

    /** Unique identifier for this copy of the Consent Statement. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * The organization that manages the consent, and the framework within which
     * it is executed.
     */
    set organization(value: Array<Reference>) {
      this._content["organization"] = value;
    }

    get organization(): Array<Reference> {
      return this._content["organization"] as Array<Reference>;
    }

    /** The patient/healthcare consumer to whom this consent applies. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Relevant time or time-period when this Consent is applicable. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * The references to the policies that are included in this consent scope.
     * Policies may be organizational, but are often defined jurisdictionally,
     * or in law.
     */
    set policy(value: Array<BackboneElement>) {
      this._content["policy"] = value;
    }

    get policy(): Array<BackboneElement> {
      return this._content["policy"] as Array<BackboneElement>;
    }

    /** A referece to the specific computable policy. */
    set policyRule(value: Uri) {
      this._content["policyRule"] = value;
    }

    get policyRule(): Uri {
      return this._content["policyRule"] as Uri;
    }

    /**
     * The context of the activities a user is taking - why the user is
     * accessing the data - that are controlled by this consent.
     */
    set purpose(value: Array<Coding>) {
      this._content["purpose"] = value;
    }

    get purpose(): Array<Coding> {
      return this._content["purpose"] as Array<Coding>;
    }

    /**
     * A set of security labels that define which resources are controlled by
     * this consent. If more than one label is specified, all resources must
     * have all the specified labels.
     */
    set securityLabel(value: Array<Coding>) {
      this._content["securityLabel"] = value;
    }

    get securityLabel(): Array<Coding> {
      return this._content["securityLabel"] as Array<Coding>;
    }

    /**
     * The source on which this consent statement is based. The source might be
     * a scanned original paper form, or a reference to a consent that links
     * back to such a source, a reference to a document repository (e.g. XDS)
     * that stores the original consent document.
     */
    set source(value: Attachment) {
      this._content["source"] = value;
    }

    get source(): Attachment {
      return this._content["source"] as Attachment;
    }

    /** Indicates the current state of this consent. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Contract Resource */
  export class Contract extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Contract";

    /** Action stipulated by this Contract. */
    set action(value: Array<CodeableConcept>) {
      this._content["action"] = value;
    }

    get action(): Array<CodeableConcept> {
      return this._content["action"] as Array<CodeableConcept>;
    }

    /** Reason for action stipulated by this Contract. */
    set actionReason(value: Array<CodeableConcept>) {
      this._content["actionReason"] = value;
    }

    get actionReason(): Array<CodeableConcept> {
      return this._content["actionReason"] as Array<CodeableConcept>;
    }

    /**
     * An actor taking a role in an activity for which it can be assigned some
     * degree of responsibility for the activity taking place.
     */
    set agent(value: Array<BackboneElement>) {
      this._content["agent"] = value;
    }

    get agent(): Array<BackboneElement> {
      return this._content["agent"] as Array<BackboneElement>;
    }

    /** Relevant time or time-period when this Contract is applicable. */
    set applies(value: Period) {
      this._content["applies"] = value;
    }

    get applies(): Period {
      return this._content["applies"] as Period;
    }

    /**
     * A formally or informally recognized grouping of people, principals,
     * organizations, or jurisdictions formed for the purpose of achieving some
     * form of collective action such as the promulgation, administration and
     * enforcement of contracts and policies.
     */
    set authority(value: Array<Reference>) {
      this._content["authority"] = value;
    }

    get authority(): Array<Reference> {
      return this._content["authority"] as Array<Reference>;
    }

    /**
     * Legally binding Contract: This is the signed and legally recognized
     * representation of the Contract, which is considered the "source of truth"
     * and which would be the basis for legal action related to enforcement of
     * this Contract.
     */
    set binding(value: Attachment) {
      this._content["binding"] = value;
    }

    get binding(): Attachment {
      return this._content["binding"] as Attachment;
    }

    /**
     * The minimal content derived from the basal information source at a
     * specific stage in its lifecycle.
     */
    set contentDerivative(value: CodeableConcept) {
      this._content["contentDerivative"] = value;
    }

    get contentDerivative(): CodeableConcept {
      return this._content["contentDerivative"] as CodeableConcept;
    }

    /**
     * The type of decision made by a grantor with respect to an offer made by a
     * grantee.
     */
    set decisionType(value: CodeableConcept) {
      this._content["decisionType"] = value;
    }

    get decisionType(): CodeableConcept {
      return this._content["decisionType"] as CodeableConcept;
    }

    /**
     * Recognized governance framework or system operating with a circumscribed
     * scope in accordance with specified principles, policies, processes or
     * procedures for managing rights, actions, or behaviors of parties or
     * principals relative to resources.
     */
    set domain(value: Array<Reference>) {
      this._content["domain"] = value;
    }

    get domain(): Array<Reference> {
      return this._content["domain"] as Array<Reference>;
    }

    /**
     * The "patient friendly language" versionof the Contract in whole or in
     * parts. "Patient friendly language" means the representation of the
     * Contract and Contract Provisions in a manner that is readily accessible
     * and understandable by a layperson in accordance with best practices for
     * communication styles that ensure that those agreeing to or signing the
     * Contract understand the roles, actions, obligations, responsibilities,
     * and implication of the agreement.
     */
    set friendly(value: Array<BackboneElement>) {
      this._content["friendly"] = value;
    }

    get friendly(): Array<BackboneElement> {
      return this._content["friendly"] as Array<BackboneElement>;
    }

    /** Unique identifier for this Contract. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** When this Contract was issued. */
    set issued(value: DateTime) {
      this._content["issued"] = value;
    }

    get issued(): DateTime {
      return this._content["issued"] as DateTime;
    }

    /** List of Legal expressions or representations of this Contract. */
    set legal(value: Array<BackboneElement>) {
      this._content["legal"] = value;
    }

    get legal(): Array<BackboneElement> {
      return this._content["legal"] as Array<BackboneElement>;
    }

    /** List of Computable Policy Rule Language Representations of this Contract. */
    set rule(value: Array<BackboneElement>) {
      this._content["rule"] = value;
    }

    get rule(): Array<BackboneElement> {
      return this._content["rule"] as Array<BackboneElement>;
    }

    /**
     * A set of security labels that define which resources are controlled by
     * this consent. If more than one label is specified, all resources must
     * have all the specified labels.
     */
    set securityLabel(value: Array<Coding>) {
      this._content["securityLabel"] = value;
    }

    get securityLabel(): Array<Coding> {
      return this._content["securityLabel"] as Array<Coding>;
    }

    /**
     * Parties with legal standing in the Contract, including the principal
     * parties, the grantor(s) and grantee(s), which are any person or
     * organization bound by the contract, and any ancillary parties, which
     * facilitate the execution of the contract such as a notary or witness.
     */
    set signer(value: Array<BackboneElement>) {
      this._content["signer"] = value;
    }

    get signer(): Array<BackboneElement> {
      return this._content["signer"] as Array<BackboneElement>;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * More specific type or specialization of an overarching or more general
     * contract such as auto insurance, home owner insurance, prenupial
     * agreement, Advanced-Directive, or privacy consent.
     */
    set subType(value: Array<CodeableConcept>) {
      this._content["subType"] = value;
    }

    get subType(): Array<CodeableConcept> {
      return this._content["subType"] as Array<CodeableConcept>;
    }

    /** The target entity impacted by or of interest to parties to the agreement. */
    set subject(value: Array<Reference>) {
      this._content["subject"] = value;
    }

    get subject(): Array<Reference> {
      return this._content["subject"] as Array<Reference>;
    }

    /**
     * One or more Contract Provisions, which may be related and conveyed as a
     * group, and may contain nested groups.
     */
    set term(value: Array<BackboneElement>) {
      this._content["term"] = value;
    }

    get term(): Array<BackboneElement> {
      return this._content["term"] as Array<BackboneElement>;
    }

    /** The matter of concern in the context of this agreement. */
    set topic(value: Array<Reference>) {
      this._content["topic"] = value;
    }

    get topic(): Array<Reference> {
      return this._content["topic"] as Array<Reference>;
    }

    /**
     * Type of Contract such as an insurance policy, real estate contract, a
     * will, power of attorny, Privacy or Security policy , trust framework
     * agreement, etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** Contract Valued Item List. */
    set valuedItem(value: Array<BackboneElement>) {
      this._content["valuedItem"] = value;
    }

    get valuedItem(): Array<BackboneElement> {
      return this._content["valuedItem"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for Coverage Resource */
  export class Coverage extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Coverage";

    /**
     * The party who benefits from the insurance coverage., the patient when
     * services are provided.
     */
    set beneficiary(value: Reference) {
      this._content["beneficiary"] = value;
    }

    get beneficiary(): Reference {
      return this._content["beneficiary"] as Reference;
    }

    /** The policy(s) which constitute this insurance coverage. */
    set contract(value: Array<Reference>) {
      this._content["contract"] = value;
    }

    get contract(): Array<Reference> {
      return this._content["contract"] as Array<Reference>;
    }

    /** A unique identifier for a dependent under the coverage. */
    set dependent(value: String) {
      this._content["dependent"] = value;
    }

    get dependent(): String {
      return this._content["dependent"] as String;
    }

    /**
     * A suite of underwrite specific classifiers, for example may be used to
     * identify a class of coverage or employer group, Policy, Plan.
     */
    set grouping(value: BackboneElement) {
      this._content["grouping"] = value;
    }

    get grouping(): BackboneElement {
      return this._content["grouping"] as BackboneElement;
    }

    /**
     * The main (and possibly only) identifier for the coverage - often referred
     * to as a Member Id, Certificate number, Personal Health Number or Case ID.
     * May be constructed as the concatination of the Coverage.SubscriberID and
     * the Coverage.dependant.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The insurer-specific identifier for the insurer-defined network of
     * providers to which the beneficiary may seek treatment which will be
     * covered at the 'in-network' rate, otherwise 'out of network' terms and
     * conditions apply.
     */
    set network(value: String) {
      this._content["network"] = value;
    }

    get network(): String {
      return this._content["network"] as String;
    }

    /**
     * The order of applicability of this coverage relative to other coverages
     * which are currently inforce. Note, there may be gaps in the numbering and
     * this does not imply primary, secondard etc. as the specific positioning
     * of coverages depends upon the episode of care.
     */
    set order(value: PositiveInt) {
      this._content["order"] = value;
    }

    get order(): PositiveInt {
      return this._content["order"] as PositiveInt;
    }

    /**
     * The program or plan underwriter or payor including both insurance and
     * non-insurance agreements, such as patient-pay agreements. May provide
     * multiple identifiers such as insurance company identifier or business
     * identifier (BIN number).
     */
    set payor(value: Array<Reference>) {
      this._content["payor"] = value;
    }

    get payor(): Array<Reference> {
      return this._content["payor"] as Array<Reference>;
    }

    /**
     * Time period during which the coverage is in force. A missing start date
     * indicates the start date isn't known, a missing end date means the
     * coverage is continuing to be in force.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * The party who 'owns' the insurance policy, may be an individual,
     * corporation or the subscriber's employer.
     */
    set policyHolder(value: Reference) {
      this._content["policyHolder"] = value;
    }

    get policyHolder(): Reference {
      return this._content["policyHolder"] as Reference;
    }

    /** The relationship of beneficiary (patient) to the subscriber. */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /**
     * An optional counter for a particular instance of the identified coverage
     * which increments upon each renewal.
     */
    set sequence(value: String) {
      this._content["sequence"] = value;
    }

    get sequence(): String {
      return this._content["sequence"] as String;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The party who has signed-up for or 'owns' the contractual relationship to
     * the policy or to whom the benefit of the policy for services rendered to
     * them or their family is due.
     */
    set subscriber(value: Reference) {
      this._content["subscriber"] = value;
    }

    get subscriber(): Reference {
      return this._content["subscriber"] as Reference;
    }

    /** The insurer assigned ID for the Subscriber. */
    set subscriberId(value: String) {
      this._content["subscriberId"] = value;
    }

    get subscriberId(): String {
      return this._content["subscriberId"] as String;
    }

    /**
     * The type of coverage: social program, medical plan, accident coverage
     * (workers compensation, auto), group health or payment by an individual or
     * organization.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for DataElement Resource */
  export class DataElement extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/DataElement";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the data element and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the data element.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the data element was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the data element changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Defines the structure, type, allowed values and other constraining
     * characteristics of the data element.
     */
    set element(value: Array<ElementDefinition>) {
      this._content["element"] = value;
    }

    get element(): Array<ElementDefinition> {
      return this._content["element"] as Array<ElementDefinition>;
    }

    /**
     * A boolean value to indicate that this data element is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this data element when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the data element is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * Identifies a specification (other than a terminology) that the elements
     * which make up the DataElement have some correspondence with.
     */
    set mapping(value: Array<BackboneElement>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<BackboneElement> {
      return this._content["mapping"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the data element. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the data
     * element.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * The status of this data element. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Identifies how precise the data element is in its definition. */
    set stringency(value: Code) {
      this._content["stringency"] = value;
    }

    get stringency(): Code {
      return this._content["stringency"] as Code;
    }

    /** A short, descriptive, user-friendly title for the data element. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this data element when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this data element is (or will be) published. The URL SHOULD include the
     * major version of the data element. For more information see [Technical
     * and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate data element instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the data element
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the data element author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for DetectedIssue Resource */
  export class DetectedIssue extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DetectedIssue";

    /**
     * Individual or device responsible for the issue being raised. For example,
     * a decision support application or a pharmacist conducting a medication
     * review.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** Identifies the general type of issue identified. */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** The date or date-time when the detected issue was initially identified. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** A textual explanation of the detected issue. */
    set detail(value: String) {
      this._content["detail"] = value;
    }

    get detail(): String {
      return this._content["detail"] as String;
    }

    /** Business identifier associated with the detected issue record. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Indicates the resource representing the current activity or proposed
     * activity that is potentially problematic.
     */
    set implicated(value: Array<Reference>) {
      this._content["implicated"] = value;
    }

    get implicated(): Array<Reference> {
      return this._content["implicated"] as Array<Reference>;
    }

    /**
     * Indicates an action that has been taken or is committed to to reduce or
     * eliminate the likelihood of the risk identified by the detected issue
     * from manifesting. Can also reflect an observation of known mitigating
     * factors that may reduce/eliminate the need for any action.
     */
    set mitigation(value: Array<BackboneElement>) {
      this._content["mitigation"] = value;
    }

    get mitigation(): Array<BackboneElement> {
      return this._content["mitigation"] as Array<BackboneElement>;
    }

    /** Indicates the patient whose record the detected issue is associated with. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The literature, knowledge-base or similar reference that describes the
     * propensity for the detected issue identified.
     */
    set reference(value: Uri) {
      this._content["reference"] = value;
    }

    get reference(): Uri {
      return this._content["reference"] as Uri;
    }

    /**
     * Indicates the degree of importance associated with the identified issue
     * based on the potential impact on the patient.
     */
    set severity(value: Code) {
      this._content["severity"] = value;
    }

    get severity(): Code {
      return this._content["severity"] as Code;
    }

    /** Indicates the status of the detected issue. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Device Resource */
  export class Device extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Device";

    /**
     * Contact details for an organization or a particular human that is
     * responsible for the device.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /**
     * The date and time beyond which this device is no longer valid or should
     * not be used (if applicable).
     */
    set expirationDate(value: DateTime) {
      this._content["expirationDate"] = value;
    }

    get expirationDate(): DateTime {
      return this._content["expirationDate"] as DateTime;
    }

    /**
     * Unique instance identifiers assigned to a device by manufacturers other
     * organizations or owners.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The place where the device can be found. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Lot number assigned by the manufacturer. */
    set lotNumber(value: String) {
      this._content["lotNumber"] = value;
    }

    get lotNumber(): String {
      return this._content["lotNumber"] as String;
    }

    /** The date and time when the device was manufactured. */
    set manufactureDate(value: DateTime) {
      this._content["manufactureDate"] = value;
    }

    get manufactureDate(): DateTime {
      return this._content["manufactureDate"] as DateTime;
    }

    /** A name of the manufacturer. */
    set manufacturer(value: String) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): String {
      return this._content["manufacturer"] as String;
    }

    /**
     * The "model" is an identifier assigned by the manufacturer to identify the
     * product by its type. This number is shared by the all devices sold as the
     * same type.
     */
    set model(value: String) {
      this._content["model"] = value;
    }

    get model(): String {
      return this._content["model"] as String;
    }

    /**
     * Descriptive information, usage information or implantation information
     * that is not captured in an existing element.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * An organization that is responsible for the provision and ongoing
     * maintenance of the device.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** Patient information, If the device is affixed to a person. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Provides additional safety characteristics about a medical device. For
     * example devices containing latex.
     */
    set safety(value: Array<CodeableConcept>) {
      this._content["safety"] = value;
    }

    get safety(): Array<CodeableConcept> {
      return this._content["safety"] as Array<CodeableConcept>;
    }

    /** Status of the Device availability. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Code or identifier to identify a kind of device. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * [Unique device identifier (UDI)](device.html#5.11.3.2.2) assigned to
     * device label or package.
     */
    set udi(value: BackboneElement) {
      this._content["udi"] = value;
    }

    get udi(): BackboneElement {
      return this._content["udi"] as BackboneElement;
    }

    /** A network address on which the device may be contacted directly. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The version of the device, if the device has multiple releases under the
     * same model, or if the device is software or carries firmware.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for DeviceComponent Resource */
  export class DeviceComponent extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceComponent";

    /**
     * The locally assigned unique identification by the software. For example:
     * handle ID.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * The language code for the human-readable text string produced by the
     * device. This language code will follow the IETF language tag. Example:
     * en-US.
     */
    set languageCode(value: CodeableConcept) {
      this._content["languageCode"] = value;
    }

    get languageCode(): CodeableConcept {
      return this._content["languageCode"] as CodeableConcept;
    }

    /**
     * The timestamp for the most recent system change which includes device
     * configuration or setting change.
     */
    set lastSystemChange(value: Instant) {
      this._content["lastSystemChange"] = value;
    }

    get lastSystemChange(): Instant {
      return this._content["lastSystemChange"] as Instant;
    }

    /**
     * The physical principle of the measurement. For example: thermal,
     * chemical, acoustical, etc.
     */
    set measurementPrinciple(value: Code) {
      this._content["measurementPrinciple"] = value;
    }

    get measurementPrinciple(): Code {
      return this._content["measurementPrinciple"] as Code;
    }

    /**
     * The current operational status of the device. For example: On, Off,
     * Standby, etc.
     */
    set operationalStatus(value: Array<CodeableConcept>) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Array<CodeableConcept> {
      return this._content["operationalStatus"] as Array<CodeableConcept>;
    }

    /**
     * The parameter group supported by the current device component that is
     * based on some nomenclature, e.g. cardiovascular.
     */
    set parameterGroup(value: CodeableConcept) {
      this._content["parameterGroup"] = value;
    }

    get parameterGroup(): CodeableConcept {
      return this._content["parameterGroup"] as CodeableConcept;
    }

    /**
     * The link to the parent resource. For example: Channel is linked to its
     * VMD parent.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /**
     * The production specification such as component revision, serial number,
     * etc.
     */
    set productionSpecification(value: Array<BackboneElement>) {
      this._content["productionSpecification"] = value;
    }

    get productionSpecification(): Array<BackboneElement> {
      return this._content["productionSpecification"] as Array<BackboneElement>;
    }

    /**
     * The link to the source Device that contains administrative device
     * information such as manufacture, serial number, etc.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * The component type as defined in the object-oriented or metric
     * nomenclature partition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for DeviceMetric Resource */
  export class DeviceMetric extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/DeviceMetric";

    /**
     * Describes the calibrations that have been performed or that are required
     * to be performed.
     */
    set calibration(value: Array<BackboneElement>) {
      this._content["calibration"] = value;
    }

    get calibration(): Array<BackboneElement> {
      return this._content["calibration"] as Array<BackboneElement>;
    }

    /**
     * Indicates the category of the observation generation process. A
     * DeviceMetric can be for example a setting, measurement, or calculation.
     */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /**
     * Describes the color representation for the metric. This is often used to
     * aid clinicians to track and identify parameter types by color. In
     * practice, consider a Patient Monitor that has ECG/HR and Pleth for
     * example; the parameters are displayed in different characteristic colors,
     * such as HR-blue, BP-green, and PR and SpO2- magenta.
     */
    set color(value: Code) {
      this._content["color"] = value;
    }

    get color(): Code {
      return this._content["color"] as Code;
    }

    /**
     * Describes the unique identification of this metric that has been assigned
     * by the device or gateway software. For example: handle ID. It should be
     * noted that in order to make the identifier unique, the system element of
     * the identifier should be set to the unique identifier of the device.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Describes the measurement repetition time. This is not necessarily the
     * same as the update period. The measurement repetition time can range from
     * milliseconds up to hours. An example for a measurement repetition time in
     * the range of milliseconds is the sampling rate of an ECG. An example for
     * a measurement repetition time in the range of hours is a NIBP that is
     * triggered automatically every hour. The update period may be different
     * than the measurement repetition time, if the device does not update the
     * published observed value with the same frequency as it was measured.
     */
    set measurementPeriod(value: Timing) {
      this._content["measurementPeriod"] = value;
    }

    get measurementPeriod(): Timing {
      return this._content["measurementPeriod"] as Timing;
    }

    /**
     * Indicates current operational state of the device. For example: On, Off,
     * Standby, etc.
     */
    set operationalStatus(value: Code) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Code {
      return this._content["operationalStatus"] as Code;
    }

    /**
     * Describes the link to the DeviceComponent that this DeviceMetric belongs
     * to and that provide information about the location of this DeviceMetric
     * in the containment structure of the parent Device. An example would be a
     * DeviceComponent that represents a Channel. This reference can be used by
     * a client application to distinguish DeviceMetrics that have the same
     * type, but should be interpreted based on their containment location.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /**
     * Describes the link to the Device that this DeviceMetric belongs to and
     * that contains administrative device information such as manufacturer,
     * serial number, etc.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * Describes the type of the metric. For example: Heart Rate, PEEP Setting,
     * etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Describes the unit that an observed value determined for this metric will
     * have. For example: Percent, Seconds, etc.
     */
    set unit(value: CodeableConcept) {
      this._content["unit"] = value;
    }

    get unit(): CodeableConcept {
      return this._content["unit"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for DeviceRequest Resource */
  export class DeviceRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceRequest";

    /** When the request transitioned to being actionable. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /** Plan/proposal/order fulfilled by this request. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** The details of the device to be used. */
    set code(value: Reference) {
      this._content["code"] = value;
    }

    get code(): Reference {
      return this._content["code"] as Reference;
    }

    /**
     * An encounter that provides additional context in which this request is
     * made.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * Protocol or definition followed by this request. For example: The
     * proposed act must be performed if the indicated conditions occur, e.g..,
     * shortness of breath, SpO2 less than x%.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /** Composite request this is part of. */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /** Identifiers assigned to this order by the orderer or by the receiver. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    set intent(value: CodeableConcept) {
      this._content["intent"] = value;
    }

    get intent(): CodeableConcept {
      return this._content["intent"] as CodeableConcept;
    }

    /**
     * Details about this request that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated with
     * the statement.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. "Every 8 hours"; "Three
     * times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec
     * 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /** The desired perfomer for doing the diagnostic testing. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Desired type of performer for doing the diagnostic testing. */
    set performerType(value: CodeableConcept) {
      this._content["performerType"] = value;
    }

    get performerType(): CodeableConcept {
      return this._content["performerType"] as CodeableConcept;
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    set priorRequest(value: Array<Reference>) {
      this._content["priorRequest"] = value;
    }

    get priorRequest(): Array<Reference> {
      return this._content["priorRequest"] as Array<Reference>;
    }

    /**
     * Indicates how quickly the DeviceRequest should be addressed with respect
     * to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** Reason or justification for the use of this device. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Reason or justification for the use of this device. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** Key events in the history of the request. */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /** The status of the request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient who will use the device. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Additional clinical information about the patient that may influence the
     * request fulfilment. For example, this may includes body where on the
     * subject's the device will be used ( i.e. the target site).
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for DeviceUseStatement Resource */
  export class DeviceUseStatement extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceUseStatement";

    /**
     * Indicates the site on the subject's body where the device was used ( i.e.
     * the target site).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /** The details of the device used. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /** An external identifier for this statement such as an IRI. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Reason or justification for the use of the device. */
    set indication(value: Array<CodeableConcept>) {
      this._content["indication"] = value;
    }

    get indication(): Array<CodeableConcept> {
      return this._content["indication"] as Array<CodeableConcept>;
    }

    /**
     * Details about the device statement that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated with
     * the statement.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The time at which the statement was made/recorded. */
    set recordedOn(value: DateTime) {
      this._content["recordedOn"] = value;
    }

    get recordedOn(): DateTime {
      return this._content["recordedOn"] as DateTime;
    }

    /** Who reported the device was being used by the patient. */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the device used that this statement is about. Generally this
     * will be active or completed.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient who used the device. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** How often the device was used. */
    set timing(value: Timing) {
      this._content["timing"] = value;
    }

    get timing(): Timing {
      return this._content["timing"] as Timing;
    }

    /** The time period over which the device was used. */
    set whenUsed(value: Period) {
      this._content["whenUsed"] = value;
    }

    get whenUsed(): Period {
      return this._content["whenUsed"] as Period;
    }
  }

  /** Base StructureDefinition for DiagnosticReport Resource */
  export class DiagnosticReport extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DiagnosticReport";

    /** Details concerning a test or procedure requested. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * A code that classifies the clinical discipline, department or diagnostic
     * service that created the report (e.g. cardiology, biochemistry,
     * hematology, MRI). This is used for searching, sorting and display
     * purposes.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** A code or name that describes this diagnostic report. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Codes for the conclusion. */
    set codedDiagnosis(value: Array<CodeableConcept>) {
      this._content["codedDiagnosis"] = value;
    }

    get codedDiagnosis(): Array<CodeableConcept> {
      return this._content["codedDiagnosis"] as Array<CodeableConcept>;
    }

    /**
     * Concise and clinically contextualized impression / summary of the
     * diagnostic report.
     */
    set conclusion(value: String) {
      this._content["conclusion"] = value;
    }

    get conclusion(): String {
      return this._content["conclusion"] as String;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * which this DiagnosticReport per is about.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source of
     * the date/time is not known, only the date/time itself.
     */
    set effective(value: DateTime) {
      this._content["effective"] = value;
    }

    get effective(): DateTime {
      return this._content["effective"] as DateTime;
    }

    /** Identifiers assigned to this report by the performer or other systems. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A list of key images associated with this report. The images are
     * generally created during the diagnostic process, and may be directly of
     * the patient, or of treated specimens (i.e. slides of interest).
     */
    set image(value: Array<BackboneElement>) {
      this._content["image"] = value;
    }

    get image(): Array<BackboneElement> {
      return this._content["image"] as Array<BackboneElement>;
    }

    /**
     * One or more links to full details of any imaging performed during the
     * diagnostic investigation. Typically, this is imaging performed by DICOM
     * enabled modalities, but this is not required. A fully enabled PACS viewer
     * can use this information to provide views of the source images.
     */
    set imagingStudy(value: Array<Reference>) {
      this._content["imagingStudy"] = value;
    }

    get imagingStudy(): Array<Reference> {
      return this._content["imagingStudy"] as Array<Reference>;
    }

    /**
     * The date and time that this version of the report was released from the
     * source diagnostic service.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /** Indicates who or what participated in producing the report. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * Rich text representation of the entire result as issued by the diagnostic
     * service. Multiple formats are allowed but they SHALL be semantically
     * equivalent.
     */
    set presentedForm(value: Array<Attachment>) {
      this._content["presentedForm"] = value;
    }

    get presentedForm(): Array<Attachment> {
      return this._content["presentedForm"] as Array<Attachment>;
    }

    /**
     * Observations that are part of this diagnostic report. Observations can be
     * simple name/value pairs (e.g. "atomic" results), or they can be grouping
     * observations that include references to other members of the group (e.g.
     * "panels").
     */
    set result(value: Array<Reference>) {
      this._content["result"] = value;
    }

    get result(): Array<Reference> {
      return this._content["result"] as Array<Reference>;
    }

    /** Details about the specimens on which this diagnostic report is based. */
    set specimen(value: Array<Reference>) {
      this._content["specimen"] = value;
    }

    get specimen(): Array<Reference> {
      return this._content["specimen"] as Array<Reference>;
    }

    /** The status of the diagnostic report as a whole. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The subject of the report. Usually, but not always, this is a patient.
     * However diagnostic services also perform analyses on specimens collected
     * from a variety of other sources.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for DocumentManifest Resource */
  export class DocumentManifest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DocumentManifest";

    /**
     * Identifies who is responsible for creating the manifest, and adding
     * documents to it.
     */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /** The list of Documents included in the manifest. */
    set content(value: Array<BackboneElement>) {
      this._content["content"] = value;
    }

    get content(): Array<BackboneElement> {
      return this._content["content"] as Array<BackboneElement>;
    }

    /**
     * When the document manifest was created for submission to the server (not
     * necessarily the same thing as the actual resource last modified time,
     * since it may be modified, replicated, etc.).
     */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * Human-readable description of the source document. This is sometimes
     * known as the "title".
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Other identifiers associated with the document manifest, including
     * version independent identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A single identifier that uniquely identifies this manifest. Principally
     * used to refer to the manifest in non-FHIR contexts.
     */
    set masterIdentifier(value: Identifier) {
      this._content["masterIdentifier"] = value;
    }

    get masterIdentifier(): Identifier {
      return this._content["masterIdentifier"] as Identifier;
    }

    /**
     * A patient, practitioner, or organization for which this set of documents
     * is intended.
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /** Related identifiers or resources associated with the DocumentManifest. */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /**
     * Identifies the source system, application, or software that produced the
     * document manifest.
     */
    set source(value: Uri) {
      this._content["source"] = value;
    }

    get source(): Uri {
      return this._content["source"] as Uri;
    }

    /** The status of this document manifest. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Who or what the set of documents is about. The documents can be about a
     * person, (patient or healthcare practitioner), a device (i.e. machine) or
     * even a group of subjects (such as a document about a herd of farm
     * animals, or a set of patients that share a common exposure). If the
     * documents cross more than one subject, then more than one subject is
     * allowed here (unusual use case).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Specifies the kind of this set of documents (e.g. Patient Summary,
     * Discharge Summary, Prescription, etc.). The type of a set of documents
     * may be the same as one of the documents in it - especially if there is
     * only one - but it may be wider.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for DocumentReference Resource */
  export class DocumentReference extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DocumentReference";

    /** Which person or organization authenticates that this document is valid. */
    set authenticator(value: Reference) {
      this._content["authenticator"] = value;
    }

    get authenticator(): Reference {
      return this._content["authenticator"] as Reference;
    }

    /** Identifies who is responsible for adding the information to the document. */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * A categorization for the type of document referenced - helps for indexing
     * and searching. This may be implied by or derived from the code specified
     * in the DocumentReference.type.
     */
    set class(value: CodeableConcept) {
      this._content["class"] = value;
    }

    get class(): CodeableConcept {
      return this._content["class"] as CodeableConcept;
    }

    /**
     * The document and format referenced. There may be multiple content element
     * repetitions, each with a different format.
     */
    set content(value: Array<BackboneElement>) {
      this._content["content"] = value;
    }

    get content(): Array<BackboneElement> {
      return this._content["content"] as Array<BackboneElement>;
    }

    /** The clinical context in which the document was prepared. */
    set context(value: BackboneElement) {
      this._content["context"] = value;
    }

    get context(): BackboneElement {
      return this._content["context"] as BackboneElement;
    }

    /** When the document was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the document.
     */
    set custodian(value: Reference) {
      this._content["custodian"] = value;
    }

    get custodian(): Reference {
      return this._content["custodian"] as Reference;
    }

    /**
     * Human-readable description of the source document. This is sometimes
     * known as the "title".
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** The status of the underlying document. */
    set docStatus(value: Code) {
      this._content["docStatus"] = value;
    }

    get docStatus(): Code {
      return this._content["docStatus"] as Code;
    }

    /**
     * Other identifiers associated with the document, including version
     * independent identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** When the document reference was created. */
    set indexed(value: Instant) {
      this._content["indexed"] = value;
    }

    get indexed(): Instant {
      return this._content["indexed"] as Instant;
    }

    /**
     * Document identifier as assigned by the source of the document. This
     * identifier is specific to this version of the document. This unique
     * identifier may be used elsewhere to identify this version of the
     * document.
     */
    set masterIdentifier(value: Identifier) {
      this._content["masterIdentifier"] = value;
    }

    get masterIdentifier(): Identifier {
      return this._content["masterIdentifier"] as Identifier;
    }

    /**
     * Relationships that this document has with other document references that
     * already exist.
     */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /**
     * A set of Security-Tag codes specifying the level of privacy/security of
     * the Document. Note that DocumentReference.meta.security contains the
     * security labels of the "reference" to the document, while
     * DocumentReference.securityLabel contains a snapshot of the security
     * labels on the document the reference refers to.
     */
    set securityLabel(value: Array<CodeableConcept>) {
      this._content["securityLabel"] = value;
    }

    get securityLabel(): Array<CodeableConcept> {
      return this._content["securityLabel"] as Array<CodeableConcept>;
    }

    /** The status of this document reference. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Who or what the document is about. The document can be about a person,
     * (patient or healthcare practitioner), a device (e.g. a machine) or even a
     * group of subjects (such as a document about a herd of farm animals, or a
     * set of patients that share a common exposure).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Specifies the particular kind of document referenced (e.g. History and
     * Physical, Discharge Summary, Progress Note). This usually equates to the
     * purpose of making the document referenced.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for EligibilityRequest Resource */
  export class EligibilityRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EligibilityRequest";

    /** Dental, Vision, Medical, Pharmacy, Rehab etc. */
    set benefitCategory(value: CodeableConcept) {
      this._content["benefitCategory"] = value;
    }

    get benefitCategory(): CodeableConcept {
      return this._content["benefitCategory"] as CodeableConcept;
    }

    /** Dental: basic, major, ortho; Vision exam, glasses, contacts; etc. */
    set benefitSubCategory(value: CodeableConcept) {
      this._content["benefitSubCategory"] = value;
    }

    get benefitSubCategory(): CodeableConcept {
      return this._content["benefitSubCategory"] as CodeableConcept;
    }

    /**
     * The contract number of a business agreement which describes the terms and
     * conditions.
     */
    set businessArrangement(value: String) {
      this._content["businessArrangement"] = value;
    }

    get businessArrangement(): String {
      return this._content["businessArrangement"] as String;
    }

    /** Financial instrument by which payment information for health care. */
    set coverage(value: Reference) {
      this._content["coverage"] = value;
    }

    get coverage(): Reference {
      return this._content["coverage"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * Person who created the invoice/claim/pre-determination or
     * pre-authorization.
     */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** Facility where the services were provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The Insurer who is target of the request. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** Patient Resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Immediate (STAT), best effort (NORMAL), deferred (DEFER). */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /**
     * The date or dates when the enclosed suite of services were performed or
     * completed.
     */
    set serviced(value: Date) {
      this._content["serviced"] = value;
    }

    get serviced(): Date {
      return this._content["serviced"] as Date;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for EligibilityResponse Resource */
  export class EligibilityResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EligibilityResponse";

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Mutually exclusive with Services Provided (Item). */
    set error(value: Array<BackboneElement>) {
      this._content["error"] = value;
    }

    get error(): Array<BackboneElement> {
      return this._content["error"] as Array<BackboneElement>;
    }

    /** The form to be used for printing the content. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Flag indicating if the coverage provided is inforce currently if no
     * service date(s) specified or for the whole duration of the service
     * dates.
     */
    set inforce(value: Boolean) {
      this._content["inforce"] = value;
    }

    get inforce(): Boolean {
      return this._content["inforce"] as Boolean;
    }

    /**
     * The insurer may provide both the details for the requested coverage as
     * well as details for additional coverages known to the insurer.
     */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /** The Insurer who produced this adjudicated response. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /** Transaction status: error, complete. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Encounter Resource */
  export class Encounter extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Encounter";

    /** The set of accounts that may be used for billing for this Encounter. */
    set account(value: Array<Reference>) {
      this._content["account"] = value;
    }

    get account(): Array<Reference> {
      return this._content["account"] as Array<Reference>;
    }

    /** The appointment that scheduled this encounter. */
    set appointment(value: Reference) {
      this._content["appointment"] = value;
    }

    get appointment(): Reference {
      return this._content["appointment"] as Reference;
    }

    /** Inpatient | outpatient | ambulatory | emergency +. */
    set class(value: Coding) {
      this._content["class"] = value;
    }

    get class(): Coding {
      return this._content["class"] as Coding;
    }

    /**
     * The class history permits the tracking of the encounters transitions
     * without needing to go through the resource history.
     *
     * This would be used for a case where an admission starts of as an
     * emergency encounter, then transisions into an inpatient scenario. Doing
     * this and not restarting a new encounter ensures that any lab/diagnostic
     * results can more easily follow the patient and not require re-processing
     * and not get lost or cancelled during a kindof discharge from emergency to
     * inpatient.
     */
    set classHistory(value: Array<BackboneElement>) {
      this._content["classHistory"] = value;
    }

    get classHistory(): Array<BackboneElement> {
      return this._content["classHistory"] as Array<BackboneElement>;
    }

    /** The list of diagnosis relevant to this encounter. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /**
     * Where a specific encounter should be classified as a part of a specific
     * episode(s) of care this field should be used. This association can
     * facilitate grouping of related encounters together for a specific
     * purpose, such as government reporting, issue tracking, association via a
     * common problem. The association is recorded on the encounter as these are
     * typically created after the episode of care, and grouped on entry rather
     * than editing the episode of care to append another encounter to it (the
     * episode of care could span years).
     */
    set episodeOfCare(value: Array<Reference>) {
      this._content["episodeOfCare"] = value;
    }

    get episodeOfCare(): Array<Reference> {
      return this._content["episodeOfCare"] as Array<Reference>;
    }

    /** Details about the admission to a healthcare service. */
    set hospitalization(value: BackboneElement) {
      this._content["hospitalization"] = value;
    }

    get hospitalization(): BackboneElement {
      return this._content["hospitalization"] as BackboneElement;
    }

    /** Identifier(s) by which this encounter is known. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The referral request this encounter satisfies (incoming referral). */
    set incomingReferral(value: Array<Reference>) {
      this._content["incomingReferral"] = value;
    }

    get incomingReferral(): Array<Reference> {
      return this._content["incomingReferral"] as Array<Reference>;
    }

    /**
     * Quantity of time the encounter lasted. This excludes the time during
     * leaves of absence.
     */
    set length(value: Duration) {
      this._content["length"] = value;
    }

    get length(): Duration {
      return this._content["length"] as Duration;
    }

    /** List of locations where the patient has been during this encounter. */
    set location(value: Array<BackboneElement>) {
      this._content["location"] = value;
    }

    get location(): Array<BackboneElement> {
      return this._content["location"] as Array<BackboneElement>;
    }

    /**
     * Another Encounter of which this encounter is a part of (administratively
     * or in time).
     */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** The list of people responsible for providing the service. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** The start and end time of the encounter. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Indicates the urgency of the encounter. */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * Reason the encounter takes place, expressed as a code. For admissions,
     * this can be used for a coded admission diagnosis.
     */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /**
     * An organization that is in charge of maintaining the information of this
     * Encounter (e.g. who maintains the report or the master service catalog
     * item, etc.). This MAY be the same as the organization on the Patient
     * record, however it could be different. This MAY not be not the Service
     * Delivery Location's Organization.
     */
    set serviceProvider(value: Reference) {
      this._content["serviceProvider"] = value;
    }

    get serviceProvider(): Reference {
      return this._content["serviceProvider"] as Reference;
    }

    /**
     * Planned | arrived | triaged | in-progress | onleave | finished |
     * cancelled +.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The status history permits the encounter resource to contain the status
     * history without needing to read through the historical versions of the
     * resource, or even have the server store them.
     */
    set statusHistory(value: Array<BackboneElement>) {
      this._content["statusHistory"] = value;
    }

    get statusHistory(): Array<BackboneElement> {
      return this._content["statusHistory"] as Array<BackboneElement>;
    }

    /** The patient ro group present at the encounter. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care,
     * skilled nursing, rehabilitation).
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /** Base StructureDefinition for Endpoint Resource */
  export class Endpoint extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Endpoint";

    /** The uri that describes the actual end-point to connect to. */
    set address(value: Uri) {
      this._content["address"] = value;
    }

    get address(): Uri {
      return this._content["address"] as Uri;
    }

    /**
     * A coded value that represents the technical details of the usage of this
     * endpoint, such as what WSDLs should be used in what way. (e.g.
     * XDS.b/DICOM/cds-hook).
     */
    set connectionType(value: Coding) {
      this._content["connectionType"] = value;
    }

    get connectionType(): Coding {
      return this._content["connectionType"] as Coding;
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /** Additional headers / information to send as part of the notification. */
    set header(value: Array<String>) {
      this._content["header"] = value;
    }

    get header(): Array<String> {
      return this._content["header"] as Array<String>;
    }

    /**
     * Identifier for the organization that is used to identify the endpoint
     * across multiple disparate systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization that manages this endpoint (even if technically another
     * organisation is hosting this in the cloud, it is the organisation
     * associated with the data).
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** A friendly name that this endpoint can be referred to with. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The mime type to send the payload in - e.g. application/fhir+xml,
     * application/fhir+json. If the mime type is not specified, then the sender
     * could send any content (including no content depending on the
     * connectionType).
     */
    set payloadMimeType(value: Array<Code>) {
      this._content["payloadMimeType"] = value;
    }

    get payloadMimeType(): Array<Code> {
      return this._content["payloadMimeType"] as Array<Code>;
    }

    /**
     * The payload type describes the acceptable content that can be
     * communicated on the endpoint.
     */
    set payloadType(value: Array<CodeableConcept>) {
      this._content["payloadType"] = value;
    }

    get payloadType(): Array<CodeableConcept> {
      return this._content["payloadType"] as Array<CodeableConcept>;
    }

    /** The interval during which the endpoint is expected to be operational. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Active | suspended | error | off | test. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for EnrollmentRequest Resource */
  export class EnrollmentRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EnrollmentRequest";

    /** Reference to the program or plan identification, underwriter or payor. */
    set coverage(value: Reference) {
      this._content["coverage"] = value;
    }

    get coverage(): Reference {
      return this._content["coverage"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The Insurer who is target of the request. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Patient Resource. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for EnrollmentResponse Resource */
  export class EnrollmentResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EnrollmentResponse";

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** Processing status: error, complete. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for EpisodeOfCare Resource */
  export class EpisodeOfCare extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare";

    /** The set of accounts that may be used for billing for this EpisodeOfCare. */
    set account(value: Array<Reference>) {
      this._content["account"] = value;
    }

    get account(): Array<Reference> {
      return this._content["account"] as Array<Reference>;
    }

    /**
     * The practitioner that is the care manager/care co-ordinator for this
     * patient.
     */
    set careManager(value: Reference) {
      this._content["careManager"] = value;
    }

    get careManager(): Reference {
      return this._content["careManager"] as Reference;
    }

    /** The list of diagnosis relevant to this episode of care. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /**
     * The EpisodeOfCare may be known by different identifiers for different
     * contexts of use, such as when an external agency is tracking the Episode
     * for funding purposes.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization that has assumed the specific responsibilities for the
     * specified duration.
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** The patient who is the focus of this episode of care. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The interval during which the managing organization assumes the defined
     * responsibility.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
     * referrals.
     */
    set referralRequest(value: Array<Reference>) {
      this._content["referralRequest"] = value;
    }

    get referralRequest(): Array<Reference> {
      return this._content["referralRequest"] as Array<Reference>;
    }

    /** Planned | waitlist | active | onhold | finished | cancelled. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The history of statuses that the EpisodeOfCare has been through (without
     * requiring processing the history of the resource).
     */
    set statusHistory(value: Array<BackboneElement>) {
      this._content["statusHistory"] = value;
    }

    get statusHistory(): Array<BackboneElement> {
      return this._content["statusHistory"] as Array<BackboneElement>;
    }

    /**
     * The list of practitioners that may be facilitating this episode of care
     * for specific purposes.
     */
    set team(value: Array<Reference>) {
      this._content["team"] = value;
    }

    get team(): Array<Reference> {
      return this._content["team"] as Array<Reference>;
    }

    /**
     * A classification of the type of episode of care; e.g. specialist
     * referral, disease management, type of funded care.
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /** Base StructureDefinition for ExpansionProfile Resource */
  export class ExpansionProfile extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ExpansionProfile";

    /**
     * Controls whether inactive concepts are included or excluded in value set
     * expansions.
     */
    set activeOnly(value: Boolean) {
      this._content["activeOnly"] = value;
    }

    get activeOnly(): Boolean {
      return this._content["activeOnly"] as Boolean;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the expansion profile was published.
     * The date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the expansion profile changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the expansion profile from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A set of criteria that provide the constraints imposed on the value set
     * expansion by including or excluding designations.
     */
    set designation(value: BackboneElement) {
      this._content["designation"] = value;
    }

    get designation(): BackboneElement {
      return this._content["designation"] as BackboneElement;
    }

    /**
     * Specifies the language to be used for description in the expansions i.e.
     * the language to be used for ValueSet.expansion.contains.display.
     */
    set displayLanguage(value: Code) {
      this._content["displayLanguage"] = value;
    }

    get displayLanguage(): Code {
      return this._content["displayLanguage"] as Code;
    }

    /**
     * Controls whether or not the value set expansion nests codes or not (i.e.
     * ValueSet.expansion.contains.contains).
     */
    set excludeNested(value: Boolean) {
      this._content["excludeNested"] = value;
    }

    get excludeNested(): Boolean {
      return this._content["excludeNested"] as Boolean;
    }

    /**
     * Controls whether or not the value set expansion includes codes which
     * cannot be displayed in user interfaces.
     */
    set excludeNotForUI(value: Boolean) {
      this._content["excludeNotForUI"] = value;
    }

    get excludeNotForUI(): Boolean {
      return this._content["excludeNotForUI"] as Boolean;
    }

    /**
     * Controls whether or not the value set expansion includes post coordinated
     * codes.
     */
    set excludePostCoordinated(value: Boolean) {
      this._content["excludePostCoordinated"] = value;
    }

    get excludePostCoordinated(): Boolean {
      return this._content["excludePostCoordinated"] as Boolean;
    }

    /**
     * Code system, or a particular version of a code system to be excluded from
     * value set expansions.
     */
    set excludedSystem(value: BackboneElement) {
      this._content["excludedSystem"] = value;
    }

    get excludedSystem(): BackboneElement {
      return this._content["excludedSystem"] as BackboneElement;
    }

    /**
     * A boolean value to indicate that this expansion profile is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** Fix use of a particular code system to a particular version. */
    set fixedVersion(value: Array<BackboneElement>) {
      this._content["fixedVersion"] = value;
    }

    get fixedVersion(): Array<BackboneElement> {
      return this._content["fixedVersion"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this expansion profile when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Controls whether the value set definition is included or excluded in
     * value set expansions.
     */
    set includeDefinition(value: Boolean) {
      this._content["includeDefinition"] = value;
    }

    get includeDefinition(): Boolean {
      return this._content["includeDefinition"] as Boolean;
    }

    /**
     * Controls whether concept designations are to be included or excluded in
     * value set expansions.
     */
    set includeDesignations(value: Boolean) {
      this._content["includeDesignations"] = value;
    }

    get includeDesignations(): Boolean {
      return this._content["includeDesignations"] as Boolean;
    }

    /**
     * A legal or geographic region in which the expansion profile is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * If the value set being expanded is incomplete (because it is too big to
     * expand), return a limited expansion (a subset) with an indicator that
     * expansion is incomplete, using the extension
     * [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html).
     */
    set limitedExpansion(value: Boolean) {
      this._content["limitedExpansion"] = value;
    }

    get limitedExpansion(): Boolean {
      return this._content["limitedExpansion"] as Boolean;
    }

    /**
     * A natural language name identifying the expansion profile. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the expansion
     * profile.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * The status of this expansion profile. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An absolute URI that is used to identify this expansion profile when it
     * is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this expansion profile is (or will be) published. The URL SHOULD
     * include the major version of the expansion profile. For more information
     * see [Technical and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate expansion profile instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the expansion
     * profile when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the expansion profile
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for ExplanationOfBenefit Resource */
  export class ExplanationOfBenefit extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit";

    /** An accident which resulted in the need for healthcare services. */
    set accident(value: BackboneElement) {
      this._content["accident"] = value;
    }

    get accident(): BackboneElement {
      return this._content["accident"] as BackboneElement;
    }

    /** The first tier service adjudications for payor added services. */
    set addItem(value: Array<BackboneElement>) {
      this._content["addItem"] = value;
    }

    get addItem(): Array<BackboneElement> {
      return this._content["addItem"] as Array<BackboneElement>;
    }

    /** Balance by Benefit Category. */
    set benefitBalance(value: Array<BackboneElement>) {
      this._content["benefitBalance"] = value;
    }

    get benefitBalance(): Array<BackboneElement> {
      return this._content["benefitBalance"] as Array<BackboneElement>;
    }

    /** The billable period for which charges are being submitted. */
    set billablePeriod(value: Period) {
      this._content["billablePeriod"] = value;
    }

    get billablePeriod(): Period {
      return this._content["billablePeriod"] as Period;
    }

    /**
     * The members of the team who provided the overall service as well as their
     * role and whether responsible and qualifications.
     */
    set careTeam(value: Array<BackboneElement>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<BackboneElement> {
      return this._content["careTeam"] as Array<BackboneElement>;
    }

    /**
     * The business identifier for the instance: invoice number, claim number,
     * pre-determination or pre-authorization number.
     */
    set claim(value: Reference) {
      this._content["claim"] = value;
    }

    get claim(): Reference {
      return this._content["claim"] as Reference;
    }

    /**
     * The business identifier for the instance: invoice number, claim number,
     * pre-determination or pre-authorization number.
     */
    set claimResponse(value: Reference) {
      this._content["claimResponse"] = value;
    }

    get claimResponse(): Reference {
      return this._content["claimResponse"] as Reference;
    }

    /** The date when the EOB was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Ordered list of patient diagnosis for which care is sought. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /**
     * The start and optional end dates of when the patient was precluded from
     * working due to the treatable condition(s).
     */
    set employmentImpacted(value: Period) {
      this._content["employmentImpacted"] = value;
    }

    get employmentImpacted(): Period {
      return this._content["employmentImpacted"] as Period;
    }

    /** The person who created the explanation of benefit. */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** Facility where the services were provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /** The form to be used for printing the content. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /**
     * The start and optional end dates of when the patient was confined to a
     * treatment center.
     */
    set hospitalization(value: Period) {
      this._content["hospitalization"] = value;
    }

    get hospitalization(): Period {
      return this._content["hospitalization"] as Period;
    }

    /** The EOB Business Identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Additional information codes regarding exceptions, special
     * considerations, the condition, situation, prior or concurrent issues.
     * Often there are mutiple jurisdiction specific valuesets which are
     * required.
     */
    set information(value: Array<BackboneElement>) {
      this._content["information"] = value;
    }

    get information(): Array<BackboneElement> {
      return this._content["information"] as Array<BackboneElement>;
    }

    /** Financial instrument by which payment information for health care. */
    set insurance(value: BackboneElement) {
      this._content["insurance"] = value;
    }

    get insurance(): BackboneElement {
      return this._content["insurance"] as BackboneElement;
    }

    /** The insurer which is responsible for the explanation of benefit. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /** First tier of goods and services. */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /** The provider which is responsible for the claim. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * Original prescription which has been superceded by this prescription to
     * support the dispensing of pharmacy services, medications or products. For
     * example, a physician may prescribe a medication which the pharmacy
     * determines is contraindicated, or for which the patient has an
     * intolerance, and therefor issues a new precription for an alternate
     * medication which has the same theraputic intent. The prescription from
     * the pharmacy becomes the 'prescription' and that from the physician
     * becomes the 'original prescription'.
     */
    set originalPrescription(value: Reference) {
      this._content["originalPrescription"] = value;
    }

    get originalPrescription(): Reference {
      return this._content["originalPrescription"] as Reference;
    }

    /** Processing outcome errror, partial or complete processing. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** Patient Resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The party to be reimbursed for the services. */
    set payee(value: BackboneElement) {
      this._content["payee"] = value;
    }

    get payee(): BackboneElement {
      return this._content["payee"] as BackboneElement;
    }

    /** Payment details for the claim if the claim has been paid. */
    set payment(value: BackboneElement) {
      this._content["payment"] = value;
    }

    get payment(): BackboneElement {
      return this._content["payment"] as BackboneElement;
    }

    /** Precedence (primary, secondary, etc.). */
    set precedence(value: PositiveInt) {
      this._content["precedence"] = value;
    }

    get precedence(): PositiveInt {
      return this._content["precedence"] as PositiveInt;
    }

    /** Prescription to support the dispensing of Pharmacy or Vision products. */
    set prescription(value: Reference) {
      this._content["prescription"] = value;
    }

    get prescription(): Reference {
      return this._content["prescription"] as Reference;
    }

    /** Ordered list of patient procedures performed to support the adjudication. */
    set procedure(value: Array<BackboneElement>) {
      this._content["procedure"] = value;
    }

    get procedure(): Array<BackboneElement> {
      return this._content["procedure"] as Array<BackboneElement>;
    }

    /** Note text. */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /** The provider which is responsible for the claim. */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /**
     * The referral resource which lists the date, practitioner, reason and
     * other supporting information.
     */
    set referral(value: Reference) {
      this._content["referral"] = value;
    }

    get referral(): Reference {
      return this._content["referral"] as Reference;
    }

    /**
     * Other claims which are related to this claim such as prior claim versions
     * or for related services.
     */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A finer grained suite of claim subtype codes which may convey Inpatient
     * vs Outpatient and/or a specialty service. In the US the BillType.
     */
    set subType(value: Array<CodeableConcept>) {
      this._content["subType"] = value;
    }

    get subType(): Array<CodeableConcept> {
      return this._content["subType"] as Array<CodeableConcept>;
    }

    /**
     * Total amount of benefit payable (Equal to sum of the Benefit amounts from
     * all detail lines and additions less the Unallocated Deductable).
     */
    set totalBenefit(value: Money) {
      this._content["totalBenefit"] = value;
    }

    get totalBenefit(): Money {
      return this._content["totalBenefit"] as Money;
    }

    /** The total cost of the services reported. */
    set totalCost(value: Money) {
      this._content["totalCost"] = value;
    }

    get totalCost(): Money {
      return this._content["totalCost"] as Money;
    }

    /**
     * The category of claim, eg, oral, pharmacy, vision, insitutional,
     * professional.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The amount of deductable applied which was not allocated to any
     * particular service line.
     */
    set unallocDeductable(value: Money) {
      this._content["unallocDeductable"] = value;
    }

    get unallocDeductable(): Money {
      return this._content["unallocDeductable"] as Money;
    }
  }

  /** Base StructureDefinition for FamilyMemberHistory Resource */
  export class FamilyMemberHistory extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory";

    /**
     * The age of the relative at the time the family member history is
     * recorded.
     */
    set age(value: Age) {
      this._content["age"] = value;
    }

    get age(): Age {
      return this._content["age"] as Age;
    }

    /** The actual or approximate date of birth of the relative. */
    set born(value: Period) {
      this._content["born"] = value;
    }

    get born(): Period {
      return this._content["born"] as Period;
    }

    /**
     * The significant Conditions (or condition) that the family member had.
     * This is a repeating section to allow a system to represent more than one
     * condition per resource, though there is nothing stopping multiple
     * resources - one per condition.
     */
    set condition(value: Array<BackboneElement>) {
      this._content["condition"] = value;
    }

    get condition(): Array<BackboneElement> {
      return this._content["condition"] as Array<BackboneElement>;
    }

    /** The date (and possibly time) when the family member history was taken. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Deceased flag or the actual or approximate age of the relative at the
     * time of death for the family member history record.
     */
    set deceased(value: Boolean) {
      this._content["deceased"] = value;
    }

    get deceased(): Boolean {
      return this._content["deceased"] as Boolean;
    }

    /**
     * A protocol or questionnaire that was adhered to in whole or in part by
     * this event.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /** If true, indicates that the age value specified is an estimated value. */
    set estimatedAge(value: Boolean) {
      this._content["estimatedAge"] = value;
    }

    get estimatedAge(): Boolean {
      return this._content["estimatedAge"] as Boolean;
    }

    /**
     * Administrative Gender - the gender that the relative is considered to
     * have for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /**
     * This records identifiers associated with this family member history
     * record that are defined by business processes and/ or used to refer to it
     * when a direct URL reference to the resource itself is not appropriate
     * (e.g. in CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This will either be a name or a description; e.g. "Aunt Susan", "my
     * cousin with the red hair".
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * If true, indicates the taking of an individual family member's history
     * did not occur. The notDone element should not be used to document negated
     * conditions, such as a family member that did not have a condition.
     */
    set notDone(value: Boolean) {
      this._content["notDone"] = value;
    }

    get notDone(): Boolean {
      return this._content["notDone"] as Boolean;
    }

    /** Describes why the family member's history is absent. */
    set notDoneReason(value: CodeableConcept) {
      this._content["notDoneReason"] = value;
    }

    get notDoneReason(): CodeableConcept {
      return this._content["notDoneReason"] as CodeableConcept;
    }

    /**
     * This property allows a non condition-specific note to the made about the
     * related person. Ideally, the note would be in the condition property, but
     * this is not always possible.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The person who this history concerns. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Describes why the family member history occurred in coded or textual
     * form.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Indicates a Condition, Observation, AllergyIntolerance, or
     * QuestionnaireResponse that justifies this family member history event.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The type of relationship this person has to the patient (father, mother,
     * brother etc.).
     */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /**
     * A code specifying the status of the record of the family history of a
     * specific family member.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Flag Resource */
  export class Flag extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Flag";

    /** The person, organization or device that created the flag. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Allows an flag to be divided into different categories like clinical,
     * administrative etc. Intended to be used as a means of filtering which
     * flags are displayed to particular user or in a given context.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** The coded value or textual component of the flag to display to the user. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** This alert is only relevant during the encounter. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Identifier assigned to the flag for external use (outside the FHIR
     * environment).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The period of time from the activation of the flag to inactivation of the
     * flag. If the flag is active, the end of the period should be
     * unspecified.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Supports basic workflow. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The patient, location, group , organization , or practitioner, etc. this
     * is about record this flag is associated with.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for Goal Resource */
  export class Goal extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Goal";

    /**
     * The identified conditions and other health record elements that are
     * intended to be addressed by the goal.
     */
    set addresses(value: Array<Reference>) {
      this._content["addresses"] = value;
    }

    get addresses(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    /** Indicates a category the goal falls within. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Human-readable and/or coded description of a specific desired objective
     * of care, such as "control blood pressure" or "negotiate an obstacle
     * course" or "dance with child at wedding".
     */
    set description(value: CodeableConcept) {
      this._content["description"] = value;
    }

    get description(): CodeableConcept {
      return this._content["description"] as CodeableConcept;
    }

    /** Indicates whose goal this is - patient goal, practitioner goal, etc. */
    set expressedBy(value: Reference) {
      this._content["expressedBy"] = value;
    }

    get expressedBy(): Reference {
      return this._content["expressedBy"] as Reference;
    }

    /**
     * This records identifiers associated with this care plan that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Any comments related to the goal. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Identifies the change (or lack of change) at the point when the status of
     * the goal is assessed.
     */
    set outcomeCode(value: Array<CodeableConcept>) {
      this._content["outcomeCode"] = value;
    }

    get outcomeCode(): Array<CodeableConcept> {
      return this._content["outcomeCode"] as Array<CodeableConcept>;
    }

    /** Details of what's changed (or not changed). */
    set outcomeReference(value: Array<Reference>) {
      this._content["outcomeReference"] = value;
    }

    get outcomeReference(): Array<Reference> {
      return this._content["outcomeReference"] as Array<Reference>;
    }

    /**
     * Identifies the mutually agreed level of importance associated with
     * reaching/sustaining the goal.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /** The date or event after which the goal should begin being pursued. */
    set start(value: Date) {
      this._content["start"] = value;
    }

    get start(): Date {
      return this._content["start"] as Date;
    }

    /**
     * Indicates whether the goal has been reached and is still considered
     * relevant.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies when the current status. I.e. When initially created, when
     * achieved, when cancelled, etc.
     */
    set statusDate(value: Date) {
      this._content["statusDate"] = value;
    }

    get statusDate(): Date {
      return this._content["statusDate"] as Date;
    }

    /** Captures the reason for the current status. */
    set statusReason(value: String) {
      this._content["statusReason"] = value;
    }

    get statusReason(): String {
      return this._content["statusReason"] as String;
    }

    /**
     * Identifies the patient, group or organization for whom the goal is being
     * established.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Indicates what should be done by when. */
    set target(value: BackboneElement) {
      this._content["target"] = value;
    }

    get target(): BackboneElement {
      return this._content["target"] as BackboneElement;
    }
  }

  /** Base StructureDefinition for GraphDefinition Resource */
  export class GraphDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/GraphDefinition";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the graph definition was published.
     * The date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the graph definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the graph definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this graph definition is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A legal or geographic region in which the graph definition is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** Links this graph makes rules about. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the graph definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The profile that describes the use of the base resource. */
    set profile(value: Uri) {
      this._content["profile"] = value;
    }

    get profile(): Uri {
      return this._content["profile"] as Uri;
    }

    /**
     * The name of the individual or organization that published the graph
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this graph definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** The type of FHIR resource at which instances of this graph start. */
    set start(value: Code) {
      this._content["start"] = value;
    }

    get start(): Code {
      return this._content["start"] as Code;
    }

    /**
     * The status of this graph definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An absolute URI that is used to identify this graph definition when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this graph definition is (or will be) published. The URL SHOULD include
     * the major version of the graph definition. For more information see
     * [Technical and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate graph definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the graph
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the graph definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Group Resource */
  export class Group extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Group";

    /**
     * Indicates whether the record for the group is available for use or is
     * merely being retained for historical purposes.
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * If true, indicates that the resource refers to a specific group of real
     * individuals. If false, the group defines a set of intended individuals.
     */
    set actual(value: Boolean) {
      this._content["actual"] = value;
    }

    get actual(): Boolean {
      return this._content["actual"] as Boolean;
    }

    /** Identifies the traits shared by members of the group. */
    set characteristic(value: Array<BackboneElement>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<BackboneElement> {
      return this._content["characteristic"] as Array<BackboneElement>;
    }

    /**
     * Provides a specific type of resource the group includes; e.g. "cow",
     * "syringe", etc.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A unique business identifier for this group. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Identifies the resource instances that are members of the group. */
    set member(value: Array<BackboneElement>) {
      this._content["member"] = value;
    }

    get member(): Array<BackboneElement> {
      return this._content["member"] as Array<BackboneElement>;
    }

    /** A label assigned to the group for human identification and communication. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** A count of the number of resource instances that are part of the group. */
    set quantity(value: UnsignedInt) {
      this._content["quantity"] = value;
    }

    get quantity(): UnsignedInt {
      return this._content["quantity"] as UnsignedInt;
    }

    /**
     * Identifies the broad classification of the kind of resources the group
     * includes.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /** Base StructureDefinition for GuidanceResponse Resource */
  export class GuidanceResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/GuidanceResponse";

    /**
     * Allows the context of the guidance response to be provided if available.
     * In a service context, this would likely be unavailable.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * If the evaluation could not be completed due to lack of information, or
     * additional information would potentially result in a more accurate
     * response, this element will a description of the data required in order
     * to proceed with the evaluation. A subsequent request to the service
     * should include this data.
     */
    set dataRequirement(value: Array<DataRequirement>) {
      this._content["dataRequirement"] = value;
    }

    get dataRequirement(): Array<DataRequirement> {
      return this._content["dataRequirement"] as Array<DataRequirement>;
    }

    /**
     * Messages resulting from the evaluation of the artifact or artifacts. As
     * part of evaluating the request, the engine may produce informational or
     * warning messages. These messages will be provided by this element.
     */
    set evaluationMessage(value: Array<Reference>) {
      this._content["evaluationMessage"] = value;
    }

    get evaluationMessage(): Array<Reference> {
      return this._content["evaluationMessage"] as Array<Reference>;
    }

    /**
     * Allows a service to provide a unique, business identifier for the
     * response.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** A reference to the knowledge module that was invoked. */
    set module(value: Reference) {
      this._content["module"] = value;
    }

    get module(): Reference {
      return this._content["module"] as Reference;
    }

    /**
     * Provides a mechanism to communicate additional information about the
     * response.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Indicates when the guidance response was processed. */
    set occurrenceDateTime(value: DateTime) {
      this._content["occurrenceDateTime"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrenceDateTime"] as DateTime;
    }

    /**
     * The output parameters of the evaluation, if any. Many modules will result
     * in the return of specific resources such as procedure or communication
     * requests that are returned as part of the operation result. However,
     * modules may define specific outputs that would be returned as the result
     * of the evaluation, and these would be returned in this element.
     */
    set outputParameters(value: Reference) {
      this._content["outputParameters"] = value;
    }

    get outputParameters(): Reference {
      return this._content["outputParameters"] as Reference;
    }

    /** Provides a reference to the device that performed the guidance. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /**
     * Indicates the reason the request was initiated. This is typically
     * provided as a parameter to the evaluation and echoed by the service,
     * although for some use cases, such as subscription- or event-based
     * scenarios, it may provide an indication of the cause for the response.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * The id of the request associated with this response. If an id was given
     * as part of the request, it will be reproduced here to enable the
     * requester to more easily identify the response in a multi-request
     * scenario.
     */
    set requestId(value: Id) {
      this._content["requestId"] = value;
    }

    get requestId(): Id {
      return this._content["requestId"] as Id;
    }

    /** The actions, if any, produced by the evaluation of the artifact. */
    set result(value: Reference) {
      this._content["result"] = value;
    }

    get result(): Reference {
      return this._content["result"] as Reference;
    }

    /**
     * The status of the response. If the evaluation is completed successfully,
     * the status will indicate success. However, in order to complete the
     * evaluation, the engine may require more information. In this case, the
     * status will be data-required, and the response will contain a description
     * of the additional required information. If the evaluation completed
     * successfully, but the engine determines that a potentially more accurate
     * response could be provided if more data was available, the status will be
     * data-requested, and the response will contain a description of the
     * additional requested information.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient for which the request was processed. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for HealthcareService Resource */
  export class HealthcareService extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/HealthcareService";

    /** Whether this healthcareservice record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Indicates whether or not a prospective consumer will require an
     * appointment for a particular service at a site to be provided by the
     * Organization. Indicates if an appointment is required for access to this
     * service.
     */
    set appointmentRequired(value: Boolean) {
      this._content["appointmentRequired"] = value;
    }

    get appointmentRequired(): Boolean {
      return this._content["appointmentRequired"] as Boolean;
    }

    /**
     * A description of site availability exceptions, e.g. public holiday
     * availability. Succinctly describing all possible exceptions to normal
     * site availability as details in the available Times and not available
     * Times.
     */
    set availabilityExceptions(value: String) {
      this._content["availabilityExceptions"] = value;
    }

    get availabilityExceptions(): String {
      return this._content["availabilityExceptions"] as String;
    }

    /** A collection of times that the Service Site is available. */
    set availableTime(value: Array<BackboneElement>) {
      this._content["availableTime"] = value;
    }

    get availableTime(): Array<BackboneElement> {
      return this._content["availableTime"] as Array<BackboneElement>;
    }

    /** Identifies the broad category of service being performed or delivered. */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** Collection of characteristics (attributes). */
    set characteristic(value: Array<CodeableConcept>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<CodeableConcept> {
      return this._content["characteristic"] as Array<CodeableConcept>;
    }

    /**
     * Any additional description of the service and/or any specific issues not
     * covered by the other attributes, which can be displayed as further detail
     * under the serviceName.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * The location(s) that this service is available to (not where the service
     * is provided).
     */
    set coverageArea(value: Array<Reference>) {
      this._content["coverageArea"] = value;
    }

    get coverageArea(): Array<Reference> {
      return this._content["coverageArea"] as Array<Reference>;
    }

    /**
     * Does this service have specific eligibility requirements that need to be
     * met in order to use the service?
     */
    set eligibility(value: CodeableConcept) {
      this._content["eligibility"] = value;
    }

    get eligibility(): CodeableConcept {
      return this._content["eligibility"] as CodeableConcept;
    }

    /** Describes the eligibility conditions for the service. */
    set eligibilityNote(value: String) {
      this._content["eligibilityNote"] = value;
    }

    get eligibilityNote(): String {
      return this._content["eligibilityNote"] as String;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * specific healthcare services defined at this resource.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /** Extra details about the service that can't be placed in the other fields. */
    set extraDetails(value: String) {
      this._content["extraDetails"] = value;
    }

    get extraDetails(): String {
      return this._content["extraDetails"] as String;
    }

    /** External identifiers for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The location(s) where this healthcare service may be provided. */
    set location(value: Array<Reference>) {
      this._content["location"] = value;
    }

    get location(): Array<Reference> {
      return this._content["location"] as Array<Reference>;
    }

    /**
     * Further description of the service as it would be presented to a consumer
     * while searching.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The HealthcareService is not available during this period of time due to
     * the provided reason.
     */
    set notAvailable(value: Array<BackboneElement>) {
      this._content["notAvailable"] = value;
    }

    get notAvailable(): Array<BackboneElement> {
      return this._content["notAvailable"] as Array<BackboneElement>;
    }

    /**
     * If there is a photo/symbol associated with this HealthcareService, it may
     * be included here to facilitate quick identification of the service in a
     * list.
     */
    set photo(value: Attachment) {
      this._content["photo"] = value;
    }

    get photo(): Attachment {
      return this._content["photo"] as Attachment;
    }

    /** Program Names that can be used to categorize the service. */
    set programName(value: Array<String>) {
      this._content["programName"] = value;
    }

    get programName(): Array<String> {
      return this._content["programName"] as Array<String>;
    }

    /** The organization that provides this healthcare service. */
    set providedBy(value: Reference) {
      this._content["providedBy"] = value;
    }

    get providedBy(): Reference {
      return this._content["providedBy"] as Reference;
    }

    /**
     * Ways that the service accepts referrals, if this is not provided then it
     * is implied that no referral is required.
     */
    set referralMethod(value: Array<CodeableConcept>) {
      this._content["referralMethod"] = value;
    }

    get referralMethod(): Array<CodeableConcept> {
      return this._content["referralMethod"] as Array<CodeableConcept>;
    }

    /**
     * The code(s) that detail the conditions under which the healthcare service
     * is available/offered.
     */
    set serviceProvisionCode(value: Array<CodeableConcept>) {
      this._content["serviceProvisionCode"] = value;
    }

    get serviceProvisionCode(): Array<CodeableConcept> {
      return this._content["serviceProvisionCode"] as Array<CodeableConcept>;
    }

    /**
     * Collection of specialties handled by the service site. This is more of a
     * medical term.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** List of contacts related to this specific healthcare service. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** The specific type of service that may be delivered or performed. */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /** Base StructureDefinition for ImagingManifest Resource */
  export class ImagingManifest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImagingManifest";

    /**
     * Author of ImagingManifest. It can be a human author or a device which
     * made the decision of the SOP instances selected. For example, a
     * radiologist selected a set of imaging SOP instances to attach in a
     * diagnostic report, and a CAD application may author a selection to
     * describe SOP instances it used to generate a detection conclusion.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Date and time when the selection of the referenced instances were made.
     * It is (typically) different from the creation date of the selection
     * resource, and from dates associated with the referenced instances (e.g.
     * capture time of the referenced image).
     */
    set authoringTime(value: DateTime) {
      this._content["authoringTime"] = value;
    }

    get authoringTime(): DateTime {
      return this._content["authoringTime"] as DateTime;
    }

    /**
     * Free text narrative description of the ImagingManifest.\
     * The value may be derived from the DICOM Standard Part 16, CID-7010
     * descriptions (e.g. Best in Set, Complete Study Content). Note that those
     * values cover the wide range of uses of the DICOM Key Object Selection
     * object, several of which are not supported by ImagingManifest.
     * Specifically, there is no expected behavior associated with descriptions
     * that suggest referenced images be removed or not used.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Unique identifier of the DICOM Key Object Selection (KOS) that this
     * resource represents.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A patient resource reference which is the patient subject of all DICOM
     * SOP Instances in this ImagingManifest.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Study identity and locating information of the DICOM SOP instances in the
     * selection.
     */
    set study(value: Array<BackboneElement>) {
      this._content["study"] = value;
    }

    get study(): Array<BackboneElement> {
      return this._content["study"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for ImagingStudy Resource */
  export class ImagingStudy extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ImagingStudy";

    /**
     * Accession Number is an identifier related to some aspect of imaging
     * workflow and data management. Usage may vary across different
     * institutions. See for instance [IHE Radiology Technical Framework Volume
     * 1 Appendix
     * A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
     */
    set accession(value: Identifier) {
      this._content["accession"] = value;
    }

    get accession(): Identifier {
      return this._content["accession"] as Identifier;
    }

    /** Availability of study (online, offline, or nearline). */
    set availability(value: Code) {
      this._content["availability"] = value;
    }

    get availability(): Code {
      return this._content["availability"] as Code;
    }

    /**
     * A list of the diagnostic requests that resulted in this imaging study
     * being performed.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** The encounter or episode at which the request is initiated. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * Institution-generated description or classification of the Study
     * performed.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The network service providing access (e.g., query, view, or retrieval)
     * for the study. See implementation notes for information about using DICOM
     * endpoints. A study-level endpoint applies to each series in the study,
     * unless overridden by a series-level endpoint with the same
     * Endpoint.type.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /** Other identifiers for the study. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Who read the study and interpreted the images or other content. */
    set interpreter(value: Array<Reference>) {
      this._content["interpreter"] = value;
    }

    get interpreter(): Array<Reference> {
      return this._content["interpreter"] as Array<Reference>;
    }

    /**
     * A list of all the Series.ImageModality values that are actual acquisition
     * modalities, i.e. those in the DICOM Context Group 29 (value set OID
     * 1.2.840.10008.6.1.19).
     */
    set modalityList(value: Array<Coding>) {
      this._content["modalityList"] = value;
    }

    get modalityList(): Array<Coding> {
      return this._content["modalityList"] as Array<Coding>;
    }

    /**
     * Number of SOP Instances in Study. This value given may be larger than the
     * number of instance elements this resource contains due to resource
     * availability, security, or other factors. This element should be present
     * if any instance elements are present.
     */
    set numberOfInstances(value: UnsignedInt) {
      this._content["numberOfInstances"] = value;
    }

    get numberOfInstances(): UnsignedInt {
      return this._content["numberOfInstances"] as UnsignedInt;
    }

    /**
     * Number of Series in the Study. This value given may be larger than the
     * number of series elements this Resource contains due to resource
     * availability, security, or other factors. This element should be present
     * if any series elements are present.
     */
    set numberOfSeries(value: UnsignedInt) {
      this._content["numberOfSeries"] = value;
    }

    get numberOfSeries(): UnsignedInt {
      return this._content["numberOfSeries"] as UnsignedInt;
    }

    /** The patient imaged in the study. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The code for the performed procedure type. */
    set procedureCode(value: Array<CodeableConcept>) {
      this._content["procedureCode"] = value;
    }

    get procedureCode(): Array<CodeableConcept> {
      return this._content["procedureCode"] as Array<CodeableConcept>;
    }

    /** A reference to the performed Procedure. */
    set procedureReference(value: Array<Reference>) {
      this._content["procedureReference"] = value;
    }

    get procedureReference(): Array<Reference> {
      return this._content["procedureReference"] as Array<Reference>;
    }

    /**
     * Description of clinical condition indicating why the ImagingStudy was
     * requested.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /** The requesting/referring physician. */
    set referrer(value: Reference) {
      this._content["referrer"] = value;
    }

    get referrer(): Reference {
      return this._content["referrer"] as Reference;
    }

    /** Each study has one or more series of images or other content. */
    set series(value: Array<BackboneElement>) {
      this._content["series"] = value;
    }

    get series(): Array<BackboneElement> {
      return this._content["series"] as Array<BackboneElement>;
    }

    /** Date and time the study started. */
    set started(value: DateTime) {
      this._content["started"] = value;
    }

    get started(): DateTime {
      return this._content["started"] as DateTime;
    }

    /** Formal identifier for the study. */
    set uid(value: Oid) {
      this._content["uid"] = value;
    }

    get uid(): Oid {
      return this._content["uid"] as Oid;
    }
  }

  /** Base StructureDefinition for Immunization Resource */
  export class Immunization extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Immunization";

    /** Date vaccine administered or was to be administered. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** The quantity of vaccine product that was administered. */
    set doseQuantity(value: Quantity) {
      this._content["doseQuantity"] = value;
    }

    get doseQuantity(): Quantity {
      return this._content["doseQuantity"] as Quantity;
    }

    /**
     * The visit or admission or other contact between patient and health care
     * provider the immunization was performed as part of.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Date vaccine batch expires. */
    set expirationDate(value: Date) {
      this._content["expirationDate"] = value;
    }

    get expirationDate(): Date {
      return this._content["expirationDate"] as Date;
    }

    /** Reasons why a vaccine was or was not administered. */
    set explanation(value: BackboneElement) {
      this._content["explanation"] = value;
    }

    get explanation(): BackboneElement {
      return this._content["explanation"] as BackboneElement;
    }

    /** A unique identifier assigned to this immunization record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The service delivery location where the vaccine administration occurred. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Lot number of the vaccine product. */
    set lotNumber(value: String) {
      this._content["lotNumber"] = value;
    }

    get lotNumber(): String {
      return this._content["lotNumber"] as String;
    }

    /** Name of vaccine manufacturer. */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /** Indicates if the vaccination was or was not given. */
    set notGiven(value: Boolean) {
      this._content["notGiven"] = value;
    }

    get notGiven(): Boolean {
      return this._content["notGiven"] as Boolean;
    }

    /**
     * Extra information about the immunization that is not conveyed by the
     * other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The patient who either received or did not receive the immunization. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Indicates who or what performed the event. */
    set practitioner(value: Array<BackboneElement>) {
      this._content["practitioner"] = value;
    }

    get practitioner(): Array<BackboneElement> {
      return this._content["practitioner"] as Array<BackboneElement>;
    }

    /**
     * An indication that the content of the record is based on information from
     * the person who administered the vaccine. This reflects the context under
     * which the data was originally recorded.
     */
    set primarySource(value: Boolean) {
      this._content["primarySource"] = value;
    }

    get primarySource(): Boolean {
      return this._content["primarySource"] as Boolean;
    }

    /**
     * Categorical data indicating that an adverse event is associated in time
     * to an immunization.
     */
    set reaction(value: Array<BackboneElement>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<BackboneElement> {
      return this._content["reaction"] as Array<BackboneElement>;
    }

    /**
     * The source of the data when the report of the immunization event is not
     * based on information from the person who administered the vaccine.
     */
    set reportOrigin(value: CodeableConcept) {
      this._content["reportOrigin"] = value;
    }

    get reportOrigin(): CodeableConcept {
      return this._content["reportOrigin"] as CodeableConcept;
    }

    /** The path by which the vaccine product is taken into the body. */
    set route(value: CodeableConcept) {
      this._content["route"] = value;
    }

    get route(): CodeableConcept {
      return this._content["route"] as CodeableConcept;
    }

    /** Body site where vaccine was administered. */
    set site(value: CodeableConcept) {
      this._content["site"] = value;
    }

    get site(): CodeableConcept {
      return this._content["site"] as CodeableConcept;
    }

    /** Indicates the current status of the vaccination event. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Contains information about the protocol(s) under which the vaccine was
     * administered.
     */
    set vaccinationProtocol(value: Array<BackboneElement>) {
      this._content["vaccinationProtocol"] = value;
    }

    get vaccinationProtocol(): Array<BackboneElement> {
      return this._content["vaccinationProtocol"] as Array<BackboneElement>;
    }

    /** Vaccine that was administered or was to be administered. */
    set vaccineCode(value: CodeableConcept) {
      this._content["vaccineCode"] = value;
    }

    get vaccineCode(): CodeableConcept {
      return this._content["vaccineCode"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for ImmunizationRecommendation Resource */
  export class ImmunizationRecommendation extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation";

    /** A unique identifier assigned to this particular recommendation record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The patient the recommendations are for. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Vaccine administration recommendations. */
    set recommendation(value: Array<BackboneElement>) {
      this._content["recommendation"] = value;
    }

    get recommendation(): Array<BackboneElement> {
      return this._content["recommendation"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for ImplementationGuide Resource */
  export class ImplementationGuide extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImplementationGuide";

    /**
     * A binary file that is included in the implementation guide when it is
     * published.
     */
    set binary(value: Array<Uri>) {
      this._content["binary"] = value;
    }

    get binary(): Array<Uri> {
      return this._content["binary"] as Array<Uri>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the implementation guide and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the implementation guide.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the implementation guide was
     * published. The date must change if and when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the implementation guide changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Another implementation guide that this implementation depends on.
     * Typically, an implementation guide uses value sets, profiles etc.defined
     * in other implementation guides.
     */
    set dependency(value: Array<BackboneElement>) {
      this._content["dependency"] = value;
    }

    get dependency(): Array<BackboneElement> {
      return this._content["dependency"] as Array<BackboneElement>;
    }

    /**
     * A free text natural language description of the implementation guide from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this implementation guide is authored
     * for testing purposes (or education/evaluation/marketing), and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * The version of the FHIR specification on which this ImplementationGuide
     * is based - this is the formal version of the specification, without the
     * revision number, e.g. [publication].[major].[minor], which is 3.0.2 for
     * this version.
     */
    set fhirVersion(value: Id) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Id {
      return this._content["fhirVersion"] as Id;
    }

    /**
     * A set of profiles that all resources covered by this implementation guide
     * must conform to.
     */
    set global(value: Array<BackboneElement>) {
      this._content["global"] = value;
    }

    get global(): Array<BackboneElement> {
      return this._content["global"] as Array<BackboneElement>;
    }

    /**
     * A legal or geographic region in which the implementation guide is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the implementation guide. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A logical group of resources. Logical groups can be used when building
     * pages.
     */
    set package(value: Array<BackboneElement>) {
      this._content["package"] = value;
    }

    get package(): Array<BackboneElement> {
      return this._content["package"] as Array<BackboneElement>;
    }

    /**
     * A page / section in the implementation guide. The root page is the
     * implementation guide home page.
     */
    set page(value: BackboneElement) {
      this._content["page"] = value;
    }

    get page(): BackboneElement {
      return this._content["page"] as BackboneElement;
    }

    /**
     * The name of the individual or organization that published the
     * implementation guide.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * The status of this implementation guide. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An absolute URI that is used to identify this implementation guide when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this implementation guide is (or will be) published. The URL SHOULD
     * include the major version of the implementation guide. For more
     * information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate implementation guide instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the
     * implementation guide when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the
     * implementation guide author and is not expected to be globally unique.
     * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version
     * is not available. There is also no expectation that versions can be
     * placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Library Resource */
  export class Library extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Library";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The content of the library as an Attachment. The content may be a
     * reference to a url, or may be directly embedded as a base-64 string.
     * Either way, the contentType of the attachment determines how to interpret
     * the content.
     */
    set content(value: Array<Attachment>) {
      this._content["content"] = value;
    }

    get content(): Array<Attachment> {
      return this._content["content"] as Array<Attachment>;
    }

    /**
     * A contributor to the content of the library, including authors, editors,
     * reviewers, and endorsers.
     */
    set contributor(value: Array<Contributor>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Contributor> {
      return this._content["contributor"] as Array<Contributor>;
    }

    /**
     * A copyright statement relating to the library and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the library.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * Describes a set of data that must be provided in order to be able to
     * successfully perform the computations defined by the library.
     */
    set dataRequirement(value: Array<DataRequirement>) {
      this._content["dataRequirement"] = value;
    }

    get dataRequirement(): Array<DataRequirement> {
      return this._content["dataRequirement"] as Array<DataRequirement>;
    }

    /**
     * The date (and optionally time) when the library was published. The date
     * must change if and when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the library changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the library from a consumer's
     * perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the library content was or is planned to be in
     * active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A boolean value to indicate that this library is authored for testing
     * purposes (or education/evaluation/marketing), and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this library when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance. e.g. CMS or NQF identifiers for a measure
     * artifact. Note that at least one identifier is required for
     * non-experimental active artifacts.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A legal or geographic region in which the library is intended to be used. */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval, but doesn't change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the library. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The parameter element defines parameters used by the library. */
    set parameter(value: Array<ParameterDefinition>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<ParameterDefinition> {
      return this._content["parameter"] as Array<ParameterDefinition>;
    }

    /** The name of the individual or organization that published the library. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this library is needed and why it has been designed
     * as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * The status of this library. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the library. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the library. Topics provide
     * a high-level categorization of the library that can be useful for
     * filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * Identifies the type of library such as a Logic Library, Model Definition,
     * Asset Collection, or Module Definition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * An absolute URI that is used to identify this library when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this library is (or will be) published. The URL SHOULD include the major
     * version of the library. For more information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the library is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate library instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the library when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the library author and is not expected to
     * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
     * if a managed version is not available. There is also no expectation that
     * versions can be placed in a lexicographical sequence. To provide a
     * version consistent with the Decision Support Service specification, use
     * the format Major.Minor.Revision (e.g. 1.0.0). For more information on
     * versioning knowledge assets, refer to the Decision Support Service
     * specification. Note that a version is required for non-experimental
     * active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Linkage Resource */
  export class Linkage extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Linkage";

    /**
     * Indicates whether the asserted set of linkages are considered to be "in
     * effect".
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Identifies the user or organization responsible for asserting the
     * linkages and who establishes the context for evaluating the nature of
     * each linkage.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Identifies one of the records that is considered to refer to the same
     * real-world occurrence as well as how the items hould be evaluated within
     * the collection of linked items.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for List Resource */
  export class List extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/List";

    /** This code defines the purpose of the list - why it was created. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** The date that the list was prepared. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** If the list is empty, why the list is empty. */
    set emptyReason(value: CodeableConcept) {
      this._content["emptyReason"] = value;
    }

    get emptyReason(): CodeableConcept {
      return this._content["emptyReason"] as CodeableConcept;
    }

    /** The encounter that is the context in which this list was created. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Entries in this list. */
    set entry(value: Array<BackboneElement>) {
      this._content["entry"] = value;
    }

    get entry(): Array<BackboneElement> {
      return this._content["entry"] as Array<BackboneElement>;
    }

    /**
     * Identifier for the List assigned for business purposes outside the
     * context of FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * How this list was prepared - whether it is a working list that is
     * suitable for being maintained on an ongoing basis, or if it represents a
     * snapshot of a list of items from another source, or whether it is a
     * prepared list where items may be marked as added, modified or deleted.
     */
    set mode(value: Code) {
      this._content["mode"] = value;
    }

    get mode(): Code {
      return this._content["mode"] as Code;
    }

    /** Comments that apply to the overall list. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** What order applies to the items in the list. */
    set orderedBy(value: CodeableConcept) {
      this._content["orderedBy"] = value;
    }

    get orderedBy(): CodeableConcept {
      return this._content["orderedBy"] as CodeableConcept;
    }

    /**
     * The entity responsible for deciding what the contents of the list were.
     * Where the list was created by a human, this is the same as the author of
     * the list.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /** Indicates the current state of this list. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The common subject (or patient) of the resources that are in the list, if
     * there is one.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** A label for the list assigned by the author. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }
  }

  /** Base StructureDefinition for Location Resource */
  export class Location extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Location";

    /** Physical location. */
    set address(value: Address) {
      this._content["address"] = value;
    }

    get address(): Address {
      return this._content["address"] as Address;
    }

    /**
     * A list of alternate names that the location is known as, or was known as
     * in the past.
     */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /**
     * Description of the Location, which helps in finding or referencing the
     * place.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * location.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /** Unique code or number identifying the location to its users. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization responsible for the provisioning and upkeep of the
     * location.
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /**
     * Indicates whether a resource instance represents a specific location or a
     * class of locations.
     */
    set mode(value: Code) {
      this._content["mode"] = value;
    }

    get mode(): Code {
      return this._content["mode"] as Code;
    }

    /** Name of the location as used by humans. Does not need to be unique. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The Operational status covers operation values most relevant to beds (but
     * can also apply to rooms/units/chair/etc such as an isolation
     * unit/dialisys chair). This typically covers concepts such as
     * contamination, housekeeping and other activities like maintenance.
     */
    set operationalStatus(value: Coding) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Coding {
      return this._content["operationalStatus"] as Coding;
    }

    /** Another Location which this Location is physically part of. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** Physical form of the location, e.g. building, room, vehicle, road. */
    set physicalType(value: CodeableConcept) {
      this._content["physicalType"] = value;
    }

    get physicalType(): CodeableConcept {
      return this._content["physicalType"] as CodeableConcept;
    }

    /**
     * The absolute geographic location of the Location, expressed using the
     * WGS84 datum (This is the same co-ordinate system used in KML).
     */
    set position(value: BackboneElement) {
      this._content["position"] = value;
    }

    get position(): BackboneElement {
      return this._content["position"] as BackboneElement;
    }

    /**
     * The status property covers the general availability of the resource, not
     * the current value which may be covered by the operationStatus, or by a
     * schedule/slots if they are configured for the location.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The contact details of communication devices available at the location.
     * This can include phone numbers, fax numbers, mobile numbers, email
     * addresses and web sites.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** Indicates the type of function performed at the location. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for Measure Resource */
  export class Measure extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Measure";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * Provides a summary of relevant clinical guidelines or other clinical
     * recommendations supporting the measure.
     */
    set clinicalRecommendationStatement(value: Markdown) {
      this._content["clinicalRecommendationStatement"] = value;
    }

    get clinicalRecommendationStatement(): Markdown {
      return this._content["clinicalRecommendationStatement"] as Markdown;
    }

    /**
     * If this is a composite measure, the scoring method used to combine the
     * component measures to determine the composite score.
     */
    set compositeScoring(value: CodeableConcept) {
      this._content["compositeScoring"] = value;
    }

    get compositeScoring(): CodeableConcept {
      return this._content["compositeScoring"] as CodeableConcept;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A contributor to the content of the measure, including authors, editors,
     * reviewers, and endorsers.
     */
    set contributor(value: Array<Contributor>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Contributor> {
      return this._content["contributor"] as Array<Contributor>;
    }

    /**
     * A copyright statement relating to the measure and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the measure.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the measure was published. The date
     * must change if and when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the measure changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Provides a description of an individual term used within the measure. */
    set definition(value: Array<Markdown>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Markdown> {
      return this._content["definition"] as Array<Markdown>;
    }

    /**
     * A free text natural language description of the measure from a consumer's
     * perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Notices and disclaimers regarding the use of the measure, or related to
     * intellectual property (such as code systems) referenced by the measure.
     */
    set disclaimer(value: Markdown) {
      this._content["disclaimer"] = value;
    }

    get disclaimer(): Markdown {
      return this._content["disclaimer"] as Markdown;
    }

    /**
     * The period during which the measure content was or is planned to be in
     * active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A boolean value to indicate that this measure is authored for testing
     * purposes (or education/evaluation/marketing), and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** A group of population criteria for the measure. */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * Additional guidance for the measure including how it can be used in a
     * clinical context, and the intent of the measure.
     */
    set guidance(value: Markdown) {
      this._content["guidance"] = value;
    }

    get guidance(): Markdown {
      return this._content["guidance"] as Markdown;
    }

    /**
     * A formal identifier that is used to identify this measure when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Information on whether an increase or decrease in score is the preferred
     * result (e.g., a higher score indicates better quality OR a lower score
     * indicates better quality OR quality is whthin a range).
     */
    set improvementNotation(value: String) {
      this._content["improvementNotation"] = value;
    }

    get improvementNotation(): String {
      return this._content["improvementNotation"] as String;
    }

    /** A legal or geographic region in which the measure is intended to be used. */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval, but doesn't change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing the formal logic used by the
     * measure.
     */
    set library(value: Array<Reference>) {
      this._content["library"] = value;
    }

    get library(): Array<Reference> {
      return this._content["library"] as Array<Reference>;
    }

    /**
     * A natural language name identifying the measure. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The name of the individual or organization that published the measure. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this measure is needed and why it has been designed
     * as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Describes how to combine the information calculated, based on logic in
     * each of several populations, into one summarized result.
     */
    set rateAggregation(value: String) {
      this._content["rateAggregation"] = value;
    }

    get rateAggregation(): String {
      return this._content["rateAggregation"] as String;
    }

    /**
     * Provides a succint statement of the need for the measure. Usually
     * includes statements pertaining to importance criterion: impact, gap in
     * care, and evidence.
     */
    set rationale(value: Markdown) {
      this._content["rationale"] = value;
    }

    get rationale(): Markdown {
      return this._content["rationale"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * A description of the risk adjustment factors that may impact the
     * resulting score for the measure and how they may be accounted for when
     * computing and reporting measure results.
     */
    set riskAdjustment(value: String) {
      this._content["riskAdjustment"] = value;
    }

    get riskAdjustment(): String {
      return this._content["riskAdjustment"] as String;
    }

    /**
     * Indicates how the calculation is performed for the measure, including
     * proportion, ratio, continuous variable, and cohort. The value set is
     * extensible, allowing additional measure scoring types to be represented.
     */
    set scoring(value: CodeableConcept) {
      this._content["scoring"] = value;
    }

    get scoring(): CodeableConcept {
      return this._content["scoring"] as CodeableConcept;
    }

    /** The measure set, e.g. Preventive Care and Screening. */
    set set(value: String) {
      this._content["set"] = value;
    }

    get set(): String {
      return this._content["set"] as String;
    }

    /**
     * The status of this measure. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The supplemental data criteria for the measure report, specified as
     * either the name of a valid CQL expression within a referenced library, or
     * a valid FHIR Resource Path.
     */
    set supplementalData(value: Array<BackboneElement>) {
      this._content["supplementalData"] = value;
    }

    get supplementalData(): Array<BackboneElement> {
      return this._content["supplementalData"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the measure. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the measure. Topics provide
     * a high-level categorization of the type of the measure that can be useful
     * for filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * Indicates whether the measure is used to examine a process, an outcome
     * over time, a patient-reported outcome, or a structure measure such as
     * utilization.
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }

    /**
     * An absolute URI that is used to identify this measure when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this measure is (or will be) published. The URL SHOULD include the major
     * version of the measure. For more information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the measure is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate measure instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the measure when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the measure author and is not expected to
     * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
     * if a managed version is not available. There is also no expectation that
     * versions can be placed in a lexicographical sequence. To provide a
     * version consistent with the Decision Support Service specification, use
     * the format Major.Minor.Revision (e.g. 1.0.0). For more information on
     * versioning knowledge assets, refer to the Decision Support Service
     * specification. Note that a version is required for non-experimental
     * active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for MeasureReport Resource */
  export class MeasureReport extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MeasureReport";

    /** The date this measure report was generated. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A reference to a Bundle containing the Resources that were used in the
     * evaluation of this report.
     */
    set evaluatedResources(value: Reference) {
      this._content["evaluatedResources"] = value;
    }

    get evaluatedResources(): Reference {
      return this._content["evaluatedResources"] as Reference;
    }

    /**
     * The results of the calculation, one for each population group in the
     * measure.
     */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this report when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** A reference to the Measure that was evaluated to produce this report. */
    set measure(value: Reference) {
      this._content["measure"] = value;
    }

    get measure(): Reference {
      return this._content["measure"] as Reference;
    }

    /** Optional Patient if the report was requested for a single patient. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The reporting period for which the report was calculated. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Reporting Organization. */
    set reportingOrganization(value: Reference) {
      this._content["reportingOrganization"] = value;
    }

    get reportingOrganization(): Reference {
      return this._content["reportingOrganization"] as Reference;
    }

    /**
     * The report status. No data will be available until the report status is
     * complete.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The type of measure report. This may be an individual report, which
     * provides a single patient's score for the measure; a patient listing,
     * which returns the list of patients that meet the various criteria in the
     * measure; or a summary report, which returns a population count for each
     * of the criteria in the measure.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /** Base StructureDefinition for Media Resource */
  export class Media extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Media";

    /**
     * A procedure that is fulfilled in whole or in part by the creation of this
     * media.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the site on the subject's body where the media was collected
     * (i.e. the target site).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /**
     * The actual content of the media - inline or by direct reference to the
     * media source file.
     */
    set content(value: Attachment) {
      this._content["content"] = value;
    }

    get content(): Attachment {
      return this._content["content"] as Attachment;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * media.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** The device used to collect the media. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /** The duration of the recording in seconds - for audio and video. */
    set duration(value: UnsignedInt) {
      this._content["duration"] = value;
    }

    get duration(): UnsignedInt {
      return this._content["duration"] as UnsignedInt;
    }

    /**
     * The number of frames in a photo. This is used with a multi-page fax, or
     * an imaging acquisition context that takes multiple slices in a single
     * image, or an animated gif. If there is more than one frame, this SHALL
     * have a value in order to alert interface software that a multi-frame
     * capable rendering widget is required.
     */
    set frames(value: PositiveInt) {
      this._content["frames"] = value;
    }

    get frames(): PositiveInt {
      return this._content["frames"] as PositiveInt;
    }

    /** Height of the image in pixels (photo/video). */
    set height(value: PositiveInt) {
      this._content["height"] = value;
    }

    get height(): PositiveInt {
      return this._content["height"] as PositiveInt;
    }

    /**
     * Identifiers associated with the image - these may include identifiers for
     * the image itself, identifiers for the context of its collection (e.g.
     * series ids) and context ids such as accession numbers or other workflow
     * identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Comments made about the media by the performer, subject or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The date and time(s) at which the media was collected. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /** The person who administered the collection of the image. */
    set operator(value: Reference) {
      this._content["operator"] = value;
    }

    get operator(): Reference {
      return this._content["operator"] as Reference;
    }

    /** Describes why the event occurred in coded or textual form. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Who/What this Media is a record of. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Details of the type of the media - usually, how it was acquired (what
     * type of device). If images sourced from a DICOM system, are wrapped in a
     * Media resource, then this is the modality.
     */
    set subtype(value: CodeableConcept) {
      this._content["subtype"] = value;
    }

    get subtype(): CodeableConcept {
      return this._content["subtype"] as CodeableConcept;
    }

    /**
     * Whether the media is a photo (still image), an audio recording, or a
     * video recording.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** The name of the imaging view e.g. Lateral or Antero-posterior (AP). */
    set view(value: CodeableConcept) {
      this._content["view"] = value;
    }

    get view(): CodeableConcept {
      return this._content["view"] as CodeableConcept;
    }

    /** Width of the image in pixels (photo/video). */
    set width(value: PositiveInt) {
      this._content["width"] = value;
    }

    get width(): PositiveInt {
      return this._content["width"] as PositiveInt;
    }
  }

  /** Base StructureDefinition for Medication Resource */
  export class Medication extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Medication";

    /**
     * A code (or set of codes) that specify this medication, or a textual
     * description if no code is available. Usage note: This could be a standard
     * medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could
     * also be a national or local formulary code, optionally with translations
     * to other code systems.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Describes the form of the item. Powder; tablets; capsule. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** Photo(s) or graphic representation(s) of the medication. */
    set image(value: Array<Attachment>) {
      this._content["image"] = value;
    }

    get image(): Array<Attachment> {
      return this._content["image"] as Array<Attachment>;
    }

    /** Identifies a particular constituent of interest in the product. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /** Set to true if the item is attributable to a specific manufacturer. */
    set isBrand(value: Boolean) {
      this._content["isBrand"] = value;
    }

    get isBrand(): Boolean {
      return this._content["isBrand"] as Boolean;
    }

    /**
     * Set to true if the medication can be obtained without an order from a
     * prescriber.
     */
    set isOverTheCounter(value: Boolean) {
      this._content["isOverTheCounter"] = value;
    }

    get isOverTheCounter(): Boolean {
      return this._content["isOverTheCounter"] as Boolean;
    }

    /**
     * Describes the details of the manufacturer of the medication product. This
     * is not intended to represent the distributor of a medication product.
     */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /** Information that only applies to packages (not products). */
    set package(value: BackboneElement) {
      this._content["package"] = value;
    }

    get package(): BackboneElement {
      return this._content["package"] as BackboneElement;
    }

    /** A code to indicate if the medication is in active use. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for MedicationAdministration Resource */
  export class MedicationAdministration extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationAdministration";

    /**
     * Indicates the type of medication administration and where the medication
     * is expected to be consumed or administered.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The visit, admission or other contact between patient and health care
     * provider the medication administration was performed as part of.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A protocol, guideline, orderset or other definition that was adhered to
     * in whole or in part by this event.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * The device used in administering the medication to the patient. For
     * example, a particular infusion pump.
     */
    set device(value: Array<Reference>) {
      this._content["device"] = value;
    }

    get device(): Array<Reference> {
      return this._content["device"] as Array<Reference>;
    }

    /**
     * Describes the medication dosage information details e.g. dose, rate,
     * site, route, etc.
     */
    set dosage(value: BackboneElement) {
      this._content["dosage"] = value;
    }

    get dosage(): BackboneElement {
      return this._content["dosage"] as BackboneElement;
    }

    /**
     * A specific date/time or interval of time during which the administration
     * took place (or did not take place, when the 'notGiven' attribute is
     * true). For many administrations, such as swallowing a tablet the use of
     * dateTime is more appropriate.
     */
    set effective(value: DateTime) {
      this._content["effective"] = value;
    }

    get effective(): DateTime {
      return this._content["effective"] as DateTime;
    }

    /**
     * A summary of the events of interest that have occurred, such as when the
     * administration was verified.
     */
    set eventHistory(value: Array<Reference>) {
      this._content["eventHistory"] = value;
    }

    get eventHistory(): Array<Reference> {
      return this._content["eventHistory"] as Array<Reference>;
    }

    /**
     * External identifier - FHIR will generate its own internal identifiers
     * (probably URLs) which do not need to be explicitly managed by the
     * resource. The identifier here is one that would be used by another
     * non-FHIR system - for example an automated medication pump would provide
     * a record each time it operated; an administration while the patient was
     * off the ward might be made with a different system and entered after the
     * event. Particularly important if these records have to be updated.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Identifies the medication that was administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    set medication(value: CodeableConcept) {
      this._content["medication"] = value;
    }

    get medication(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    /**
     * Set this to true if the record is saying that the medication was NOT
     * administered.
     */
    set notGiven(value: Boolean) {
      this._content["notGiven"] = value;
    }

    get notGiven(): Boolean {
      return this._content["notGiven"] as Boolean;
    }

    /**
     * Extra information about the medication administration that is not
     * conveyed by the other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * The individual who was responsible for giving the medication to the
     * patient.
     */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * The original request, instruction or authority to perform the
     * administration.
     */
    set prescription(value: Reference) {
      this._content["prescription"] = value;
    }

    get prescription(): Reference {
      return this._content["prescription"] as Reference;
    }

    /** A code indicating why the medication was given. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** A code indicating why the administration was not performed. */
    set reasonNotGiven(value: Array<CodeableConcept>) {
      this._content["reasonNotGiven"] = value;
    }

    get reasonNotGiven(): Array<CodeableConcept> {
      return this._content["reasonNotGiven"] as Array<CodeableConcept>;
    }

    /**
     * Condition or observation that supports why the medication was
     * administered.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * Will generally be set to show that the administration has been completed.
     * For some long running administrations such as infusions it is possible
     * for an administration to be started but not completed or it may be paused
     * while some other process is under way.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The person or animal or group receiving the medication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Additional information (for example, patient height and weight) that
     * supports the administration of the medication.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for MedicationDispense Resource */
  export class MedicationDispense extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationDispense";

    /** Indicates the medication order that is being dispensed against. */
    set authorizingPrescription(value: Array<Reference>) {
      this._content["authorizingPrescription"] = value;
    }

    get authorizingPrescription(): Array<Reference> {
      return this._content["authorizingPrescription"] as Array<Reference>;
    }

    /**
     * Indicates type of medication dispense and where the medication is
     * expected to be consumed or administered.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * event.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** The amount of medication expressed as a timing amount. */
    set daysSupply(value: Quantity) {
      this._content["daysSupply"] = value;
    }

    get daysSupply(): Quantity {
      return this._content["daysSupply"] as Quantity;
    }

    /**
     * Identification of the facility/location where the medication was shipped
     * to, as part of the dispense event.
     */
    set destination(value: Reference) {
      this._content["destination"] = value;
    }

    get destination(): Reference {
      return this._content["destination"] as Reference;
    }

    /**
     * Indicates an actual or potential clinical issue with or between one or
     * more active or proposed clinical actions for a patient; e.g. Drug-drug
     * interaction, duplicate therapy, dosage alert etc.
     */
    set detectedIssue(value: Array<Reference>) {
      this._content["detectedIssue"] = value;
    }

    get detectedIssue(): Array<Reference> {
      return this._content["detectedIssue"] as Array<Reference>;
    }

    /** Indicates how the medication is to be used by the patient. */
    set dosageInstruction(value: Array<Dosage>) {
      this._content["dosageInstruction"] = value;
    }

    get dosageInstruction(): Array<Dosage> {
      return this._content["dosageInstruction"] as Array<Dosage>;
    }

    /**
     * A summary of the events of interest that have occurred, such as when the
     * dispense was verified.
     */
    set eventHistory(value: Array<Reference>) {
      this._content["eventHistory"] = value;
    }

    get eventHistory(): Array<Reference> {
      return this._content["eventHistory"] as Array<Reference>;
    }

    /**
     * Identifier assigned by the dispensing facility - this is an identifier
     * assigned outside FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Identifies the medication being administered. This is either a link to a
     * resource representing the details of the medication or a simple attribute
     * carrying a code that identifies the medication from a known list of
     * medications.
     */
    set medication(value: CodeableConcept) {
      this._content["medication"] = value;
    }

    get medication(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    /** True if the dispense was not performed for some reason. */
    set notDone(value: Boolean) {
      this._content["notDone"] = value;
    }

    get notDone(): Boolean {
      return this._content["notDone"] as Boolean;
    }

    /** Indicates the reason why a dispense was not performed. */
    set notDoneReason(value: CodeableConcept) {
      this._content["notDoneReason"] = value;
    }

    get notDoneReason(): CodeableConcept {
      return this._content["notDoneReason"] as CodeableConcept;
    }

    /**
     * Extra information about the dispense that could not be conveyed in the
     * other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The procedure that the dispense is done because of. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Indicates who or what performed the event. It should be assumed that the
     * performer is the dispenser of the medication.
     */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * The amount of medication that has been dispensed. Includes unit of
     * measure.
     */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Identifies the person who picked up the medication. This will usually be
     * a patient or their caregiver, but some cases exist where it can be a
     * healthcare professional.
     */
    set receiver(value: Array<Reference>) {
      this._content["receiver"] = value;
    }

    get receiver(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    /** A code specifying the state of the set of dispense events. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A link to a resource representing the person or the group to whom the
     * medication will be given.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Indicates whether or not substitution was made as part of the dispense.
     * In some cases substitution will be expected but does not happen, in other
     * cases substitution is not expected but does happen. This block explains
     * what substitution did or did not happen and why. If nothing is specified,
     * substitution was not done.
     */
    set substitution(value: BackboneElement) {
      this._content["substitution"] = value;
    }

    get substitution(): BackboneElement {
      return this._content["substitution"] as BackboneElement;
    }

    /** Additional information that supports the medication being dispensed. */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    /**
     * Indicates the type of dispensing event that is performed. For example,
     * Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples,
     * etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The time the dispensed product was provided to the patient or their
     * representative.
     */
    set whenHandedOver(value: DateTime) {
      this._content["whenHandedOver"] = value;
    }

    get whenHandedOver(): DateTime {
      return this._content["whenHandedOver"] as DateTime;
    }

    /** The time when the dispensed product was packaged and reviewed. */
    set whenPrepared(value: DateTime) {
      this._content["whenPrepared"] = value;
    }

    get whenPrepared(): DateTime {
      return this._content["whenPrepared"] as DateTime;
    }
  }

  /** Base StructureDefinition for MedicationRequest Resource */
  export class MedicationRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationRequest";

    /**
     * The date (and perhaps time) when the prescription was initially written
     * or authored on.
     */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * A plan or request that is fulfilled in whole or in part by this
     * medication request.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the type of medication order and where the medication is
     * expected to be consumed or administered.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * A link to an encounter, or episode of care, that identifies the
     * particular occurrence or set occurrences of contact between patient and
     * health care provider.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** Protocol or definition followed by this request. */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * Indicates an actual or potential clinical issue with or between one or
     * more active or proposed clinical actions for a patient; e.g. Drug-drug
     * interaction, duplicate therapy, dosage alert etc.
     */
    set detectedIssue(value: Array<Reference>) {
      this._content["detectedIssue"] = value;
    }

    get detectedIssue(): Array<Reference> {
      return this._content["detectedIssue"] as Array<Reference>;
    }

    /**
     * Indicates the specific details for the dispense or medication supply part
     * of a medication request (also known as a Medication Prescription or
     * Medication Order). Note that this information is not always sent with the
     * order. There may be in some settings (e.g. hospitals) institutional or
     * system support for completing the dispense details in the pharmacy
     * department.
     */
    set dispenseRequest(value: BackboneElement) {
      this._content["dispenseRequest"] = value;
    }

    get dispenseRequest(): BackboneElement {
      return this._content["dispenseRequest"] as BackboneElement;
    }

    /** Indicates how the medication is to be used by the patient. */
    set dosageInstruction(value: Array<Dosage>) {
      this._content["dosageInstruction"] = value;
    }

    get dosageInstruction(): Array<Dosage> {
      return this._content["dosageInstruction"] as Array<Dosage>;
    }

    /**
     * Links to Provenance records for past versions of this resource or
     * fulfilling request or event resources that identify key state transitions
     * or updates that are likely to be relevant to a user looking at the
     * current version of the resource.
     */
    set eventHistory(value: Array<Reference>) {
      this._content["eventHistory"] = value;
    }

    get eventHistory(): Array<Reference> {
      return this._content["eventHistory"] as Array<Reference>;
    }

    /**
     * A shared identifier common to all requests that were authorized more or
     * less simultaneously by a single author, representing the identifier of
     * the requisition or prescription.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * This records identifiers associated with this medication request that are
     * defined by business processes and/or used to refer to it when a direct
     * URL reference to the resource itself is not appropriate. For example a
     * re-imbursement system might issue its own id for each prescription that
     * is created. This is particularly important where FHIR only provides part
     * of an entire workflow process where records must be tracked through an
     * entire system.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Whether the request is a proposal, plan, or an original order. */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Identifies the medication being requested. This is a link to a resource
     * that represents the medication which may be the details of the medication
     * or simply an attribute carrying a code that identifies the medication
     * from a known list of medications.
     */
    set medication(value: CodeableConcept) {
      this._content["medication"] = value;
    }

    get medication(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    /**
     * Extra information about the prescription that could not be conveyed by
     * the other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A link to a resource representing an earlier order related order or
     * prescription.
     */
    set priorPrescription(value: Reference) {
      this._content["priorPrescription"] = value;
    }

    get priorPrescription(): Reference {
      return this._content["priorPrescription"] as Reference;
    }

    /**
     * Indicates how quickly the Medication Request should be addressed with
     * respect to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** The reason or the indication for ordering the medication. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Condition or observation that supports why the medication was ordered. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The person who entered the order on behalf of another individual for
     * example in the case of a verbal or a telephone order.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /**
     * The individual, organization or device that initiated the request and has
     * responsibility for its activation.
     */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /**
     * A code specifying the current state of the order. Generally this will be
     * active or completed state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A link to a resource representing the person or set of individuals to
     * whom the medication will be given.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Indicates whether or not substitution can or should be part of the
     * dispense. In some cases substitution must happen, in other cases
     * substitution must not happen. This block explains the prescriber's
     * intent. If nothing is specified substitution may be done.
     */
    set substitution(value: BackboneElement) {
      this._content["substitution"] = value;
    }

    get substitution(): BackboneElement {
      return this._content["substitution"] as BackboneElement;
    }

    /**
     * Include additional information (for example, patient height and weight)
     * that supports the ordering of the medication.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for MedicationStatement Resource */
  export class MedicationStatement extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationStatement";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * event.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates where type of medication statement and where the medication is
     * expected to be consumed or administered.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * MedicationStatement.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * The date when the medication statement was asserted by the information
     * source.
     */
    set dateAsserted(value: DateTime) {
      this._content["dateAsserted"] = value;
    }

    get dateAsserted(): DateTime {
      return this._content["dateAsserted"] as DateTime;
    }

    /**
     * Allows linking the MedicationStatement to the underlying
     * MedicationRequest, or to other information that supports or is used to
     * derive the MedicationStatement.
     */
    set derivedFrom(value: Array<Reference>) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Array<Reference> {
      return this._content["derivedFrom"] as Array<Reference>;
    }

    /** Indicates how the medication is/was or should be taken by the patient. */
    set dosage(value: Array<Dosage>) {
      this._content["dosage"] = value;
    }

    get dosage(): Array<Dosage> {
      return this._content["dosage"] as Array<Dosage>;
    }

    /**
     * The interval of time during which it is being asserted that the patient
     * was taking the medication (or was not taking, when the wasNotGiven
     * element is true).
     */
    set effective(value: DateTime) {
      this._content["effective"] = value;
    }

    get effective(): DateTime {
      return this._content["effective"] as DateTime;
    }

    /**
     * External identifier - FHIR will generate its own internal identifiers
     * (probably URLs) which do not need to be explicitly managed by the
     * resource. The identifier here is one that would be used by another
     * non-FHIR system - for example an automated medication pump would provide
     * a record each time it operated; an administration while the patient was
     * off the ward might be made with a different system and entered after the
     * event. Particularly important if these records have to be updated.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The person or organization that provided the information about the taking
     * of this medication. Note: Use derivedFrom when a MedicationStatement is
     * derived from other resources, e.g Claim or MedicationRequest.
     */
    set informationSource(value: Reference) {
      this._content["informationSource"] = value;
    }

    get informationSource(): Reference {
      return this._content["informationSource"] as Reference;
    }

    /**
     * Identifies the medication being administered. This is either a link to a
     * resource representing the details of the medication or a simple attribute
     * carrying a code that identifies the medication from a known list of
     * medications.
     */
    set medication(value: CodeableConcept) {
      this._content["medication"] = value;
    }

    get medication(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    /**
     * Provides extra information about the medication statement that is not
     * conveyed by the other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** A reason for why the medication is being/was taken. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** A code indicating why the medication was not taken. */
    set reasonNotTaken(value: Array<CodeableConcept>) {
      this._content["reasonNotTaken"] = value;
    }

    get reasonNotTaken(): Array<CodeableConcept> {
      return this._content["reasonNotTaken"] as Array<CodeableConcept>;
    }

    /**
     * Condition or observation that supports why the medication is being/was
     * taken.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the medication used that this statement is about. Generally this
     * will be active or completed.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The person, animal or group who is/was taking the medication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Indicator of the certainty of whether the medication was taken by the
     * patient.
     */
    set taken(value: Code) {
      this._content["taken"] = value;
    }

    get taken(): Code {
      return this._content["taken"] as Code;
    }
  }

  /** Base StructureDefinition for MessageDefinition Resource */
  export class MessageDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MessageDefinition";

    /**
     * Indicates what types of messages may be sent as an application-level
     * response to this message.
     */
    set allowedResponse(value: Array<BackboneElement>) {
      this._content["allowedResponse"] = value;
    }

    get allowedResponse(): Array<BackboneElement> {
      return this._content["allowedResponse"] as Array<BackboneElement>;
    }

    /**
     * The MessageDefinition that is the basis for the contents of this
     * resource.
     */
    set base(value: Reference) {
      this._content["base"] = value;
    }

    get base(): Reference {
      return this._content["base"] as Reference;
    }

    /** The impact of the content of the message. */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the message definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the message definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the message definition was published.
     * The date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the message definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the message definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** A coded identifier of a supported messaging event. */
    set event(value: Coding) {
      this._content["event"] = value;
    }

    get event(): Coding {
      return this._content["event"] as Coding;
    }

    /**
     * A boolean value to indicate that this message definition is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Identifies the resource (or resources) that are being addressed by the
     * event. For example, the Encounter for an admit message or two Account
     * records for a merge.
     */
    set focus(value: Array<BackboneElement>) {
      this._content["focus"] = value;
    }

    get focus(): Array<BackboneElement> {
      return this._content["focus"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this message definition when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A legal or geographic region in which the message definition is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the message definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Identifies a protocol or workflow that this MessageDefinition represents
     * a step in.
     */
    set parent(value: Array<Reference>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Reference> {
      return this._content["parent"] as Array<Reference>;
    }

    /**
     * The name of the individual or organization that published the message
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this message definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** A MessageDefinition that is superseded by this definition. */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /** Indicates whether a response is required for this message. */
    set responseRequired(value: Boolean) {
      this._content["responseRequired"] = value;
    }

    get responseRequired(): Boolean {
      return this._content["responseRequired"] as Boolean;
    }

    /**
     * The status of this message definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the message definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this message definition when it
     * is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this message definition is (or will be) published. The URL SHOULD
     * include the major version of the message definition. For more information
     * see [Technical and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate message definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the message
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the message definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for MessageHeader Resource */
  export class MessageHeader extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MessageHeader";

    /**
     * The logical author of the message - the person or device that decided the
     * described event should happen. When there is more than one candidate,
     * pick the most proximal to the MessageHeader. Can provide other authors in
     * extensions.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** The destination application which the message is intended for. */
    set destination(value: Array<BackboneElement>) {
      this._content["destination"] = value;
    }

    get destination(): Array<BackboneElement> {
      return this._content["destination"] as Array<BackboneElement>;
    }

    /**
     * The person or device that performed the data entry leading to this
     * message. When there is more than one candidate, pick the most proximal to
     * the message. Can provide other enterers in extensions.
     */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /**
     * Code that identifies the event this message represents and connects it
     * with its definition. Events defined as part of the FHIR specification
     * have the system value "http://hl7.org/fhir/message-events".
     */
    set event(value: Coding) {
      this._content["event"] = value;
    }

    get event(): Coding {
      return this._content["event"] as Coding;
    }

    /**
     * The actual data of the message - a reference to the root/focus class of
     * the event.
     */
    set focus(value: Array<Reference>) {
      this._content["focus"] = value;
    }

    get focus(): Array<Reference> {
      return this._content["focus"] as Array<Reference>;
    }

    /**
     * Coded indication of the cause for the event - indicates a reason for the
     * occurrence of the event that is a focus of this message.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * Allows data conveyed by a message to be addressed to a particular person
     * or department when routing to a specific application isn't sufficient.
     */
    set receiver(value: Reference) {
      this._content["receiver"] = value;
    }

    get receiver(): Reference {
      return this._content["receiver"] as Reference;
    }

    /**
     * Information about the message that this message is a response to. Only
     * present if this message is a response.
     */
    set response(value: BackboneElement) {
      this._content["response"] = value;
    }

    get response(): BackboneElement {
      return this._content["response"] as BackboneElement;
    }

    /**
     * The person or organization that accepts overall responsibility for the
     * contents of the message. The implication is that the message event
     * happened under the policies of the responsible party.
     */
    set responsible(value: Reference) {
      this._content["responsible"] = value;
    }

    get responsible(): Reference {
      return this._content["responsible"] as Reference;
    }

    /** Identifies the sending system to allow the use of a trust relationship. */
    set sender(value: Reference) {
      this._content["sender"] = value;
    }

    get sender(): Reference {
      return this._content["sender"] as Reference;
    }

    /** The source application from which this message originated. */
    set source(value: BackboneElement) {
      this._content["source"] = value;
    }

    get source(): BackboneElement {
      return this._content["source"] as BackboneElement;
    }

    /** The time that the message was sent. */
    set timestamp(value: Instant) {
      this._content["timestamp"] = value;
    }

    get timestamp(): Instant {
      return this._content["timestamp"] as Instant;
    }
  }

  /** Base StructureDefinition for NamingSystem Resource */
  export class NamingSystem extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/NamingSystem";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the naming system was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the naming system changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the naming system from a
     * consumer's perspective. Details about what the namespace identifies
     * including scope, granularity, version labeling, etc.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A legal or geographic region in which the naming system is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * Indicates the purpose for the naming system - what kinds of things does
     * it make unique?
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * A natural language name identifying the naming system. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the naming
     * system.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * For naming systems that are retired, indicates the naming system that
     * should be used in their place (if any).
     */
    set replacedBy(value: Reference) {
      this._content["replacedBy"] = value;
    }

    get replacedBy(): Reference {
      return this._content["replacedBy"] as Reference;
    }

    /**
     * The name of the organization that is responsible for issuing identifiers
     * or codes for this namespace and ensuring their non-collision.
     */
    set responsible(value: String) {
      this._content["responsible"] = value;
    }

    get responsible(): String {
      return this._content["responsible"] as String;
    }

    /**
     * The status of this naming system. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Categorizes a naming system for easier search by grouping related naming
     * systems.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Indicates how the system may be identified when referenced in electronic
     * exchange.
     */
    set uniqueId(value: Array<BackboneElement>) {
      this._content["uniqueId"] = value;
    }

    get uniqueId(): Array<BackboneElement> {
      return this._content["uniqueId"] as Array<BackboneElement>;
    }

    /**
     * Provides guidance on the use of the namespace, including the handling of
     * formatting characters, use of upper vs. lower case, etc.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate naming system instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }
  }

  /** Base StructureDefinition for NutritionOrder Resource */
  export class NutritionOrder extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/NutritionOrder";

    /**
     * A link to a record of allergies or intolerances which should be included
     * in the nutrition order.
     */
    set allergyIntolerance(value: Array<Reference>) {
      this._content["allergyIntolerance"] = value;
    }

    get allergyIntolerance(): Array<Reference> {
      return this._content["allergyIntolerance"] as Array<Reference>;
    }

    /** The date and time that this nutrition order was requested. */
    set dateTime(value: DateTime) {
      this._content["dateTime"] = value;
    }

    get dateTime(): DateTime {
      return this._content["dateTime"] as DateTime;
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Feeding provided through the gastrointestinal tract via a tube, catheter,
     * or stoma that delivers nutrition distal to the oral cavity.
     */
    set enteralFormula(value: BackboneElement) {
      this._content["enteralFormula"] = value;
    }

    get enteralFormula(): BackboneElement {
      return this._content["enteralFormula"] as BackboneElement;
    }

    /**
     * This modifier is used to convey order-specific modifiers about the type
     * of food that should NOT be given. These can be derived from patient
     * allergies, intolerances, or preferences such as No Red Meat, No Soy or No
     * Wheat or Gluten-Free. While it should not be necessary to repeat allergy
     * or intolerance information captured in the referenced AllergyIntolerance
     * resource in the excludeFoodModifier, this element may be used to convey
     * additional specificity related to foods that should be eliminated from
     * the patient’s diet for any reason. This modifier applies to the entire
     * nutrition order inclusive of the oral diet, nutritional supplements and
     * enteral formula feedings.
     */
    set excludeFoodModifier(value: Array<CodeableConcept>) {
      this._content["excludeFoodModifier"] = value;
    }

    get excludeFoodModifier(): Array<CodeableConcept> {
      return this._content["excludeFoodModifier"] as Array<CodeableConcept>;
    }

    /**
     * This modifier is used to convey order-specific modifiers about the type
     * of food that should be given. These can be derived from patient
     * allergies, intolerances, or preferences such as Halal, Vegan or Kosher.
     * This modifier applies to the entire nutrition order inclusive of the oral
     * diet, nutritional supplements and enteral formula feedings.
     */
    set foodPreferenceModifier(value: Array<CodeableConcept>) {
      this._content["foodPreferenceModifier"] = value;
    }

    get foodPreferenceModifier(): Array<CodeableConcept> {
      return this._content["foodPreferenceModifier"] as Array<CodeableConcept>;
    }

    /**
     * Identifiers assigned to this order by the order sender or by the order
     * receiver.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Diet given orally in contrast to enteral (tube) feeding. */
    set oralDiet(value: BackboneElement) {
      this._content["oralDiet"] = value;
    }

    get oralDiet(): BackboneElement {
      return this._content["oralDiet"] as BackboneElement;
    }

    /**
     * The practitioner that holds legal responsibility for ordering the diet,
     * nutritional supplement, or formula feedings.
     */
    set orderer(value: Reference) {
      this._content["orderer"] = value;
    }

    get orderer(): Reference {
      return this._content["orderer"] as Reference;
    }

    /**
     * The person (patient) who needs the nutrition order for an oral diet,
     * nutritional supplement and/or enteral or formula feeding.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The workflow status of the nutrition order/request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Oral nutritional products given in order to add further nutritional value
     * to the patient's diet.
     */
    set supplement(value: Array<BackboneElement>) {
      this._content["supplement"] = value;
    }

    get supplement(): Array<BackboneElement> {
      return this._content["supplement"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for Observation Resource */
  export class Observation extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Observation";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * event.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the site on the subject's body where the observation was made
     * (i.e. the target site).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /** A code that classifies the general type of observation being made. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Describes what was observed. Sometimes this is called the observation
     * "name".
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * May include statements about significant, unexpected or unreliable
     * values, or information about the source of the value where this may be
     * relevant to the interpretation of the result.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * Some observations have multiple component observations. These component
     * observations are expressed as separate code value pairs that share the
     * same attributes. Examples include systolic and diastolic component
     * observations for blood pressure measurement and multiple component
     * observations for genetics observations.
     */
    set component(value: Array<BackboneElement>) {
      this._content["component"] = value;
    }

    get component(): Array<BackboneElement> {
      return this._content["component"] as Array<BackboneElement>;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * during which this observation is made.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * Provides a reason why the expected value in the element
     * Observation.value[x] is missing.
     */
    set dataAbsentReason(value: CodeableConcept) {
      this._content["dataAbsentReason"] = value;
    }

    get dataAbsentReason(): CodeableConcept {
      return this._content["dataAbsentReason"] as CodeableConcept;
    }

    /** The device used to generate the observation data. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /**
     * The time or time-period the observed value is asserted as being true. For
     * biological subjects - e.g. human patients - this is usually called the
     * "physiologically relevant time". This is usually either the time of the
     * procedure or of specimen collection, but very often the source of the
     * date/time is not known, only the date/time itself.
     */
    set effective(value: DateTime) {
      this._content["effective"] = value;
    }

    get effective(): DateTime {
      return this._content["effective"] as DateTime;
    }

    /** A unique identifier assigned to this observation. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The assessment made based on the result of the observation. Intended as a
     * simple compact code often placed adjacent to the result value in reports
     * and flow sheets to signal the meaning/normalcy status of the result.
     * Otherwise known as abnormal flag.
     */
    set interpretation(value: CodeableConcept) {
      this._content["interpretation"] = value;
    }

    get interpretation(): CodeableConcept {
      return this._content["interpretation"] as CodeableConcept;
    }

    /**
     * The date and time this observation was made available to providers,
     * typically after the results have been reviewed and verified.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /** Indicates the mechanism used to perform the observation. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /** Who was responsible for asserting the observed value as "true". */
    set performer(value: Array<Reference>) {
      this._content["performer"] = value;
    }

    get performer(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    /**
     * Guidance on how to interpret the value by comparison to a normal or
     * recommended range.
     */
    set referenceRange(value: Array<BackboneElement>) {
      this._content["referenceRange"] = value;
    }

    get referenceRange(): Array<BackboneElement> {
      return this._content["referenceRange"] as Array<BackboneElement>;
    }

    /**
     * A reference to another resource (usually another Observation) whose
     * relationship is defined by the relationship type code.
     */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /** The specimen that was used when this observation was made. */
    set specimen(value: Reference) {
      this._content["specimen"] = value;
    }

    get specimen(): Reference {
      return this._content["specimen"] as Reference;
    }

    /** The status of the result value. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The patient, or group of patients, location, or device whose
     * characteristics (direct or indirect) are described by the observation and
     * into whose record the observation is placed. Comments: Indirect
     * characteristics may be those of a specimen, fetus, donor, other observer
     * (for example a relative or EMT), or any observation made about the
     * subject.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The information determined as a result of making the observation, if the
     * information has a simple value.
     */
    set value(value: Quantity) {
      this._content["value"] = value;
    }

    get value(): Quantity {
      return this._content["value"] as Quantity;
    }
  }

  /** Base StructureDefinition for OperationDefinition Resource */
  export class OperationDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OperationDefinition";

    /**
     * Indicates that this operation definition is a constraining profile on the
     * base.
     */
    set base(value: Reference) {
      this._content["base"] = value;
    }

    get base(): Reference {
      return this._content["base"] as Reference;
    }

    /** The name used to invoke the operation. */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /** Additional information about how to use this operation or named query. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the operation definition was
     * published. The date must change if and when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the operation definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the operation definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this operation definition is authored
     * for testing purposes (or education/evaluation/marketing), and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Operations that are idempotent (see [HTTP specification definition of
     * idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may
     * be invoked by performing an HTTP GET operation instead of a POST.
     */
    set idempotent(value: Boolean) {
      this._content["idempotent"] = value;
    }

    get idempotent(): Boolean {
      return this._content["idempotent"] as Boolean;
    }

    /**
     * Indicates whether this operation can be invoked on a particular instance
     * of one of the given types.
     */
    set instance(value: Boolean) {
      this._content["instance"] = value;
    }

    get instance(): Boolean {
      return this._content["instance"] as Boolean;
    }

    /**
     * A legal or geographic region in which the operation definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** Whether this is an operation or a named query. */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * A natural language name identifying the operation definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Defines an appropriate combination of parameters to use when invoking
     * this operation, to help code generators when generating overloaded
     * parameter sets for this operation.
     */
    set overload(value: Array<BackboneElement>) {
      this._content["overload"] = value;
    }

    get overload(): Array<BackboneElement> {
      return this._content["overload"] as Array<BackboneElement>;
    }

    /** The parameters for the operation/query. */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }

    /**
     * The name of the individual or organization that published the operation
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this operation definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** The types on which this operation can be executed. */
    set resource(value: Array<Code>) {
      this._content["resource"] = value;
    }

    get resource(): Array<Code> {
      return this._content["resource"] as Array<Code>;
    }

    /**
     * The status of this operation definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * system level (e.g. without needing to choose a resource type for the
     * context).
     */
    set system(value: Boolean) {
      this._content["system"] = value;
    }

    get system(): Boolean {
      return this._content["system"] as Boolean;
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * resource type level for any given resource type level (e.g. without
     * needing to choose a specific resource id for the context).
     */
    set type(value: Boolean) {
      this._content["type"] = value;
    }

    get type(): Boolean {
      return this._content["type"] as Boolean;
    }

    /**
     * An absolute URI that is used to identify this operation definition when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this operation definition is (or will be) published. The URL SHOULD
     * include the major version of the operation definition. For more
     * information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate operation definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the operation
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the operation definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for OperationOutcome Resource */
  export class OperationOutcome extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OperationOutcome";

    /**
     * An error, warning or information message that results from a system
     * action.
     */
    set issue(value: Array<BackboneElement>) {
      this._content["issue"] = value;
    }

    get issue(): Array<BackboneElement> {
      return this._content["issue"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for Organization Resource */
  export class Organization extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Organization";

    /** Whether the organization's record is still in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** An address for the organization. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /**
     * A list of alternate names that the organization is known as, or was known
     * as in the past.
     */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /** Contact for the organization for a certain purpose. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * organization.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /**
     * Identifier for the organization that is used to identify the organization
     * across multiple disparate systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A name associated with the organization. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The organization of which this organization forms a part. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** A contact detail for the organization. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** The kind(s) of organization that this is. */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /** Base StructureDefinition for Parameters Resource */
  export class Parameters extends Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Parameters";

    /** A parameter passed to or received from the operation. */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for Patient Resource */
  export class Patient extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Patient";

    /** Whether this patient record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** Addresses for the individual. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** This patient is known to be an animal. */
    set animal(value: BackboneElement) {
      this._content["animal"] = value;
    }

    get animal(): BackboneElement {
      return this._content["animal"] as BackboneElement;
    }

    /** The date of birth for the individual. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * Languages which may be used to communicate with the patient about his or
     * her health.
     */
    set communication(value: Array<BackboneElement>) {
      this._content["communication"] = value;
    }

    get communication(): Array<BackboneElement> {
      return this._content["communication"] as Array<BackboneElement>;
    }

    /** A contact party (e.g. guardian, partner, friend) for the patient. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /** Indicates if the individual is deceased or not. */
    set deceased(value: Boolean) {
      this._content["deceased"] = value;
    }

    get deceased(): Boolean {
      return this._content["deceased"] as Boolean;
    }

    /**
     * Administrative Gender - the gender that the patient is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** Patient's nominated care provider. */
    set generalPractitioner(value: Array<Reference>) {
      this._content["generalPractitioner"] = value;
    }

    get generalPractitioner(): Array<Reference> {
      return this._content["generalPractitioner"] as Array<Reference>;
    }

    /** An identifier for this patient. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Link to another patient resource that concerns the same actual patient. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** Organization that is the custodian of the patient record. */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** This field contains a patient's most recent marital (civil) status. */
    set maritalStatus(value: CodeableConcept) {
      this._content["maritalStatus"] = value;
    }

    get maritalStatus(): CodeableConcept {
      return this._content["maritalStatus"] as CodeableConcept;
    }

    /**
     * Indicates whether the patient is part of a multiple (bool) or indicates
     * the actual birth order (integer).
     */
    set multipleBirth(value: Boolean) {
      this._content["multipleBirth"] = value;
    }

    get multipleBirth(): Boolean {
      return this._content["multipleBirth"] as Boolean;
    }

    /** A name associated with the individual. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** Image of the patient. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /**
     * A contact detail (e.g. a telephone number or an email address) by which
     * the individual may be contacted.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** Base StructureDefinition for PaymentNotice Resource */
  export class PaymentNotice extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PaymentNotice";

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** The notice business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The payment status, typically paid: payment sent, cleared: payment
     * received.
     */
    set paymentStatus(value: CodeableConcept) {
      this._content["paymentStatus"] = value;
    }

    get paymentStatus(): CodeableConcept {
      return this._content["paymentStatus"] as CodeableConcept;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** Reference of resource for which payment is being made. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** Reference of response to resource for which payment is being made. */
    set response(value: Reference) {
      this._content["response"] = value;
    }

    get response(): Reference {
      return this._content["response"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The date when the above payment action occurrred. */
    set statusDate(value: Date) {
      this._content["statusDate"] = value;
    }

    get statusDate(): Date {
      return this._content["statusDate"] as Date;
    }

    /** The Insurer who is target of the request. */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }
  }

  /** Base StructureDefinition for PaymentReconciliation Resource */
  export class PaymentReconciliation extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation";

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** List of individual settlement amounts and the corresponding transaction. */
    set detail(value: Array<BackboneElement>) {
      this._content["detail"] = value;
    }

    get detail(): Array<BackboneElement> {
      return this._content["detail"] as Array<BackboneElement>;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** The form to be used for printing the content. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** Transaction status: error, complete. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /**
     * The period of time for which payments have been gathered into this bulk
     * payment for settlement.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Suite of notes. */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Total payment amount. */
    set total(value: Money) {
      this._content["total"] = value;
    }

    get total(): Money {
      return this._content["total"] as Money;
    }
  }

  /** Base StructureDefinition for Person Resource */
  export class Person extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Person";

    /** Whether this person's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** One or more addresses for the person. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The birth date for the person. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /** Administrative Gender. */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** Identifier for a person within a particular scope. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Link to a resource that concerns the same actual person. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** The organization that is the custodian of the person record. */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** A name associated with the person. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /**
     * An image that can be displayed as a thumbnail of the person to enhance
     * the identification of the individual.
     */
    set photo(value: Attachment) {
      this._content["photo"] = value;
    }

    get photo(): Attachment {
      return this._content["photo"] as Attachment;
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** Base StructureDefinition for PlanDefinition Resource */
  export class PlanDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PlanDefinition";

    /** An action to be taken as part of the plan. */
    set action(value: Array<BackboneElement>) {
      this._content["action"] = value;
    }

    get action(): Array<BackboneElement> {
      return this._content["action"] as Array<BackboneElement>;
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A contributor to the content of the asset, including authors, editors,
     * reviewers, and endorsers.
     */
    set contributor(value: Array<Contributor>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Contributor> {
      return this._content["contributor"] as Array<Contributor>;
    }

    /**
     * A copyright statement relating to the plan definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the plan definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the plan definition was published.
     * The date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the plan definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the plan definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the plan definition content was or is planned to
     * be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A boolean value to indicate that this plan definition is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Goals that describe what the activities within the plan are intended to
     * achieve. For example, weight loss, restoring an activity of daily living,
     * obtaining herd immunity via immunization, meeting a process improvement
     * objective, etc.
     */
    set goal(value: Array<BackboneElement>) {
      this._content["goal"] = value;
    }

    get goal(): Array<BackboneElement> {
      return this._content["goal"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this plan definition when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the plan definition is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval, but doesn't change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing any formal logic used by the
     * plan definition.
     */
    set library(value: Array<Reference>) {
      this._content["library"] = value;
    }

    get library(): Array<Reference> {
      return this._content["library"] as Array<Reference>;
    }

    /**
     * A natural language name identifying the plan definition. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the plan
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this plan definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * The status of this plan definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the plan definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the plan definition. Topics
     * provide a high-level categorization of the definition that can be useful
     * for filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * The type of asset the plan definition represents, e.g. an order set,
     * protocol, or event-condition-action rule.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * An absolute URI that is used to identify this plan definition when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this plan definition is (or will be) published. The URL SHOULD include
     * the major version of the plan definition. For more information see
     * [Technical and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the asset is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate plan definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the plan
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the plan definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Practitioner Resource */
  export class Practitioner extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Practitioner";

    /** Whether this practitioner's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Address(es) of the practitioner that are not role specific (typically
     * home address). Work addresses are not typically entered in this property
     * as they are usually role dependent.
     */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The date of birth for the practitioner. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /** A language the practitioner is able to use in patient communication. */
    set communication(value: Array<CodeableConcept>) {
      this._content["communication"] = value;
    }

    get communication(): Array<CodeableConcept> {
      return this._content["communication"] as Array<CodeableConcept>;
    }

    /**
     * Administrative Gender - the gender that the person is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** An identifier that applies to this person in this role. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The name(s) associated with the practitioner. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** Image of the person. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /** Qualifications obtained by training and certification. */
    set qualification(value: Array<BackboneElement>) {
      this._content["qualification"] = value;
    }

    get qualification(): Array<BackboneElement> {
      return this._content["qualification"] as Array<BackboneElement>;
    }

    /**
     * A contact detail for the practitioner, e.g. a telephone number or an
     * email address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** Base StructureDefinition for PractitionerRole Resource */
  export class PractitionerRole extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PractitionerRole";

    /** Whether this practitioner's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * A description of site availability exceptions, e.g. public holiday
     * availability. Succinctly describing all possible exceptions to normal
     * site availability as details in the available Times and not available
     * Times.
     */
    set availabilityExceptions(value: String) {
      this._content["availabilityExceptions"] = value;
    }

    get availabilityExceptions(): String {
      return this._content["availabilityExceptions"] as String;
    }

    /** A collection of times that the Service Site is available. */
    set availableTime(value: Array<BackboneElement>) {
      this._content["availableTime"] = value;
    }

    get availableTime(): Array<BackboneElement> {
      return this._content["availableTime"] as Array<BackboneElement>;
    }

    /**
     * Roles which this practitioner is authorized to perform for the
     * organization.
     */
    set code(value: Array<CodeableConcept>) {
      this._content["code"] = value;
    }

    get code(): Array<CodeableConcept> {
      return this._content["code"] as Array<CodeableConcept>;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * practitioner with this role.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /**
     * The list of healthcare services that this worker provides for this role's
     * Organization/Location(s).
     */
    set healthcareService(value: Array<Reference>) {
      this._content["healthcareService"] = value;
    }

    get healthcareService(): Array<Reference> {
      return this._content["healthcareService"] as Array<Reference>;
    }

    /** Business Identifiers that are specific to a role/location. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The location(s) at which this practitioner provides care. */
    set location(value: Array<Reference>) {
      this._content["location"] = value;
    }

    get location(): Array<Reference> {
      return this._content["location"] as Array<Reference>;
    }

    /**
     * The HealthcareService is not available during this period of time due to
     * the provided reason.
     */
    set notAvailable(value: Array<BackboneElement>) {
      this._content["notAvailable"] = value;
    }

    get notAvailable(): Array<BackboneElement> {
      return this._content["notAvailable"] as Array<BackboneElement>;
    }

    /** The organization where the Practitioner performs the roles associated. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The period during which the person is authorized to act as a practitioner
     * in these role(s) for the organization.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Practitioner that is able to provide the defined services for the
     * organation.
     */
    set practitioner(value: Reference) {
      this._content["practitioner"] = value;
    }

    get practitioner(): Reference {
      return this._content["practitioner"] as Reference;
    }

    /** Specific specialty of the practitioner. */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** Contact details that are specific to the role/location/service. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** Base StructureDefinition for Procedure Resource */
  export class Procedure extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Procedure";

    /**
     * A reference to a resource that contains details of the request for this
     * procedure.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Detailed and structured anatomical location information. Multiple
     * locations are allowed - e.g. multiple punch biopsies of a lesion.
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * A code that classifies the procedure for searching, sorting and display
     * purposes (e.g. "Surgical Procedure").
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The specific procedure that is performed. Use text if the exact nature of
     * the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Any complications that occurred during the procedure, or in the immediate
     * post-performance period. These are generally tracked separately from the
     * notes, which will typically describe the procedure itself rather than any
     * 'post procedure' issues.
     */
    set complication(value: Array<CodeableConcept>) {
      this._content["complication"] = value;
    }

    get complication(): Array<CodeableConcept> {
      return this._content["complication"] as Array<CodeableConcept>;
    }

    /**
     * Any complications that occurred during the procedure, or in the immediate
     * post-performance period.
     */
    set complicationDetail(value: Array<Reference>) {
      this._content["complicationDetail"] = value;
    }

    get complicationDetail(): Array<Reference> {
      return this._content["complicationDetail"] as Array<Reference>;
    }

    /** The encounter during which the procedure was performed. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A protocol, guideline, orderset or other definition that was adhered to
     * in whole or in part by this procedure.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * A device that is implanted, removed or otherwise manipulated
     * (calibration, battery replacement, fitting a prosthesis, attaching a
     * wound-vac, etc.) as a focal portion of the Procedure.
     */
    set focalDevice(value: Array<BackboneElement>) {
      this._content["focalDevice"] = value;
    }

    get focalDevice(): Array<BackboneElement> {
      return this._content["focalDevice"] as Array<BackboneElement>;
    }

    /**
     * If the procedure required specific follow up - e.g. removal of sutures.
     * The followup may be represented as a simple note, or could potentially be
     * more complex in which case the CarePlan resource can be used.
     */
    set followUp(value: Array<CodeableConcept>) {
      this._content["followUp"] = value;
    }

    get followUp(): Array<CodeableConcept> {
      return this._content["followUp"] as Array<CodeableConcept>;
    }

    /**
     * This records identifiers associated with this procedure that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate (e.g. in CDA
     * documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The location where the procedure actually happened. E.g. a newborn at
     * home, a tracheostomy at a restaurant.
     */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * Set this to true if the record is saying that the procedure was NOT
     * performed.
     */
    set notDone(value: Boolean) {
      this._content["notDone"] = value;
    }

    get notDone(): Boolean {
      return this._content["notDone"] as Boolean;
    }

    /** A code indicating why the procedure was not performed. */
    set notDoneReason(value: CodeableConcept) {
      this._content["notDoneReason"] = value;
    }

    get notDoneReason(): CodeableConcept {
      return this._content["notDoneReason"] as CodeableConcept;
    }

    /** Any other notes about the procedure. E.g. the operative notes. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The outcome of the procedure - did it resolve reasons for the procedure
     * being performed?
     */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** A larger event of which this particular procedure is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * The date(time)/period over which the procedure was performed. Allows a
     * period to support complex procedures that span more than one date, and
     * also allows for the length of the procedure to be captured.
     */
    set performed(value: DateTime) {
      this._content["performed"] = value;
    }

    get performed(): DateTime {
      return this._content["performed"] as DateTime;
    }

    /** Limited to 'real' people rather than equipment. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * The coded reason why the procedure was performed. This may be coded
     * entity of some type, or may simply be present as text.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** The condition that is the reason why the procedure was performed. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * This could be a histology result, pathology report, surgical report,
     * etc..
     */
    set report(value: Array<Reference>) {
      this._content["report"] = value;
    }

    get report(): Array<Reference> {
      return this._content["report"] as Array<Reference>;
    }

    /**
     * A code specifying the state of the procedure. Generally this will be
     * in-progress or completed state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The person, animal or group on which the procedure was performed. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Identifies coded items that were used as part of the procedure. */
    set usedCode(value: Array<CodeableConcept>) {
      this._content["usedCode"] = value;
    }

    get usedCode(): Array<CodeableConcept> {
      return this._content["usedCode"] as Array<CodeableConcept>;
    }

    /**
     * Identifies medications, devices and any other substance used as part of
     * the procedure.
     */
    set usedReference(value: Array<Reference>) {
      this._content["usedReference"] = value;
    }

    get usedReference(): Array<Reference> {
      return this._content["usedReference"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for ProcedureRequest Resource */
  export class ProcedureRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProcedureRequest";

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for
     * performing the procedure. For example "pain", "on flare-up", etc.
     */
    set asNeeded(value: Boolean) {
      this._content["asNeeded"] = value;
    }

    get asNeeded(): Boolean {
      return this._content["asNeeded"] as Boolean;
    }

    /** When the request transitioned to being actionable. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /** Plan/proposal/order fulfilled by this request. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Anatomic location where the procedure should be performed. This is the
     * target site.
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * A code that classifies the procedure for searching, sorting and display
     * purposes (e.g. "Surgical Procedure").
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * A code that identifies a particular procedure, diagnostic investigation,
     * or panel of investigations, that have been requested.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * An encounter or episode of care that provides additional information
     * about the healthcare context in which this request is made.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** Protocol or definition followed by this request. */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * Set this to true if the record is saying that the procedure should NOT be
     * performed.
     */
    set doNotPerform(value: Boolean) {
      this._content["doNotPerform"] = value;
    }

    get doNotPerform(): Boolean {
      return this._content["doNotPerform"] as Boolean;
    }

    /**
     * Identifiers assigned to this order instance by the orderer and/or the
     * receiver and/or order fulfiller.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Any other notes and comments made about the service request. For example,
     * letting provider know that "patient hates needles" or other provider
     * instructions.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The date/time at which the diagnostic testing should occur. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /**
     * The desired perfomer for doing the diagnostic testing. For example, the
     * surgeon, dermatopathologist, endoscopist, etc.
     */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Desired type of performer for doing the diagnostic testing. */
    set performerType(value: CodeableConcept) {
      this._content["performerType"] = value;
    }

    get performerType(): CodeableConcept {
      return this._content["performerType"] as CodeableConcept;
    }

    /**
     * Indicates how quickly the ProcedureRequest should be addressed with
     * respect to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * An explanation or justification for why this diagnostic investigation is
     * being requested in coded or textual form. This is often for billing
     * purposes. May relate to the resources referred to in
     * supportingInformation.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Indicates another resource that provides a justification for why this
     * diagnostic investigation is being requested. May relate to the resources
     * referred to in supportingInformation.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** Key events in the history of the request. */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /**
     * A shared identifier common to all procedure or diagnostic requests that
     * were authorized more or less simultaneously by a single author,
     * representing the composite or group identifier.
     */
    set requisition(value: Identifier) {
      this._content["requisition"] = value;
    }

    get requisition(): Identifier {
      return this._content["requisition"] as Identifier;
    }

    /** One or more specimens that the laboratory procedure will use. */
    set specimen(value: Array<Reference>) {
      this._content["specimen"] = value;
    }

    get specimen(): Array<Reference> {
      return this._content["specimen"] as Array<Reference>;
    }

    /** The status of the order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * On whom or what the procedure or diagnostic is to be performed. This is
     * usually a human patient, but can also be requested on animals, groups of
     * humans or animals, devices such as dialysis machines, or even locations
     * (typically for environmental scans).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Additional clinical information about the patient or specimen that may
     * influence the procedure or diagnostics or their interpretations. This
     * information includes diagnosis, clinical findings and other observations.
     * In laboratory ordering these are typically referred to as "ask at order
     * entry questions (AOEs)". This includes observations explicitly requested
     * by the producer (filler) to provide context or supporting information
     * needed to complete the order. For example, reporting the amount of
     * inspired oxygen for blood gas measurements.
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for ProcessRequest Resource */
  export class ProcessRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProcessRequest";

    /**
     * The type of processing action being requested, for example Reversal,
     * Readjudication, StatusRequest,PendedRequest.
     */
    set action(value: Code) {
      this._content["action"] = value;
    }

    get action(): Code {
      return this._content["action"] as Code;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Names of resource types to exclude. */
    set exclude(value: Array<String>) {
      this._content["exclude"] = value;
    }

    get exclude(): Array<String> {
      return this._content["exclude"] as Array<String>;
    }

    /** The ProcessRequest business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Names of resource types to include. */
    set include(value: Array<String>) {
      this._content["include"] = value;
    }

    get include(): Array<String> {
      return this._content["include"] as Array<String>;
    }

    /**
     * List of top level items to be re-adjudicated, if none specified then the
     * entire submission is re-adjudicated.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /** If true remove all history excluding audit. */
    set nullify(value: Boolean) {
      this._content["nullify"] = value;
    }

    get nullify(): Boolean {
      return this._content["nullify"] as Boolean;
    }

    /**
     * The organization which is responsible for the action speccified in this
     * request.
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * A period of time during which the fulfilling resources would have been
     * created.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * The practitioner who is responsible for the action specified in this
     * request.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** A reference to supply which authenticates the process. */
    set reference(value: String) {
      this._content["reference"] = value;
    }

    get reference(): String {
      return this._content["reference"] as String;
    }

    /** Reference of resource which is the target or subject of this action. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * Reference of a prior response to resource which is the target or subject
     * of this action.
     */
    set response(value: Reference) {
      this._content["response"] = value;
    }

    get response(): Reference {
      return this._content["response"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The organization which is the target of the request. */
    set target(value: Reference) {
      this._content["target"] = value;
    }

    get target(): Reference {
      return this._content["target"] as Reference;
    }
  }

  /** Base StructureDefinition for ProcessResponse Resource */
  export class ProcessResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProcessResponse";

    /**
     * Request for additional supporting or authorizing information, such as:
     * documents, images or resources.
     */
    set communicationRequest(value: Array<Reference>) {
      this._content["communicationRequest"] = value;
    }

    get communicationRequest(): Array<Reference> {
      return this._content["communicationRequest"] as Array<Reference>;
    }

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A description of the status of the adjudication or processing. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Processing errors. */
    set error(value: Array<CodeableConcept>) {
      this._content["error"] = value;
    }

    get error(): Array<CodeableConcept> {
      return this._content["error"] as Array<CodeableConcept>;
    }

    /** The form to be used for printing the content. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The organization who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** Transaction status: error, complete, held. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /**
     * Suite of processing notes or additional requirements if the processing
     * has been held.
     */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The organization which is responsible for the services rendered to the
     * patient.
     */
    set requestOrganization(value: Reference) {
      this._content["requestOrganization"] = value;
    }

    get requestOrganization(): Reference {
      return this._content["requestOrganization"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Provenance Resource */
  export class Provenance extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Provenance";

    /**
     * An activity is something that occurs over a period of time and acts upon
     * or with entities; it may include consuming, processing, transforming,
     * modifying, relocating, using, or generating entities.
     */
    set activity(value: Coding) {
      this._content["activity"] = value;
    }

    get activity(): Coding {
      return this._content["activity"] as Coding;
    }

    /**
     * An actor taking a role in an activity for which it can be assigned some
     * degree of responsibility for the activity taking place.
     */
    set agent(value: Array<BackboneElement>) {
      this._content["agent"] = value;
    }

    get agent(): Array<BackboneElement> {
      return this._content["agent"] as Array<BackboneElement>;
    }

    /** An entity used in this activity. */
    set entity(value: Array<BackboneElement>) {
      this._content["entity"] = value;
    }

    get entity(): Array<BackboneElement> {
      return this._content["entity"] as Array<BackboneElement>;
    }

    /** Where the activity occurred, if relevant. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** The period during which the activity occurred. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Policy or plan the activity was defined by. Typically, a single activity
     * may have multiple applicable policy documents, such as patient consent,
     * guarantor funding, etc.
     */
    set policy(value: Array<Uri>) {
      this._content["policy"] = value;
    }

    get policy(): Array<Uri> {
      return this._content["policy"] as Array<Uri>;
    }

    /** The reason that the activity was taking place. */
    set reason(value: Array<Coding>) {
      this._content["reason"] = value;
    }

    get reason(): Array<Coding> {
      return this._content["reason"] as Array<Coding>;
    }

    /** The instant of time at which the activity was recorded. */
    set recorded(value: Instant) {
      this._content["recorded"] = value;
    }

    get recorded(): Instant {
      return this._content["recorded"] as Instant;
    }

    /**
     * A digital signature on the target Reference(s). The signer should match a
     * Provenance.agent. The purpose of the signature is indicated.
     */
    set signature(value: Array<Signature>) {
      this._content["signature"] = value;
    }

    get signature(): Array<Signature> {
      return this._content["signature"] as Array<Signature>;
    }

    /**
     * The Reference(s) that were generated or updated by the activity described
     * in this resource. A provenance can point to more than one target if
     * multiple resources were created/updated by the same activity.
     */
    set target(value: Array<Reference>) {
      this._content["target"] = value;
    }

    get target(): Array<Reference> {
      return this._content["target"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for Questionnaire Resource */
  export class Questionnaire extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/Questionnaire";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An identifier for this question or group of questions in a particular
     * terminology such as LOINC.
     */
    set code(value: Array<Coding>) {
      this._content["code"] = value;
    }

    get code(): Array<Coding> {
      return this._content["code"] as Array<Coding>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the questionnaire and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the questionnaire.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the questionnaire was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the questionnaire changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the questionnaire from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the questionnaire content was or is planned to be
     * in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A boolean value to indicate that this questionnaire is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this questionnaire when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A particular question, question grouping or display text that is part of
     * the questionnaire.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * A legal or geographic region in which the questionnaire is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval, but doesn't change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the questionnaire. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the
     * questionnaire.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this questionnaire is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this questionnaire. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The types of subjects that can be the subject of responses created for
     * the questionnaire.
     */
    set subjectType(value: Array<Code>) {
      this._content["subjectType"] = value;
    }

    get subjectType(): Array<Code> {
      return this._content["subjectType"] as Array<Code>;
    }

    /** A short, descriptive, user-friendly title for the questionnaire. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this questionnaire when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this questionnaire is (or will be) published. The URL SHOULD include the
     * major version of the questionnaire. For more information see [Technical
     * and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate questionnaire instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the questionnaire
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the questionnaire author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for QuestionnaireResponse Resource */
  export class QuestionnaireResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse";

    /**
     * Person who received the answers to the questions in the
     * QuestionnaireResponse and recorded them in the system.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** The date and/or time that this set of answers were last changed. */
    set authored(value: DateTime) {
      this._content["authored"] = value;
    }

    get authored(): DateTime {
      return this._content["authored"] as DateTime;
    }

    /**
     * The order, proposal or plan that is fulfilled in whole or in part by this
     * QuestionnaireResponse. For example, a ProcedureRequest seeking an intake
     * assessment or a decision support recommendation to assess for post-partum
     * depression.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The encounter or episode of care with primary association to the
     * questionnaire response.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A business identifier assigned to a particular completed (or partially
     * completed) questionnaire.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A group or question item from the original questionnaire for which
     * answers are provided.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * A procedure or observation that this questionnaire was performed as part
     * of the execution of. For example, the surgery a checklist was executed as
     * part of.
     */
    set parent(value: Array<Reference>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Reference> {
      return this._content["parent"] as Array<Reference>;
    }

    /**
     * The Questionnaire that defines and organizes the questions for which
     * answers are being provided.
     */
    set questionnaire(value: Reference) {
      this._content["questionnaire"] = value;
    }

    get questionnaire(): Reference {
      return this._content["questionnaire"] as Reference;
    }

    /** The person who answered the questions about the subject. */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /** The position of the questionnaire response within its overall lifecycle. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The subject of the questionnaire response. This could be a patient,
     * organization, practitioner, device, etc. This is who/what the answers
     * apply to, but is not necessarily the source of information.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for ReferralRequest Resource */
  export class ReferralRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ReferralRequest";

    /**
     * Date/DateTime of creation for draft requests and date of activation for
     * active requests.
     */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * Indicates any plans, proposals or orders that this request is intended to
     * satisfy - in whole or in part.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The encounter at which the request for referral or transfer of care is
     * initiated.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A protocol, guideline, orderset or other definition that is adhered to in
     * whole or in part by this request.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * The reason element gives a short description of why the referral is being
     * made, the description expands on this to support a more complete clinical
     * summary.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The business identifier of the logical "grouping" request/order that this
     * referral is a part of.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * Business identifier that uniquely identifies the referral/care transfer
     * request instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Distinguishes the "level" of authorization/demand implicit in this
     * request.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /** Comments made about the referral request by any of the participants. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The period of time within which the services identified in the
     * referral/transfer of care is specified or required to occur.
     */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /**
     * An indication of the urgency of referral (or where applicable the type of
     * transfer of care) request.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * Description of clinical condition indicating why referral/transfer of
     * care is requested. For example: Pathological Anomalies, Disabled
     * (physical or mental), Behavioral Management.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this request. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The healthcare provider(s) or provider organization(s) who/which is to
     * receive the referral/transfer of care request.
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * Links to Provenance records for past versions of this resource or
     * fulfilling request or event resources that identify key state transitions
     * or updates that are likely to be relevant to a user looking at the
     * current version of the resource.
     */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /**
     * Completed or terminated request(s) whose function is taken by this new
     * request.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /**
     * The service(s) that is/are requested to be provided to the patient. For
     * example: cardiac pacemaker insertion.
     */
    set serviceRequested(value: Array<CodeableConcept>) {
      this._content["serviceRequested"] = value;
    }

    get serviceRequested(): Array<CodeableConcept> {
      return this._content["serviceRequested"] as Array<CodeableConcept>;
    }

    /**
     * Indication of the clinical domain or discipline to which the referral or
     * transfer of care request is sent. For example: Cardiology
     * Gastroenterology Diabetology.
     */
    set specialty(value: CodeableConcept) {
      this._content["specialty"] = value;
    }

    get specialty(): CodeableConcept {
      return this._content["specialty"] as CodeableConcept;
    }

    /**
     * The status of the authorization/intention reflected by the referral
     * request record.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient who is the subject of a referral or transfer of care request. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Any additional (administrative, financial or clinical) information
     * required to support request for referral or transfer of care. For
     * example: Presenting problems/chief complaints Medical History Family
     * History Alerts Allergy/Intolerance and Adverse Reactions Medications
     * Observations/Assessments (may include cognitive and fundtional
     * assessments) Diagnostic Reports Care Plan.
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }

    /**
     * An indication of the type of referral (or where applicable the type of
     * transfer of care) request.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for RelatedPerson Resource */
  export class RelatedPerson extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RelatedPerson";

    /** Whether this related person record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** Address where the related person can be contacted or visited. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The date on which the related person was born. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * Administrative Gender - the gender that the person is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** Identifier for a person within a particular scope. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A name associated with the person. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** The patient this person is related to. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The period of time that this relationship is considered to be valid. If
     * there are no dates defined, then the interval is unknown.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Image of the person. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /** The nature of the relationship between a patient and the related person. */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** Base StructureDefinition for RequestGroup Resource */
  export class RequestGroup extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/RequestGroup";

    /** The actions, if any, produced by the evaluation of the artifact. */
    set action(value: Array<BackboneElement>) {
      this._content["action"] = value;
    }

    get action(): Array<BackboneElement> {
      return this._content["action"] as Array<BackboneElement>;
    }

    /** Provides a reference to the author of the request group. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** Indicates when the request group was created. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * request.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** Describes the context of the request group, if any. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A protocol, guideline, orderset or other definition that is adhered to in
     * whole or in part by this request.
     */
    set definition(value: Array<Reference>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Reference> {
      return this._content["definition"] as Array<Reference>;
    }

    /**
     * A shared identifier common to all requests that were authorized more or
     * less simultaneously by a single author, representing the identifier of
     * the requisition, prescription or similar form.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * Allows a service to provide a unique, business identifier for the
     * request.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Indicates the level of authority/intentionality associated with the
     * request and where the request fits into the workflow chain.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Provides a mechanism to communicate additional information about the
     * response.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Indicates how quickly the request should be addressed with respect to
     * other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * Indicates the reason the request group was created. This is typically
     * provided as a parameter to the evaluation and echoed by the service,
     * although for some use cases, such as subscription- or event-based
     * scenarios, it may provide an indication of the cause for the response.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * Completed or terminated request(s) whose function is taken by this new
     * request.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The current state of the request. For request groups, the status reflects
     * the status of all the requests in the group.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The subject for which the request group was created. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for ResearchStudy Resource */
  export class ResearchStudy extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ResearchStudy";

    /**
     * Describes an expected sequence of events for one of the participants of a
     * study. E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out,
     * follow-up.
     */
    set arm(value: Array<BackboneElement>) {
      this._content["arm"] = value;
    }

    get arm(): Array<BackboneElement> {
      return this._content["arm"] as Array<BackboneElement>;
    }

    /**
     * Codes categorizing the type of study such as investigational vs.
     * observational, type of blinding, type of randomization, safety vs.
     * efficacy, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Contact details to assist a user in learning more about or engaging with
     * the study.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /** A full description of how the study is being conducted. */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Reference to a Group that defines the criteria for and quantity of
     * subjects participating in the study. E.g. " 200 female Europeans between
     * the ages of 20 and 45 with early onset diabetes".
     */
    set enrollment(value: Array<Reference>) {
      this._content["enrollment"] = value;
    }

    get enrollment(): Array<Reference> {
      return this._content["enrollment"] as Array<Reference>;
    }

    /**
     * The condition(s), medication(s), food(s), therapy(ies), device(s) or
     * other concerns or interventions that the study is seeking to gain more
     * information about.
     */
    set focus(value: Array<CodeableConcept>) {
      this._content["focus"] = value;
    }

    get focus(): Array<CodeableConcept> {
      return this._content["focus"] as Array<CodeableConcept>;
    }

    /**
     * Identifiers assigned to this research study by the sponsor or other
     * systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Indicates a country, state or other region where the study is taking
     * place.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** Key terms to aid in searching for or filtering the study. */
    set keyword(value: Array<CodeableConcept>) {
      this._content["keyword"] = value;
    }

    get keyword(): Array<CodeableConcept> {
      return this._content["keyword"] as Array<CodeableConcept>;
    }

    /**
     * Comments made about the event by the performer, subject or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A larger research study of which this particular study is a component or
     * step.
     */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Identifies the start date and the expected (or actual, depending on
     * status) end date for the study.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Indicates the individual who has primary oversite of the execution of the
     * study.
     */
    set principalInvestigator(value: Reference) {
      this._content["principalInvestigator"] = value;
    }

    get principalInvestigator(): Reference {
      return this._content["principalInvestigator"] as Reference;
    }

    /**
     * The set of steps expected to be performed as part of the execution of the
     * study.
     */
    set protocol(value: Array<Reference>) {
      this._content["protocol"] = value;
    }

    get protocol(): Array<Reference> {
      return this._content["protocol"] as Array<Reference>;
    }

    /**
     * A description and/or code explaining the premature termination of the
     * study.
     */
    set reasonStopped(value: CodeableConcept) {
      this._content["reasonStopped"] = value;
    }

    get reasonStopped(): CodeableConcept {
      return this._content["reasonStopped"] as CodeableConcept;
    }

    /** Citations, references and other related documents. */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * Clinic, hospital or other healthcare location that is participating in
     * the study.
     */
    set site(value: Array<Reference>) {
      this._content["site"] = value;
    }

    get site(): Array<Reference> {
      return this._content["site"] as Array<Reference>;
    }

    /** The organization responsible for the execution of the study. */
    set sponsor(value: Reference) {
      this._content["sponsor"] = value;
    }

    get sponsor(): Reference {
      return this._content["sponsor"] as Reference;
    }

    /** The current state of the study. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive user-friendly label for the study. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }
  }

  /** Base StructureDefinition for ResearchSubject Resource */
  export class ResearchSubject extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ResearchSubject";

    /**
     * The name of the arm in the study the subject actually followed as part of
     * this study.
     */
    set actualArm(value: String) {
      this._content["actualArm"] = value;
    }

    get actualArm(): String {
      return this._content["actualArm"] as String;
    }

    /**
     * The name of the arm in the study the subject is expected to follow as
     * part of this study.
     */
    set assignedArm(value: String) {
      this._content["assignedArm"] = value;
    }

    get assignedArm(): String {
      return this._content["assignedArm"] as String;
    }

    /** A record of the patient's informed agreement to participate in the study. */
    set consent(value: Reference) {
      this._content["consent"] = value;
    }

    get consent(): Reference {
      return this._content["consent"] as Reference;
    }

    /**
     * Identifiers assigned to this research study by the sponsor or other
     * systems.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The record of the person or animal who is involved in the study. */
    set individual(value: Reference) {
      this._content["individual"] = value;
    }

    get individual(): Reference {
      return this._content["individual"] as Reference;
    }

    /** The dates the subject began and ended their participation in the study. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The current state of the subject. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Reference to the study the subject is participating in. */
    set study(value: Reference) {
      this._content["study"] = value;
    }

    get study(): Reference {
      return this._content["study"] as Reference;
    }
  }

  /** Base StructureDefinition for RiskAssessment Resource */
  export class RiskAssessment extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RiskAssessment";

    /** A reference to the request that is fulfilled by this risk assessment. */
    set basedOn(value: Reference) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Reference {
      return this._content["basedOn"] as Reference;
    }

    /**
     * Indicates the source data considered as part of the assessment
     * (FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    set basis(value: Array<Reference>) {
      this._content["basis"] = value;
    }

    get basis(): Array<Reference> {
      return this._content["basis"] as Array<Reference>;
    }

    /** The type of the risk assessment performed. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Additional comments about the risk assessment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * For assessments or prognosis specific to a particular condition,
     * indicates the condition being assessed.
     */
    set condition(value: Reference) {
      this._content["condition"] = value;
    }

    get condition(): Reference {
      return this._content["condition"] as Reference;
    }

    /** The encounter where the assessment was performed. */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** Business identifier assigned to the risk assessment. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The algorithm, process or mechanism used to evaluate the risk. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /**
     * A description of the steps that might be taken to reduce the identified
     * risk(s).
     */
    set mitigation(value: String) {
      this._content["mitigation"] = value;
    }

    get mitigation(): String {
      return this._content["mitigation"] as String;
    }

    /** The date (and possibly time) the risk assessment was performed. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /**
     * A reference to a resource that this risk assessment is part of, such as a
     * Procedure.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /** The provider or software application that performed the assessment. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Describes the expected outcome for the subject. */
    set prediction(value: Array<BackboneElement>) {
      this._content["prediction"] = value;
    }

    get prediction(): Array<BackboneElement> {
      return this._content["prediction"] as Array<BackboneElement>;
    }

    /** The reason the risk assessment was performed. */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * The status of the RiskAssessment, using the same statuses as an
     * Observation.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient or group the risk assessment applies to. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** Base StructureDefinition for Schedule Resource */
  export class Schedule extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Schedule";

    /**
     * Whether this schedule record is in active use, or should not be used
     * (such as was entered in error).
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * The resource this Schedule resource is providing availability information
     * for. These are expected to usually be one of HealthcareService, Location,
     * Practitioner, PractitionerRole, Device, Patient or RelatedPerson.
     */
    set actor(value: Array<Reference>) {
      this._content["actor"] = value;
    }

    get actor(): Array<Reference> {
      return this._content["actor"] as Array<Reference>;
    }

    /**
     * Comments on the availability to describe any extended information. Such
     * as custom constraints on the slots that may be associated.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /** External Ids for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The period of time that the slots that are attached to this Schedule
     * resource cover (even if none exist). These cover the amount of time that
     * an organization's planning horizon; the interval for which they are
     * currently accepting appointments. This does not define a "template" for
     * planning outside these dates.
     */
    set planningHorizon(value: Period) {
      this._content["planningHorizon"] = value;
    }

    get planningHorizon(): Period {
      return this._content["planningHorizon"] as Period;
    }

    /**
     * A broad categorisation of the service that is to be performed during this
     * appointment.
     */
    set serviceCategory(value: CodeableConcept) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): CodeableConcept {
      return this._content["serviceCategory"] as CodeableConcept;
    }

    /** The specific service that is to be performed during this appointment. */
    set serviceType(value: Array<CodeableConcept>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<CodeableConcept> {
      return this._content["serviceType"] as Array<CodeableConcept>;
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }
  }

  /** Base StructureDefinition for SearchParameter Resource */
  export class SearchParameter extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SearchParameter";

    /** The base resource type(s) that this search parameter can be used against. */
    set base(value: Array<Code>) {
      this._content["base"] = value;
    }

    get base(): Array<Code> {
      return this._content["base"] as Array<Code>;
    }

    /**
     * Contains the names of any search parameters which may be chained to the
     * containing search parameter. Chained parameters may be added to search
     * parameters of type reference, and specify that resources will only be
     * returned if they contain a reference to a resource which matches the
     * chained parameter value. Values for this field should be drawn from
     * SearchParameter.code for a parameter on the target resource type.
     */
    set chain(value: Array<String>) {
      this._content["chain"] = value;
    }

    get chain(): Array<String> {
      return this._content["chain"] as Array<String>;
    }

    /**
     * The code used in the URL or the parameter name in a parameters resource
     * for this search parameter.
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /** Comparators supported for the search parameter. */
    set comparator(value: Array<Code>) {
      this._content["comparator"] = value;
    }

    get comparator(): Array<Code> {
      return this._content["comparator"] as Array<Code>;
    }

    /** Used to define the parts of a composite search parameter. */
    set component(value: Array<BackboneElement>) {
      this._content["component"] = value;
    }

    get component(): Array<BackboneElement> {
      return this._content["component"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the search parameter was published.
     * The date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the search parameter changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Where this search parameter is originally defined. If a derivedFrom is
     * provided, then the details in the search parameter must be consistent
     * with the definition from which it is defined. I.e. the parameter should
     * have the same meaning, and (usually) the functionality should be a proper
     * subset of the underlying search parameter.
     */
    set derivedFrom(value: Uri) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Uri {
      return this._content["derivedFrom"] as Uri;
    }

    /**
     * A free text natural language description of the search parameter from a
     * consumer's perspective. and how it used.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this search parameter is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A FHIRPath expression that returns a set of elements for the search
     * parameter.
     */
    set expression(value: String) {
      this._content["expression"] = value;
    }

    get expression(): String {
      return this._content["expression"] as String;
    }

    /**
     * A legal or geographic region in which the search parameter is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** A modifier supported for the search parameter. */
    set modifier(value: Array<Code>) {
      this._content["modifier"] = value;
    }

    get modifier(): Array<Code> {
      return this._content["modifier"] as Array<Code>;
    }

    /**
     * A natural language name identifying the search parameter. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the search
     * parameter.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this search parameter is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this search parameter. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Types of resource (if a resource is referenced). */
    set target(value: Array<Code>) {
      this._content["target"] = value;
    }

    get target(): Array<Code> {
      return this._content["target"] as Array<Code>;
    }

    /**
     * The type of value a search parameter refers to, and how the content is
     * interpreted.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * An absolute URI that is used to identify this search parameter when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this search parameter is (or will be) published. The URL SHOULD include
     * the major version of the search parameter. For more information see
     * [Technical and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate search parameter instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the search
     * parameter when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the search parameter
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * An XPath expression that returns a set of elements for the search
     * parameter.
     */
    set xpath(value: String) {
      this._content["xpath"] = value;
    }

    get xpath(): String {
      return this._content["xpath"] as String;
    }

    /**
     * How the search parameter relates to the set of elements returned by
     * evaluating the xpath query.
     */
    set xpathUsage(value: Code) {
      this._content["xpathUsage"] = value;
    }

    get xpathUsage(): Code {
      return this._content["xpathUsage"] as Code;
    }
  }

  /** Base StructureDefinition for Sequence Resource */
  export class Sequence extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Sequence";

    /**
     * Whether the sequence is numbered starting at 0 (0-based numbering or
     * coordinates, inclusive start, exclusive end) or starting at 1 (1-based
     * numbering, inclusive start and inclusive end).
     */
    set coordinateSystem(value: Integer) {
      this._content["coordinateSystem"] = value;
    }

    get coordinateSystem(): Integer {
      return this._content["coordinateSystem"] as Integer;
    }

    /** The method for sequencing, for example, chip information. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /**
     * A unique identifier for this particular sequence instance. This is a
     * FHIR-defined id.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Sequence that was observed. It is the result marked by referenceSeq along
     * with variant records on referenceSeq. This shall starts from
     * referenceSeq.windowStart and end by referenceSeq.windowEnd.
     */
    set observedSeq(value: String) {
      this._content["observedSeq"] = value;
    }

    get observedSeq(): String {
      return this._content["observedSeq"] as String;
    }

    /** The patient whose sequencing results are described by this resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The organization or lab that should be responsible for this result. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Pointer to next atomic sequence which at most contains one variant. */
    set pointer(value: Array<Reference>) {
      this._content["pointer"] = value;
    }

    get pointer(): Array<Reference> {
      return this._content["pointer"] as Array<Reference>;
    }

    /**
     * An experimental feature attribute that defines the quality of the feature
     * in a quantitative way, such as a phred quality score
     * ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
     */
    set quality(value: Array<BackboneElement>) {
      this._content["quality"] = value;
    }

    get quality(): Array<BackboneElement> {
      return this._content["quality"] as Array<BackboneElement>;
    }

    /** The number of copies of the seqeunce of interest. (RNASeq). */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Coverage (read depth or depth) is the average number of reads
     * representing a given nucleotide in the reconstructed sequence.
     */
    set readCoverage(value: Integer) {
      this._content["readCoverage"] = value;
    }

    get readCoverage(): Integer {
      return this._content["readCoverage"] as Integer;
    }

    /**
     * A sequence that is used as a reference to describe variants that are
     * present in a sequence analyzed.
     */
    set referenceSeq(value: BackboneElement) {
      this._content["referenceSeq"] = value;
    }

    get referenceSeq(): BackboneElement {
      return this._content["referenceSeq"] as BackboneElement;
    }

    /**
     * Configurations of the external repository. The repository shall store
     * target's observedSeq or records related with target's observedSeq.
     */
    set repository(value: Array<BackboneElement>) {
      this._content["repository"] = value;
    }

    get repository(): Array<BackboneElement> {
      return this._content["repository"] as Array<BackboneElement>;
    }

    /** Specimen used for sequencing. */
    set specimen(value: Reference) {
      this._content["specimen"] = value;
    }

    get specimen(): Reference {
      return this._content["specimen"] as Reference;
    }

    /** Amino Acid Sequence/ DNA Sequence / RNA Sequence. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * The definition of variant here originates from Sequence ontology
     * ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)).
     * This element can represent amino acid or nucleic sequence
     * change(including insertion,deletion,SNP,etc.) It can represent some
     * complex mutation or segment variation with the assist of CIGAR string.
     */
    set variant(value: Array<BackboneElement>) {
      this._content["variant"] = value;
    }

    get variant(): Array<BackboneElement> {
      return this._content["variant"] as Array<BackboneElement>;
    }
  }

  /** Base StructureDefinition for ServiceDefinition Resource */
  export class ServiceDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ServiceDefinition";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A contributor to the content of the module, including authors, editors,
     * reviewers, and endorsers.
     */
    set contributor(value: Array<Contributor>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Contributor> {
      return this._content["contributor"] as Array<Contributor>;
    }

    /**
     * A copyright statement relating to the service definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the service definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * Data requirements are a machine processable description of the data
     * required by the module in order to perform a successful evaluation.
     */
    set dataRequirement(value: Array<DataRequirement>) {
      this._content["dataRequirement"] = value;
    }

    get dataRequirement(): Array<DataRequirement> {
      return this._content["dataRequirement"] as Array<DataRequirement>;
    }

    /**
     * The date (and optionally time) when the service definition was published.
     * The date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the service definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the service definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the service definition content was or is planned
     * to be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A boolean value to indicate that this service definition is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this service definition when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance. This is used for CMS or NQF identifiers for
     * a measure artifact. Note that at least one identifier is required for
     * non-experimental active artifacts.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the service definition is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval, but doesn't change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the service definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** A reference to the operation that is used to invoke this service. */
    set operationDefinition(value: Reference) {
      this._content["operationDefinition"] = value;
    }

    get operationDefinition(): Reference {
      return this._content["operationDefinition"] as Reference;
    }

    /**
     * The name of the individual or organization that published the service
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this service definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related resources such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * The status of this service definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the service definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the module. Topics provide a high-level
     * categorization of the module that can be useful for filtering and
     * searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * The trigger element defines when the rule should be invoked. This
     * information is used by consumers of the rule to determine how to
     * integrate the rule into a specific workflow.
     */
    set trigger(value: Array<TriggerDefinition>) {
      this._content["trigger"] = value;
    }

    get trigger(): Array<TriggerDefinition> {
      return this._content["trigger"] as Array<TriggerDefinition>;
    }

    /**
     * An absolute URI that is used to identify this service definition when it
     * is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this service definition is (or will be) published. The URL SHOULD
     * include the major version of the service definition. For more information
     * see [Technical and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the module is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate service definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the service
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the service definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Slot Resource */
  export class Slot extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Slot";

    /**
     * The style of appointment or patient that may be booked in the slot (not
     * service type).
     */
    set appointmentType(value: CodeableConcept) {
      this._content["appointmentType"] = value;
    }

    get appointmentType(): CodeableConcept {
      return this._content["appointmentType"] as CodeableConcept;
    }

    /**
     * Comments on the slot to describe any extended information. Such as custom
     * constraints on the slot.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /** Date/Time that the slot is to conclude. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /** External Ids for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This slot has already been overbooked, appointments are unlikely to be
     * accepted for this time.
     */
    set overbooked(value: Boolean) {
      this._content["overbooked"] = value;
    }

    get overbooked(): Boolean {
      return this._content["overbooked"] as Boolean;
    }

    /**
     * The schedule resource that this slot defines an interval of status
     * information.
     */
    set schedule(value: Reference) {
      this._content["schedule"] = value;
    }

    get schedule(): Reference {
      return this._content["schedule"] as Reference;
    }

    /**
     * A broad categorisation of the service that is to be performed during this
     * appointment.
     */
    set serviceCategory(value: CodeableConcept) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): CodeableConcept {
      return this._content["serviceCategory"] as CodeableConcept;
    }

    /**
     * The type of appointments that can be booked into this slot (ideally this
     * would be an identifiable service - which is at a location, rather than
     * the location itself). If provided then this overrides the value provided
     * on the availability resource.
     */
    set serviceType(value: Array<CodeableConcept>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<CodeableConcept> {
      return this._content["serviceType"] as Array<CodeableConcept>;
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** Date/Time that the slot is to begin. */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /** Busy | free | busy-unavailable | busy-tentative | entered-in-error. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Specimen Resource */
  export class Specimen extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Specimen";

    /**
     * The identifier assigned by the lab when accessioning specimen(s). This is
     * not necessarily the same as the specimen identifier, depending on local
     * lab procedures.
     */
    set accessionIdentifier(value: Identifier) {
      this._content["accessionIdentifier"] = value;
    }

    get accessionIdentifier(): Identifier {
      return this._content["accessionIdentifier"] as Identifier;
    }

    /** Details concerning the specimen collection. */
    set collection(value: BackboneElement) {
      this._content["collection"] = value;
    }

    get collection(): BackboneElement {
      return this._content["collection"] as BackboneElement;
    }

    /**
     * The container holding the specimen. The recursive nature of containers;
     * i.e. blood in tube in tray in rack is not addressed here.
     */
    set container(value: Array<BackboneElement>) {
      this._content["container"] = value;
    }

    get container(): Array<BackboneElement> {
      return this._content["container"] as Array<BackboneElement>;
    }

    /** Id for specimen. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * To communicate any details or issues about the specimen or during the
     * specimen collection. (for example: broken vial, sent with patient,
     * frozen).
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Reference to the parent (source) specimen which is used when the specimen
     * was either derived from or a component of another specimen.
     */
    set parent(value: Array<Reference>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Reference> {
      return this._content["parent"] as Array<Reference>;
    }

    /** Details concerning processing and processing steps for the specimen. */
    set processing(value: Array<BackboneElement>) {
      this._content["processing"] = value;
    }

    get processing(): Array<BackboneElement> {
      return this._content["processing"] as Array<BackboneElement>;
    }

    /** Time when specimen was received for processing or testing. */
    set receivedTime(value: DateTime) {
      this._content["receivedTime"] = value;
    }

    get receivedTime(): DateTime {
      return this._content["receivedTime"] as DateTime;
    }

    /**
     * Details concerning a test or procedure request that required a specimen
     * to be collected.
     */
    set request(value: Array<Reference>) {
      this._content["request"] = value;
    }

    get request(): Array<Reference> {
      return this._content["request"] as Array<Reference>;
    }

    /** The availability of the specimen. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Where the specimen came from. This may be from the patient(s) or from the
     * environment or a device.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The kind of material that forms the specimen. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for StructureDefinition Resource */
  export class StructureDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/StructureDefinition";

    /**
     * Whether structure this definition describes is abstract or not - that is,
     * whether the structure is not intended to be instantiated. For Resources
     * and Data types, abstract types will never be exchanged between systems.
     */
    set abstract(value: Boolean) {
      this._content["abstract"] = value;
    }

    get abstract(): Boolean {
      return this._content["abstract"] as Boolean;
    }

    /**
     * An absolute URI that is the base structure from which this type is
     * derived, either by specialization or constraint.
     */
    set baseDefinition(value: Uri) {
      this._content["baseDefinition"] = value;
    }

    get baseDefinition(): Uri {
      return this._content["baseDefinition"] as Uri;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * Identifies the types of resource or data type elements to which the
     * extension can be applied.
     */
    set context(value: Array<String>) {
      this._content["context"] = value;
    }

    get context(): Array<String> {
      return this._content["context"] as Array<String>;
    }

    /**
     * A set of rules as Fluent Invariants about when the extension can be used
     * (e.g. co-occurrence variants for the extension).
     */
    set contextInvariant(value: Array<String>) {
      this._content["contextInvariant"] = value;
    }

    get contextInvariant(): Array<String> {
      return this._content["contextInvariant"] as Array<String>;
    }

    /**
     * If this is an extension, Identifies the context within FHIR resources
     * where the extension can be used.
     */
    set contextType(value: Code) {
      this._content["contextType"] = value;
    }

    get contextType(): Code {
      return this._content["contextType"] as Code;
    }

    /**
     * A copyright statement relating to the structure definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the structure definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the structure definition was
     * published. The date must change if and when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the structure definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** How the type relates to the baseDefinition. */
    set derivation(value: Code) {
      this._content["derivation"] = value;
    }

    get derivation(): Code {
      return this._content["derivation"] as Code;
    }

    /**
     * A free text natural language description of the structure definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A differential view is expressed relative to the base StructureDefinition
     * - a statement of differences that it applies.
     */
    set differential(value: BackboneElement) {
      this._content["differential"] = value;
    }

    get differential(): BackboneElement {
      return this._content["differential"] as BackboneElement;
    }

    /**
     * A boolean value to indicate that this structure definition is authored
     * for testing purposes (or education/evaluation/marketing), and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * The version of the FHIR specification on which this StructureDefinition
     * is based - this is the formal version of the specification, without the
     * revision number, e.g. [publication].[major].[minor], which is 3.0.2 for
     * this version.
     */
    set fhirVersion(value: Id) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Id {
      return this._content["fhirVersion"] as Id;
    }

    /**
     * A formal identifier that is used to identify this structure definition
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the structure definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A set of key words or terms from external terminologies that may be used
     * to assist with indexing and searching of templates.
     */
    set keyword(value: Array<Coding>) {
      this._content["keyword"] = value;
    }

    get keyword(): Array<Coding> {
      return this._content["keyword"] as Array<Coding>;
    }

    /** Defines the kind of structure that this definition is describing. */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** An external specification that the content is mapped to. */
    set mapping(value: Array<BackboneElement>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<BackboneElement> {
      return this._content["mapping"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the structure definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the structure
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this structure definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * A snapshot view is expressed in a stand alone form that can be used and
     * interpreted without considering the base StructureDefinition.
     */
    set snapshot(value: BackboneElement) {
      this._content["snapshot"] = value;
    }

    get snapshot(): BackboneElement {
      return this._content["snapshot"] as BackboneElement;
    }

    /**
     * The status of this structure definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the structure definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * The type this structure describes. If the derivation kind is
     * 'specialization' then this is the master definition for a type, and there
     * is always one of these (a data type, an extension, a resource, including
     * abstract ones). Otherwise the structure definition is a constraint on the
     * stated type (and in this case, the type cannot be an abstract type).
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * An absolute URI that is used to identify this structure definition when
     * it is referenced in a specification, model, design or an instance. This
     * SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at
     * which this structure definition is (or will be) published. The URL SHOULD
     * include the major version of the structure definition. For more
     * information see [Technical and Business
     * Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate structure definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the structure
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the structure definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for StructureMap Resource */
  export class StructureMap extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/StructureMap";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the structure map and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the structure map.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the structure map was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the structure map changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the structure map from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A boolean value to indicate that this structure map is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Organizes the mapping into managable chunks for human review/ease of
     * maintenance.
     */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this structure map when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Other maps used by this map (canonical URLs). */
    set import(value: Array<Uri>) {
      this._content["import"] = value;
    }

    get import(): Array<Uri> {
      return this._content["import"] as Array<Uri>;
    }

    /**
     * A legal or geographic region in which the structure map is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the structure map. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the individual or organization that published the structure
     * map.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this structure map is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this structure map. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A structure definition used by this map. The structure definition may
     * describe instances that are converted, or the instances that are
     * produced.
     */
    set structure(value: Array<BackboneElement>) {
      this._content["structure"] = value;
    }

    get structure(): Array<BackboneElement> {
      return this._content["structure"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the structure map. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this structure map when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this structure map is (or will be) published. The URL SHOULD include the
     * major version of the structure map. For more information see [Technical
     * and Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate structure map instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the structure map
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the structure map author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for Subscription Resource */
  export class Subscription extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Subscription";

    /**
     * Details where to send notifications when resources are received that meet
     * the criteria.
     */
    set channel(value: BackboneElement) {
      this._content["channel"] = value;
    }

    get channel(): BackboneElement {
      return this._content["channel"] as BackboneElement;
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /**
     * The rules that the server should use to determine when to generate
     * notifications for this subscription.
     */
    set criteria(value: String) {
      this._content["criteria"] = value;
    }

    get criteria(): String {
      return this._content["criteria"] as String;
    }

    /** The time for the server to turn the subscription off. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * A record of the last error that occurred when the server processed a
     * notification.
     */
    set error(value: String) {
      this._content["error"] = value;
    }

    get error(): String {
      return this._content["error"] as String;
    }

    /** A description of why this subscription is defined. */
    set reason(value: String) {
      this._content["reason"] = value;
    }

    get reason(): String {
      return this._content["reason"] as String;
    }

    /**
     * The status of the subscription, which marks the server state for managing
     * the subscription.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A tag to add to any resource that matches the criteria, after the
     * subscription is processed.
     */
    set tag(value: Array<Coding>) {
      this._content["tag"] = value;
    }

    get tag(): Array<Coding> {
      return this._content["tag"] as Array<Coding>;
    }
  }

  /** Base StructureDefinition for Substance Resource */
  export class Substance extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Substance";

    /**
     * A code that classifies the general type of substance. This is used for
     * searching, sorting and display purposes.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** A code (or set of codes) that identify this substance. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * A description of the substance - its appearance, handling requirements,
     * and other usage notes.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Unique identifier for the substance. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A substance can be composed of other substances. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /**
     * Substance may be used to describe a kind of substance, or a specific
     * package/container of the substance: an instance.
     */
    set instance(value: Array<BackboneElement>) {
      this._content["instance"] = value;
    }

    get instance(): Array<BackboneElement> {
      return this._content["instance"] as Array<BackboneElement>;
    }

    /** A code to indicate if the substance is actively used. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for SupplyDelivery Resource */
  export class SupplyDelivery extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SupplyDelivery";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * event.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Identification of the facility/location where the Supply was shipped to,
     * as part of the dispense event.
     */
    set destination(value: Reference) {
      this._content["destination"] = value;
    }

    get destination(): Reference {
      return this._content["destination"] as Reference;
    }

    /**
     * Identifier assigned by the dispensing facility when the item(s) is
     * dispensed.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The date or time(s) the activity occurred. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * A link to a resource representing the person whom the delivered item is
     * for.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Identifies the person who picked up the Supply. */
    set receiver(value: Array<Reference>) {
      this._content["receiver"] = value;
    }

    get receiver(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    /** A code specifying the state of the dispense event. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The item that is being delivered or has been supplied. */
    set suppliedItem(value: BackboneElement) {
      this._content["suppliedItem"] = value;
    }

    get suppliedItem(): BackboneElement {
      return this._content["suppliedItem"] as BackboneElement;
    }

    /**
     * The individual responsible for dispensing the medication, supplier or
     * device.
     */
    set supplier(value: Reference) {
      this._content["supplier"] = value;
    }

    get supplier(): Reference {
      return this._content["supplier"] as Reference;
    }

    /**
     * Indicates the type of dispensing event that is performed. Examples
     * include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill,
     * Samples, etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for SupplyRequest Resource */
  export class SupplyRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SupplyRequest";

    /** When the request was made. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * Category of supply, e.g. central, non-stock, etc. This is used to support
     * work flows associated with the supply process.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** Where the supply is expected to come from. */
    set deliverFrom(value: Reference) {
      this._content["deliverFrom"] = value;
    }

    get deliverFrom(): Reference {
      return this._content["deliverFrom"] as Reference;
    }

    /** Where the supply is destined to go. */
    set deliverTo(value: Reference) {
      this._content["deliverTo"] = value;
    }

    get deliverTo(): Reference {
      return this._content["deliverTo"] as Reference;
    }

    /** Unique identifier for this supply request. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** When the request should be fulfilled. */
    set occurrence(value: DateTime) {
      this._content["occurrence"] = value;
    }

    get occurrence(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    /** The item being requested. */
    set orderedItem(value: BackboneElement) {
      this._content["orderedItem"] = value;
    }

    get orderedItem(): BackboneElement {
      return this._content["orderedItem"] as BackboneElement;
    }

    /**
     * Indicates how quickly this SupplyRequest should be addressed with respect
     * to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** Why the supply item was requested. */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /** Status of the supply request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Who is intended to fulfill the request. */
    set supplier(value: Array<Reference>) {
      this._content["supplier"] = value;
    }

    get supplier(): Array<Reference> {
      return this._content["supplier"] as Array<Reference>;
    }
  }

  /** Base StructureDefinition for Task Resource */
  export class Task extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Task";

    /** The date and time this task was created. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * BasedOn refers to a higher-level authorization that triggered the
     * creation of the task. It references a "request" resource such as a
     * ProcedureRequest, MedicationRequest, ProcedureRequest, CarePlan, etc.
     * which is distinct from the "request" resource the task is seeking to
     * fulfil. This latter resource is referenced by FocusOn. For example, based
     * on a ProcedureRequest (= BasedOn), a task is created to fulfil a
     * procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** Contains business-specific nuances of the business state. */
    set businessStatus(value: CodeableConcept) {
      this._content["businessStatus"] = value;
    }

    get businessStatus(): CodeableConcept {
      return this._content["businessStatus"] as CodeableConcept;
    }

    /** A name or code (or both) briefly describing what the task involves. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * during which this task was created.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * A reference to a formal or informal definition of the task. For example,
     * a protocol, a step within a defined workflow definition, etc.
     */
    set definition(value: Uri) {
      this._content["definition"] = value;
    }

    get definition(): Uri {
      return this._content["definition"] as Uri;
    }

    /** A free-text description of what is to be performed. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Identifies the time action was first taken against the task (start)
     * and/or the time final action was taken against the task prior to marking
     * it as completed (end).
     */
    set executionPeriod(value: Period) {
      this._content["executionPeriod"] = value;
    }

    get executionPeriod(): Period {
      return this._content["executionPeriod"] as Period;
    }

    /**
     * The request being actioned or the resource being manipulated by this
     * task.
     */
    set focus(value: Reference) {
      this._content["focus"] = value;
    }

    get focus(): Reference {
      return this._content["focus"] as Reference;
    }

    /**
     * The entity who benefits from the performance of the service specified in
     * the task (e.g., the patient).
     */
    set for(value: Reference) {
      this._content["for"] = value;
    }

    get for(): Reference {
      return this._content["for"] as Reference;
    }

    /**
     * An identifier that links together multiple tasks and other requests that
     * were created in the same context.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /** The business identifier for this task. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Additional information that may be needed in the execution of the task. */
    set input(value: Array<BackboneElement>) {
      this._content["input"] = value;
    }

    get input(): Array<BackboneElement> {
      return this._content["input"] as Array<BackboneElement>;
    }

    /**
     * Indicates the "level" of actionability associated with the Task. I.e. Is
     * this a proposed task, a planned task, an actionable task, etc.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /** The date and time of last modification to this task. */
    set lastModified(value: DateTime) {
      this._content["lastModified"] = value;
    }

    get lastModified(): DateTime {
      return this._content["lastModified"] as DateTime;
    }

    /** Free-text information captured about the task as it progresses. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Outputs produced by the Task. */
    set output(value: Array<BackboneElement>) {
      this._content["output"] = value;
    }

    get output(): Array<BackboneElement> {
      return this._content["output"] as Array<BackboneElement>;
    }

    /**
     * Individual organization or Device currently responsible for task
     * execution.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** Task that this particular task is part of. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** The type of participant that can execute the task. */
    set performerType(value: Array<CodeableConcept>) {
      this._content["performerType"] = value;
    }

    get performerType(): Array<CodeableConcept> {
      return this._content["performerType"] as Array<CodeableConcept>;
    }

    /**
     * Indicates how quickly the Task should be addressed with respect to other
     * requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** A description or code indicating why this task needs to be performed. */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * Links to Provenance records for past versions of this Task that identify
     * key state transitions or updates that are likely to be relevant to a user
     * looking at the current version of the task.
     */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /** The creator of the task. */
    set requester(value: BackboneElement) {
      this._content["requester"] = value;
    }

    get requester(): BackboneElement {
      return this._content["requester"] as BackboneElement;
    }

    /**
     * If the Task.focus is a request resource and the task is seeking
     * fulfillment (i.e is asking for the request to be actioned), this element
     * identifies any limitations on what parts of the referenced request should
     * be actioned.
     */
    set restriction(value: BackboneElement) {
      this._content["restriction"] = value;
    }

    get restriction(): BackboneElement {
      return this._content["restriction"] as BackboneElement;
    }

    /** The current status of the task. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** An explanation as to why this task is held, failed, was refused, etc. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }
  }

  /** Base StructureDefinition for TestReport Resource */
  export class TestReport extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/TestReport";

    /**
     * Identifier for the TestScript assigned for external purposes outside the
     * context of FHIR.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** When the TestScript was executed and this TestReport was generated. */
    set issued(value: DateTime) {
      this._content["issued"] = value;
    }

    get issued(): DateTime {
      return this._content["issued"] as DateTime;
    }

    /** A free text natural language name identifying the executed TestScript. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A participant in the test execution, either the execution engine, a
     * client, or a server.
     */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** The overall result from the execution of the TestScript. */
    set result(value: Code) {
      this._content["result"] = value;
    }

    get result(): Code {
      return this._content["result"] as Code;
    }

    /**
     * The final score (percentage of tests passed) resulting from the execution
     * of the TestScript.
     */
    set score(value: Decimal) {
      this._content["score"] = value;
    }

    get score(): Decimal {
      return this._content["score"] as Decimal;
    }

    /**
     * The results of the series of required setup operations before the tests
     * were executed.
     */
    set setup(value: BackboneElement) {
      this._content["setup"] = value;
    }

    get setup(): BackboneElement {
      return this._content["setup"] as BackboneElement;
    }

    /** The current state of this test report. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The results of the series of operations required to clean up after the
     * all the tests were executed (successfully or otherwise).
     */
    set teardown(value: BackboneElement) {
      this._content["teardown"] = value;
    }

    get teardown(): BackboneElement {
      return this._content["teardown"] as BackboneElement;
    }

    /** A test executed from the test script. */
    set test(value: Array<BackboneElement>) {
      this._content["test"] = value;
    }

    get test(): Array<BackboneElement> {
      return this._content["test"] as Array<BackboneElement>;
    }

    /**
     * Ideally this is an absolute URL that is used to identify the
     * version-specific TestScript that was executed, matching the
     * `TestScript.url`.
     */
    set testScript(value: Reference) {
      this._content["testScript"] = value;
    }

    get testScript(): Reference {
      return this._content["testScript"] as Reference;
    }

    /** Name of the tester producing this report (Organization or individual). */
    set tester(value: String) {
      this._content["tester"] = value;
    }

    get tester(): String {
      return this._content["tester"] as String;
    }
  }

  /** Base StructureDefinition for TestScript Resource */
  export class TestScript extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/TestScript";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the test script and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the test script.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the test script was published. The
     * date must change if and when the business version changes and it must
     * change if the status code changes. In addition, it should change when the
     * substantive content of the test script changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the test script from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An abstract server used in operations within this test script in the
     * destination element.
     */
    set destination(value: Array<BackboneElement>) {
      this._content["destination"] = value;
    }

    get destination(): Array<BackboneElement> {
      return this._content["destination"] as Array<BackboneElement>;
    }

    /**
     * A boolean value to indicate that this test script is authored for testing
     * purposes (or education/evaluation/marketing), and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Fixture in the test script - by reference (uri). All fixtures are
     * required for the test script to execute.
     */
    set fixture(value: Array<BackboneElement>) {
      this._content["fixture"] = value;
    }

    get fixture(): Array<BackboneElement> {
      return this._content["fixture"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this test script when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A legal or geographic region in which the test script is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The required capability must exist and are assumed to function correctly
     * on the FHIR server being tested.
     */
    set metadata(value: BackboneElement) {
      this._content["metadata"] = value;
    }

    get metadata(): BackboneElement {
      return this._content["metadata"] as BackboneElement;
    }

    /**
     * A natural language name identifying the test script. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * An abstract server used in operations within this test script in the
     * origin element.
     */
    set origin(value: Array<BackboneElement>) {
      this._content["origin"] = value;
    }

    get origin(): Array<BackboneElement> {
      return this._content["origin"] as Array<BackboneElement>;
    }

    /** Reference to the profile to be used for validation. */
    set profile(value: Array<Reference>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Reference> {
      return this._content["profile"] as Array<Reference>;
    }

    /**
     * The name of the individual or organization that published the test
     * script.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this test script is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** Assert rule to be used in one or more asserts within the test script. */
    set rule(value: Array<BackboneElement>) {
      this._content["rule"] = value;
    }

    get rule(): Array<BackboneElement> {
      return this._content["rule"] as Array<BackboneElement>;
    }

    /**
     * Contains one or more rules. Offers a way to group rules so assertions
     * could reference the group of rules and have them all applied.
     */
    set ruleset(value: Array<BackboneElement>) {
      this._content["ruleset"] = value;
    }

    get ruleset(): Array<BackboneElement> {
      return this._content["ruleset"] as Array<BackboneElement>;
    }

    /** A series of required setup operations before tests are executed. */
    set setup(value: BackboneElement) {
      this._content["setup"] = value;
    }

    get setup(): BackboneElement {
      return this._content["setup"] as BackboneElement;
    }

    /**
     * The status of this test script. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A series of operations required to clean up after the all the tests are
     * executed (successfully or otherwise).
     */
    set teardown(value: BackboneElement) {
      this._content["teardown"] = value;
    }

    get teardown(): BackboneElement {
      return this._content["teardown"] as BackboneElement;
    }

    /** A test in this script. */
    set test(value: Array<BackboneElement>) {
      this._content["test"] = value;
    }

    get test(): Array<BackboneElement> {
      return this._content["test"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the test script. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this test script when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this test script is (or will be) published. The URL SHOULD include the
     * major version of the test script. For more information see [Technical and
     * Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate test script instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * Variable is set based either on element value in response body or on
     * header field value in the response headers.
     */
    set variable(value: Array<BackboneElement>) {
      this._content["variable"] = value;
    }

    get variable(): Array<BackboneElement> {
      return this._content["variable"] as Array<BackboneElement>;
    }

    /**
     * The identifier that is used to identify this version of the test script
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the test script author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for ValueSet Resource */
  export class ValueSet extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ValueSet";

    /**
     * A set of criteria that define the content logical definition of the value
     * set by including or excluding codes from outside this value set. This I
     * also known as the "Content Logical Definition" (CLD).
     */
    set compose(value: BackboneElement) {
      this._content["compose"] = value;
    }

    get compose(): BackboneElement {
      return this._content["compose"] as BackboneElement;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the value set and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the value set.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the value set was published. The date
     * must change if and when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the value set changes. (e.g. the 'content logical
     * definition').
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the value set from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A value set can also be "expanded", where the value set is turned into a
     * simple collection of enumerated codes. This element holds the expansion,
     * if it has been performed.
     */
    set expansion(value: BackboneElement) {
      this._content["expansion"] = value;
    }

    get expansion(): BackboneElement {
      return this._content["expansion"] as BackboneElement;
    }

    /**
     * A boolean value to indicate that this value set is authored for testing
     * purposes (or education/evaluation/marketing), and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** Whether this is intended to be used with an extensible binding or not. */
    set extensible(value: Boolean) {
      this._content["extensible"] = value;
    }

    get extensible(): Boolean {
      return this._content["extensible"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this value set when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * If this is set to 'true', then no new versions of the content logical
     * definition can be created. Note: Other metadata might still change.
     */
    set immutable(value: Boolean) {
      this._content["immutable"] = value;
    }

    get immutable(): Boolean {
      return this._content["immutable"] as Boolean;
    }

    /**
     * A legal or geographic region in which the value set is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the value set. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The name of the individual or organization that published the value set. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explaination of why this value set is needed and why it has been designed
     * as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this value set. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the value set. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this value set when it is
     * referenced in a specification, model, design or an instance. This SHALL
     * be a URL, SHOULD be globally unique, and SHOULD be an address at which
     * this value set is (or will be) published. The URL SHOULD include the
     * major version of the value set. For more information see [Technical and
     * Business Versions](resource.html#versions).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching for appropriate value set instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the value set
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the value set author and is not expected
     * to be globally unique. For example, it might be a timestamp (e.g.
     * yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for VisionPrescription Resource */
  export class VisionPrescription extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/VisionPrescription";

    /** The date (and perhaps time) when the prescription was written. */
    set dateWritten(value: DateTime) {
      this._content["dateWritten"] = value;
    }

    get dateWritten(): DateTime {
      return this._content["dateWritten"] as DateTime;
    }

    /** Deals with details of the dispense part of the supply specification. */
    set dispense(value: Array<BackboneElement>) {
      this._content["dispense"] = value;
    }

    get dispense(): Array<BackboneElement> {
      return this._content["dispense"] as Array<BackboneElement>;
    }

    /**
     * A link to a resource that identifies the particular occurrence of contact
     * between patient and health care provider.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Business identifier which may be used by other parties to reference or
     * identify the prescription.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A link to a resource representing the person to whom the vision products
     * will be supplied.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The healthcare professional responsible for authorizing the prescription. */
    set prescriber(value: Reference) {
      this._content["prescriber"] = value;
    }

    get prescriber(): Reference {
      return this._content["prescriber"] as Reference;
    }

    /** Can be the reason or the indication for writing the prescription. */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for Element Type */
  export abstract class Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Element";
    protected _content: { [key: string]: TElement } = {};

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the element. In order to make the use of extensions
     * safe and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met as
     * part of the definition of the extension.
     */
    set extension(value: Array<Extension>) {
      this._content["extension"] = value;
    }

    get extension(): Array<Extension> {
      return this._content["extension"] as Array<Extension>;
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    set id(value: String) {
      this._content["id"] = value;
    }

    get id(): String {
      return this._content["id"] as String;
    }
  }

  /** Base StructureDefinition for BackboneElement Type */
  export abstract class BackboneElement extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/BackboneElement";

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the element, and that modifies the understanding of
     * the element that contains it. Usually modifier elements provide negation
     * or qualification. In order to make the use of extensions safe and
     * manageable, there is a strict set of governance applied to the definition
     * and use of extensions. Though any implementer is allowed to define an
     * extension, there is a set of requirements that SHALL be met as part of
     * the definition of the extension. Applications processing a resource are
     * required to check for modifier extensions.
     */
    set modifierExtension(value: Array<Extension>) {
      this._content["modifierExtension"] = value;
    }

    get modifierExtension(): Array<Extension> {
      return this._content["modifierExtension"] as Array<Extension>;
    }
  }

  /** Base StructureDefinition for base64Binary Type: A stream of bytes */
  class Base64Binary extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/base64Binary";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for boolean Type: Value of "true" or "false" */
  class Boolean extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/boolean";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for string Type: A sequence of Unicode characters */
  class String extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/string";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for code type: A string which has at least one
   * character and no leading or trailing whitespace and where there is no
   * whitespace other than single spaces in the contents
   */
  class Code extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/code";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for date Type: A date or partial date (e.g. just
   * year or year + month). There is no time zone. The format is a union of the
   * schema types gYear, gYearMonth and date. Dates SHALL be valid dates.
   */
  class Date extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/date";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for dateTime Type: A date, date-time or partial
   * date (e.g. just year or year + month). If hours and minutes are specified,
   * a time zone SHALL be populated. The format is a union of the schema types
   * gYear, gYearMonth, date and dateTime. Seconds must be provided due to
   * schema type constraints but may be zero-filled and may be ignored. Dates
   * SHALL be valid dates.
   */
  class DateTime extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/dateTime";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for decimal Type: A rational number with implicit
   * precision
   */
  class Decimal extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/decimal";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for id type: Any combination of letters, numerals,
   * "-" and ".", with a length limit of 64 characters. (This might be an
   * integer, an unprefixed OID, UUID or any other identifier pattern that meets
   * these constraints.) Ids are case-insensitive.
   */
  class Id extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/id";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for instant Type: An instant in time - known at
   * least to the second
   */
  class Instant extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/instant";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for integer Type: A whole number */
  class Integer extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/integer";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for markdown type: A string that may contain
   * markdown syntax for optional processing by a mark down presentation engine
   */
  class Markdown extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/markdown";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for uri Type: String of characters used to
   * identify a name or a resource
   */
  class Uri extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/uri";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for oid type: An OID represented as a URI */
  class Oid extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/oid";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for positiveInt type: An integer with a value that
   * is positive (e.g. >0)
   */
  class PositiveInt extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/positiveInt";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for time Type: A time during the day, with no date
   * specified
   */
  class Time extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/time";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /**
   * Base StructureDefinition for unsignedInt type: An integer with a value that
   * is not negative (e.g. >= 0)
   */
  class UnsignedInt extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/unsignedInt";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for uuid type: A UUID, represented as a URI */
  class Uuid extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/uuid";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for xhtml Type */
  class Xhtml extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/xhtml";

    set value(value) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value() {
      return this._content["value"] as undefined;
    }

    validate(value) {}
  }

  /** Base StructureDefinition for Address Type */
  export class Address extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Address";

    /**
     * The name of the city, town, village or other community or delivery
     * center.
     */
    set city(value: String) {
      this._content["city"] = value;
    }

    get city(): String {
      return this._content["city"] as String;
    }

    /** Country - a nation as commonly understood or generally accepted. */
    set country(value: String) {
      this._content["country"] = value;
    }

    get country(): String {
      return this._content["country"] as String;
    }

    /** The name of the administrative area (county). */
    set district(value: String) {
      this._content["district"] = value;
    }

    get district(): String {
      return this._content["district"] as String;
    }

    /**
     * This component contains the house number, apartment number, street name,
     * street direction, P.O. Box number, delivery hints, and similar address
     * information.
     */
    set line(value: Array<String>) {
      this._content["line"] = value;
    }

    get line(): Array<String> {
      return this._content["line"] as Array<String>;
    }

    /** Time period when address was/is in use. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** A postal code designating a region defined by the postal service. */
    set postalCode(value: String) {
      this._content["postalCode"] = value;
    }

    get postalCode(): String {
      return this._content["postalCode"] as String;
    }

    /**
     * Sub-unit of a country with limited sovereignty in a federally organized
     * country. A code may be used if codes are in common use (i.e. US 2 letter
     * state codes).
     */
    set state(value: String) {
      this._content["state"] = value;
    }

    get state(): String {
      return this._content["state"] as String;
    }

    /** A full text representation of the address. */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /**
     * Distinguishes between physical addresses (those you can visit) and
     * mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses
     * are both.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** The purpose of this address. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /** Base StructureDefinition for Quantity Type */
  export class Quantity extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Quantity";

    /**
     * A computer processable form of the unit in some unit representation
     * system.
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * How the value should be understood and represented - whether the actual
     * value is greater or less than the stated value due to measurement issues;
     * e.g. if the comparator is "<" , then the real value is < stated value.
     */
    set comparator(value: Code) {
      this._content["comparator"] = value;
    }

    get comparator(): Code {
      return this._content["comparator"] as Code;
    }

    /**
     * The identification of the system that provides the coded form of the
     * unit.
     */
    set system(value: Uri) {
      this._content["system"] = value;
    }

    get system(): Uri {
      return this._content["system"] as Uri;
    }

    /** A human-readable form of the unit. */
    set unit(value: String) {
      this._content["unit"] = value;
    }

    get unit(): String {
      return this._content["unit"] as String;
    }

    /**
     * The value of the measured amount. The value includes an implicit
     * precision in the presentation of the value.
     */
    set value(value: Decimal) {
      this._content["value"] = value;
    }

    get value(): Decimal {
      return this._content["value"] as Decimal;
    }
  }

  /** Base StructureDefinition for Age Type */
  export class Age extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Age";
  }

  /** Base StructureDefinition for Annotation Type */
  export class Annotation extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Annotation";

    /** The individual responsible for making the annotation. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** The text of the annotation. */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /** Indicates when this particular annotation was made. */
    set time(value: DateTime) {
      this._content["time"] = value;
    }

    get time(): DateTime {
      return this._content["time"] as DateTime;
    }
  }

  /** Base StructureDefinition for Attachment Type */
  export class Attachment extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Attachment";

    /**
     * Identifies the type of the data in the attachment and allows a method to
     * be chosen to interpret or render the data. Includes mime type parameters
     * such as charset where appropriate.
     */
    set contentType(value: Code) {
      this._content["contentType"] = value;
    }

    get contentType(): Code {
      return this._content["contentType"] as Code;
    }

    /** The date that the attachment was first created. */
    set creation(value: DateTime) {
      this._content["creation"] = value;
    }

    get creation(): DateTime {
      return this._content["creation"] as DateTime;
    }

    /**
     * The actual data of the attachment - a sequence of bytes. In XML,
     * represented using base64.
     */
    set data(value: Base64Binary) {
      this._content["data"] = value;
    }

    get data(): Base64Binary {
      return this._content["data"] as Base64Binary;
    }

    /** The calculated hash of the data using SHA-1. Represented using base64. */
    set hash(value: Base64Binary) {
      this._content["hash"] = value;
    }

    get hash(): Base64Binary {
      return this._content["hash"] as Base64Binary;
    }

    /**
     * The human language of the content. The value can be any valid value
     * according to BCP 47.
     */
    set language(value: Code) {
      this._content["language"] = value;
    }

    get language(): Code {
      return this._content["language"] as Code;
    }

    /**
     * The number of bytes of data that make up this attachment (before base64
     * encoding, if that is done).
     */
    set size(value: UnsignedInt) {
      this._content["size"] = value;
    }

    get size(): UnsignedInt {
      return this._content["size"] as UnsignedInt;
    }

    /** A label or set of text to display in place of the data. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /** An alternative location where the data can be accessed. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }
  }

  /** Base StructureDefinition for CodeableConcept Type */
  export class CodeableConcept extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CodeableConcept";

    /** A reference to a code defined by a terminology system. */
    set coding(value: Array<Coding>) {
      this._content["coding"] = value;
    }

    get coding(): Array<Coding> {
      return this._content["coding"] as Array<Coding>;
    }

    /**
     * A human language representation of the concept as seen/selected/uttered
     * by the user who entered the data and/or which represents the intended
     * meaning of the user.
     */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }
  }

  /** Base StructureDefinition for Coding Type */
  export class Coding extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Coding";

    /**
     * A symbol in syntax defined by the system. The symbol may be a predefined
     * code or an expression in a syntax defined by the coding system (e.g.
     * post-coordination).
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * A representation of the meaning of the code in the system, following the
     * rules of the system.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /**
     * The identification of the code system that defines the meaning of the
     * symbol in the code.
     */
    set system(value: Uri) {
      this._content["system"] = value;
    }

    get system(): Uri {
      return this._content["system"] as Uri;
    }

    /**
     * Indicates that this coding was chosen by a user directly - i.e. off a
     * pick list of available items (codes or displays).
     */
    set userSelected(value: Boolean) {
      this._content["userSelected"] = value;
    }

    get userSelected(): Boolean {
      return this._content["userSelected"] as Boolean;
    }

    /**
     * The version of the code system which was used when choosing this code.
     * Note that a well-maintained code system does not need the version
     * reported, because the meaning of codes is consistent across versions.
     * However this cannot consistently be assured. and when the meaning is not
     * guaranteed to be consistent, the version SHOULD be exchanged.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Base StructureDefinition for ContactDetail Type */
  export class ContactDetail extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ContactDetail";

    /** The name of an individual to contact. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The contact details for the individual (if a name was provided) or the
     * organization.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** Base StructureDefinition for ContactPoint Type */
  export class ContactPoint extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ContactPoint";

    /** Time period when the contact point was/is in use. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Specifies a preferred order in which to use a set of contacts. Contacts
     * are ranked with lower values coming before higher values.
     */
    set rank(value: PositiveInt) {
      this._content["rank"] = value;
    }

    get rank(): PositiveInt {
      return this._content["rank"] as PositiveInt;
    }

    /**
     * Telecommunications form for contact point - what communications system is
     * required to make use of the contact.
     */
    set system(value: Code) {
      this._content["system"] = value;
    }

    get system(): Code {
      return this._content["system"] as Code;
    }

    /** Identifies the purpose for the contact point. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }

    /**
     * The actual contact point details, in a form that is meaningful to the
     * designated communication system (i.e. phone number or email address).
     */
    set value(value: String) {
      this._content["value"] = value;
    }

    get value(): String {
      return this._content["value"] as String;
    }
  }

  /** Base StructureDefinition for Contributor Type */
  export class Contributor extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Contributor";

    /**
     * Contact details to assist a user in finding and communicating with the
     * contributor.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The name of the individual or organization responsible for the
     * contribution.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The type of contributor. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /** Base StructureDefinition for Count Type */
  export class Count extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Count";
  }

  /** Base StructureDefinition for DataRequirement Type */
  export class DataRequirement extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DataRequirement";

    /**
     * Code filters specify additional constraints on the data, specifying the
     * value set of interest for a particular element of the data.
     */
    set codeFilter(value: Array<Element>) {
      this._content["codeFilter"] = value;
    }

    get codeFilter(): Array<Element> {
      return this._content["codeFilter"] as Array<Element>;
    }

    /**
     * Date filters specify additional constraints on the data in terms of the
     * applicable date range for specific elements.
     */
    set dateFilter(value: Array<Element>) {
      this._content["dateFilter"] = value;
    }

    get dateFilter(): Array<Element> {
      return this._content["dateFilter"] as Array<Element>;
    }

    /**
     * Indicates that specific elements of the type are referenced by the
     * knowledge module and must be supported by the consumer in order to obtain
     * an effective evaluation. This does not mean that a value is required for
     * this element, only that the consuming system must understand the element
     * and be able to provide values for it if they are available. Note that the
     * value for this element can be a path to allow references to nested
     * elements. In that case, all the elements along the path must be
     * supported.
     */
    set mustSupport(value: Array<String>) {
      this._content["mustSupport"] = value;
    }

    get mustSupport(): Array<String> {
      return this._content["mustSupport"] as Array<String>;
    }

    /**
     * The profile of the required data, specified as the uri of the profile
     * definition.
     */
    set profile(value: Array<Uri>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Uri> {
      return this._content["profile"] as Array<Uri>;
    }

    /**
     * The type of the required data, specified as the type name of a resource.
     * For profiles, this value is set to the type of the base resource of the
     * profile.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /** Base StructureDefinition for Distance Type */
  export class Distance extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Distance";
  }

  /** Base StructureDefinition for Dosage Type */
  export class Dosage extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Dosage";

    /** Supplemental instruction - e.g. "with meals". */
    set additionalInstruction(value: Array<CodeableConcept>) {
      this._content["additionalInstruction"] = value;
    }

    get additionalInstruction(): Array<CodeableConcept> {
      return this._content["additionalInstruction"] as Array<CodeableConcept>;
    }

    /**
     * Indicates whether the Medication is only taken when needed within a
     * specific dosing schedule (Boolean option), or it indicates the
     * precondition for taking the Medication (CodeableConcept).
     */
    set asNeeded(value: Boolean) {
      this._content["asNeeded"] = value;
    }

    get asNeeded(): Boolean {
      return this._content["asNeeded"] as Boolean;
    }

    /** Amount of medication per dose. */
    set dose(value: Range) {
      this._content["dose"] = value;
    }

    get dose(): Range {
      return this._content["dose"] as Range;
    }

    /** Upper limit on medication per administration. */
    set maxDosePerAdministration(value: Quantity) {
      this._content["maxDosePerAdministration"] = value;
    }

    get maxDosePerAdministration(): Quantity {
      return this._content["maxDosePerAdministration"] as Quantity;
    }

    /** Upper limit on medication per lifetime of the patient. */
    set maxDosePerLifetime(value: Quantity) {
      this._content["maxDosePerLifetime"] = value;
    }

    get maxDosePerLifetime(): Quantity {
      return this._content["maxDosePerLifetime"] as Quantity;
    }

    /** Upper limit on medication per unit of time. */
    set maxDosePerPeriod(value: Ratio) {
      this._content["maxDosePerPeriod"] = value;
    }

    get maxDosePerPeriod(): Ratio {
      return this._content["maxDosePerPeriod"] as Ratio;
    }

    /** Technique for administering medication. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /** Instructions in terms that are understood by the patient or consumer. */
    set patientInstruction(value: String) {
      this._content["patientInstruction"] = value;
    }

    get patientInstruction(): String {
      return this._content["patientInstruction"] as String;
    }

    /** Amount of medication per unit of time. */
    set rate(value: Ratio) {
      this._content["rate"] = value;
    }

    get rate(): Ratio {
      return this._content["rate"] as Ratio;
    }

    /** How drug should enter body. */
    set route(value: CodeableConcept) {
      this._content["route"] = value;
    }

    get route(): CodeableConcept {
      return this._content["route"] as CodeableConcept;
    }

    /**
     * Indicates the order in which the dosage instructions should be applied or
     * interpreted.
     */
    set sequence(value: Integer) {
      this._content["sequence"] = value;
    }

    get sequence(): Integer {
      return this._content["sequence"] as Integer;
    }

    /** Body site to administer to. */
    set site(value: CodeableConcept) {
      this._content["site"] = value;
    }

    get site(): CodeableConcept {
      return this._content["site"] as CodeableConcept;
    }

    /** Free text dosage instructions e.g. SIG. */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /** When medication should be administered. */
    set timing(value: Timing) {
      this._content["timing"] = value;
    }

    get timing(): Timing {
      return this._content["timing"] as Timing;
    }
  }

  /** Base StructureDefinition for Duration Type */
  export class Duration extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Duration";
  }

  /** Base StructureDefinition for ElementDefinition Type */
  export class ElementDefinition extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ElementDefinition";

    /** Identifies additional names by which this element might also be known. */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /**
     * Information about the base definition of the element, provided to make it
     * unnecessary for tools to trace the deviation of the element through the
     * derived and related profiles. This information is provided when the
     * element definition is not the original definition of an element - i.g.
     * either in a constraint on another type, or for elements from a super type
     * in a snap shot.
     */
    set base(value: Element) {
      this._content["base"] = value;
    }

    get base(): Element {
      return this._content["base"] as Element;
    }

    /**
     * Binds to a value set if this element is coded (code, Coding,
     * CodeableConcept, Quantity), or the data types (string, uri).
     */
    set binding(value: Element) {
      this._content["binding"] = value;
    }

    get binding(): Element {
      return this._content["binding"] as Element;
    }

    /**
     * A code that has the same meaning as the element in a particular
     * terminology.
     */
    set code(value: Array<Coding>) {
      this._content["code"] = value;
    }

    get code(): Array<Coding> {
      return this._content["code"] as Array<Coding>;
    }

    /**
     * Explanatory notes and implementation guidance about the data element,
     * including notes about how to use the data properly, exceptions to proper
     * use, etc.
     */
    set comment(value: Markdown) {
      this._content["comment"] = value;
    }

    get comment(): Markdown {
      return this._content["comment"] as Markdown;
    }

    /**
     * A reference to an invariant that may make additional statements about the
     * cardinality or value in the instance.
     */
    set condition(value: Array<Id>) {
      this._content["condition"] = value;
    }

    get condition(): Array<Id> {
      return this._content["condition"] as Array<Id>;
    }

    /**
     * Formal constraints such as co-occurrence and other constraints that can
     * be computationally evaluated within the context of the instance.
     */
    set constraint(value: Array<Element>) {
      this._content["constraint"] = value;
    }

    get constraint(): Array<Element> {
      return this._content["constraint"] as Array<Element>;
    }

    /**
     * Identifies the identity of an element defined elsewhere in the profile
     * whose content rules should be applied to the current element.
     */
    set contentReference(value: Uri) {
      this._content["contentReference"] = value;
    }

    get contentReference(): Uri {
      return this._content["contentReference"] as Uri;
    }

    /**
     * The value that should be used if there is no value stated in the instance
     * (e.g. 'if not otherwise specified, the abstract is false').
     */
    set defaultValue(value: Base64Binary) {
      this._content["defaultValue"] = value;
    }

    get defaultValue(): Base64Binary {
      return this._content["defaultValue"] as Base64Binary;
    }

    /**
     * Provides a complete explanation of the meaning of the data element for
     * human readability. For the case of elements derived from existing
     * elements (e.g. constraints), the definition SHALL be consistent with the
     * base definition, but convey the meaning of the element in the particular
     * context of use of the resource.
     */
    set definition(value: Markdown) {
      this._content["definition"] = value;
    }

    get definition(): Markdown {
      return this._content["definition"] as Markdown;
    }

    /**
     * A sample value for this element demonstrating the type of information
     * that would typically be found in the element.
     */
    set example(value: Array<Element>) {
      this._content["example"] = value;
    }

    get example(): Array<Element> {
      return this._content["example"] as Array<Element>;
    }

    /**
     * Specifies a value that SHALL be exactly the value for this element in the
     * instance. For purposes of comparison, non-significant whitespace is
     * ignored, and all values must be an exact match (case and accent
     * sensitive). Missing elements/attributes must also be missing.
     */
    set fixed(value: Base64Binary) {
      this._content["fixed"] = value;
    }

    get fixed(): Base64Binary {
      return this._content["fixed"] as Base64Binary;
    }

    /**
     * If true, the value of this element affects the interpretation of the
     * element or resource that contains it, and the value of the element cannot
     * be ignored. Typically, this is used for status, negation and
     * qualification codes. The effect of this is that the element cannot be
     * ignored by systems: they SHALL either recognize the element and process
     * it, and/or a pre-determination has been made that it is not relevant to
     * their particular system.
     */
    set isModifier(value: Boolean) {
      this._content["isModifier"] = value;
    }

    get isModifier(): Boolean {
      return this._content["isModifier"] as Boolean;
    }

    /**
     * Whether the element should be included if a client requests a search with
     * the parameter _summary=true.
     */
    set isSummary(value: Boolean) {
      this._content["isSummary"] = value;
    }

    get isSummary(): Boolean {
      return this._content["isSummary"] as Boolean;
    }

    /**
     * A single preferred label which is the text to display beside the element
     * indicating its meaning or to use to prompt for the element in a user
     * display or form.
     */
    set label(value: String) {
      this._content["label"] = value;
    }

    get label(): String {
      return this._content["label"] as String;
    }

    /**
     * Identifies a concept from an external specification that roughly
     * corresponds to this element.
     */
    set mapping(value: Array<Element>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<Element> {
      return this._content["mapping"] as Array<Element>;
    }

    /**
     * The maximum number of times this element is permitted to appear in the
     * instance.
     */
    set max(value: String) {
      this._content["max"] = value;
    }

    get max(): String {
      return this._content["max"] as String;
    }

    /**
     * Indicates the maximum length in characters that is permitted to be
     * present in conformant instances and which is expected to be supported by
     * conformant consumers that support the element.
     */
    set maxLength(value: Integer) {
      this._content["maxLength"] = value;
    }

    get maxLength(): Integer {
      return this._content["maxLength"] as Integer;
    }

    /**
     * The maximum allowed value for the element. The value is inclusive. This
     * is allowed for the types date, dateTime, instant, time, decimal, integer,
     * and Quantity.
     */
    set maxValue(value: Date) {
      this._content["maxValue"] = value;
    }

    get maxValue(): Date {
      return this._content["maxValue"] as Date;
    }

    /**
     * The Implicit meaning that is to be understood when this element is
     * missing (e.g. 'when this element is missing, the period is ongoing'.
     */
    set meaningWhenMissing(value: Markdown) {
      this._content["meaningWhenMissing"] = value;
    }

    get meaningWhenMissing(): Markdown {
      return this._content["meaningWhenMissing"] as Markdown;
    }

    /** The minimum number of times this element SHALL appear in the instance. */
    set min(value: UnsignedInt) {
      this._content["min"] = value;
    }

    get min(): UnsignedInt {
      return this._content["min"] as UnsignedInt;
    }

    /**
     * The minimum allowed value for the element. The value is inclusive. This
     * is allowed for the types date, dateTime, instant, time, decimal, integer,
     * and Quantity.
     */
    set minValue(value: Date) {
      this._content["minValue"] = value;
    }

    get minValue(): Date {
      return this._content["minValue"] as Date;
    }

    /**
     * If true, implementations that produce or consume resources SHALL provide
     * "support" for the element in some meaningful way. If false, the element
     * may be ignored and not supported.
     */
    set mustSupport(value: Boolean) {
      this._content["mustSupport"] = value;
    }

    get mustSupport(): Boolean {
      return this._content["mustSupport"] as Boolean;
    }

    /**
     * If present, indicates that the order of the repeating element has meaning
     * and describes what that meaning is. If absent, it means that the order of
     * the element has no meaning.
     */
    set orderMeaning(value: String) {
      this._content["orderMeaning"] = value;
    }

    get orderMeaning(): String {
      return this._content["orderMeaning"] as String;
    }

    /**
     * The path identifies the element and is expressed as a "."-separated list
     * of ancestor elements, beginning with the name of the resource or
     * extension.
     */
    set path(value: String) {
      this._content["path"] = value;
    }

    get path(): String {
      return this._content["path"] as String;
    }

    /**
     * Specifies a value that the value in the instance SHALL follow - that is,
     * any value in the pattern must be found in the instance. Other additional
     * values may be found too. This is effectively constraint by example. The
     * values of elements present in the pattern must match exactly
     * (case-sensitive, accent-sensitive, etc.).
     */
    set pattern(value: Base64Binary) {
      this._content["pattern"] = value;
    }

    get pattern(): Base64Binary {
      return this._content["pattern"] as Base64Binary;
    }

    /**
     * Codes that define how this element is represented in instances, when the
     * deviation varies from the normal case.
     */
    set representation(value: Array<Code>) {
      this._content["representation"] = value;
    }

    get representation(): Array<Code> {
      return this._content["representation"] as Array<Code>;
    }

    /**
     * This element is for traceability of why the element was created and why
     * the constraints exist as they do. This may be used to point to source
     * materials or specifications that drove the structure of this element.
     */
    set requirements(value: Markdown) {
      this._content["requirements"] = value;
    }

    get requirements(): Markdown {
      return this._content["requirements"] as Markdown;
    }

    /**
     * A concise description of what this element means (e.g. for use in
     * autogenerated summaries).
     */
    set short(value: String) {
      this._content["short"] = value;
    }

    get short(): String {
      return this._content["short"] as String;
    }

    /**
     * The name of this element definition slice, when slicing is working. The
     * name must be a token with no dots or spaces. This is a unique name
     * referring to a specific set of constraints applied to this element, used
     * to provide a name to different slices of the same element.
     */
    set sliceName(value: String) {
      this._content["sliceName"] = value;
    }

    get sliceName(): String {
      return this._content["sliceName"] as String;
    }

    /**
     * Indicates that the element is sliced into a set of alternative
     * definitions (i.e. in a structure definition, there are multiple different
     * constraints on a single element in the base resource). Slicing can be
     * used in any resource that has cardinality ..* on the base resource, or
     * any resource with a choice of types. The set of slices is any elements
     * that come after this in the element sequence that have the same path,
     * until a shorter path occurs (the shorter path terminates the set).
     */
    set slicing(value: Element) {
      this._content["slicing"] = value;
    }

    get slicing(): Element {
      return this._content["slicing"] as Element;
    }

    /**
     * The data type or resource that the value of this element is permitted to
     * be.
     */
    set type(value: Array<Element>) {
      this._content["type"] = value;
    }

    get type(): Array<Element> {
      return this._content["type"] as Array<Element>;
    }
  }

  /** Base StructureDefinition for Extension Type */
  export class Extension extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Extension";

    /**
     * Source of the definition for the extension code - a logical name or a
     * URL.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * Value of extension - may be a resource or one of a constrained set of the
     * data types (see Extensibility in the spec for list).
     */
    set value(value: Base64Binary) {
      this._content["value"] = value;
    }

    get value(): Base64Binary {
      return this._content["value"] as Base64Binary;
    }
  }

  /** Base StructureDefinition for HumanName Type */
  export class HumanName extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/HumanName";

    /**
     * The part of a name that links to the genealogy. In some cultures (e.g.
     * Eritrea) the family name of a son is the first name of his father.
     */
    set family(value: String) {
      this._content["family"] = value;
    }

    get family(): String {
      return this._content["family"] as String;
    }

    /** Given name. */
    set given(value: Array<String>) {
      this._content["given"] = value;
    }

    get given(): Array<String> {
      return this._content["given"] as Array<String>;
    }

    /**
     * Indicates the period of time when this name was valid for the named
     * person.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Part of the name that is acquired as a title due to academic, legal,
     * employment or nobility status, etc. and that appears at the start of the
     * name.
     */
    set prefix(value: Array<String>) {
      this._content["prefix"] = value;
    }

    get prefix(): Array<String> {
      return this._content["prefix"] as Array<String>;
    }

    /**
     * Part of the name that is acquired as a title due to academic, legal,
     * employment or nobility status, etc. and that appears at the end of the
     * name.
     */
    set suffix(value: Array<String>) {
      this._content["suffix"] = value;
    }

    get suffix(): Array<String> {
      return this._content["suffix"] as Array<String>;
    }

    /** A full text representation of the name. */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /** Identifies the purpose for this name. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /** Base StructureDefinition for Identifier Type */
  export class Identifier extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Identifier";

    /** Organization that issued/manages the identifier. */
    set assigner(value: Reference) {
      this._content["assigner"] = value;
    }

    get assigner(): Reference {
      return this._content["assigner"] as Reference;
    }

    /** Time period during which identifier is/was valid for use. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Establishes the namespace for the value - that is, a URL that describes a
     * set values that are unique.
     */
    set system(value: Uri) {
      this._content["system"] = value;
    }

    get system(): Uri {
      return this._content["system"] as Uri;
    }

    /**
     * A coded type for the identifier that can be used to determine which
     * identifier to use for a specific purpose.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** The purpose of this identifier. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }

    /**
     * The portion of the identifier typically relevant to the user and which is
     * unique within the context of the system.
     */
    set value(value: String) {
      this._content["value"] = value;
    }

    get value(): String {
      return this._content["value"] as String;
    }
  }

  /** Base StructureDefinition for Meta Type */
  export class Meta extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Meta";

    /** When the resource last changed - e.g. when the version changed. */
    set lastUpdated(value: Instant) {
      this._content["lastUpdated"] = value;
    }

    get lastUpdated(): Instant {
      return this._content["lastUpdated"] as Instant;
    }

    /**
     * A list of profiles (references to
     * [StructureDefinition](structuredefinition.html#) resources) that this
     * resource claims to conform to. The URL is a reference to
     * [StructureDefinition.url]().
     */
    set profile(value: Array<Uri>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Uri> {
      return this._content["profile"] as Array<Uri>;
    }

    /**
     * Security labels applied to this resource. These tags connect specific
     * resources to the overall security policy and infrastructure.
     */
    set security(value: Array<Coding>) {
      this._content["security"] = value;
    }

    get security(): Array<Coding> {
      return this._content["security"] as Array<Coding>;
    }

    /**
     * Tags applied to this resource. Tags are intended to be used to identify
     * and relate resources to process and workflow, and applications are not
     * required to consider the tags when interpreting the meaning of a
     * resource.
     */
    set tag(value: Array<Coding>) {
      this._content["tag"] = value;
    }

    get tag(): Array<Coding> {
      return this._content["tag"] as Array<Coding>;
    }

    /**
     * The version specific identifier, as it appears in the version portion of
     * the URL. This values changes when the resource is created, updated, or
     * deleted.
     */
    set versionId(value: Id) {
      this._content["versionId"] = value;
    }

    get versionId(): Id {
      return this._content["versionId"] as Id;
    }
  }

  /** Base StructureDefinition for Money Type */
  export class Money extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Money";
  }

  /** Base StructureDefinition for Narrative Type */
  export class Narrative extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Narrative";

    /** The actual narrative content, a stripped down version of XHTML. */
    set div(value: Xhtml) {
      this._content["div"] = value;
    }

    get div(): Xhtml {
      return this._content["div"] as Xhtml;
    }

    /**
     * The status of the narrative - whether it's entirely generated (from just
     * the defined data or the extensions too), or whether a human authored it
     * and it may contain additional data.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** Base StructureDefinition for ParameterDefinition Type */
  export class ParameterDefinition extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ParameterDefinition";

    /**
     * A brief discussion of what the parameter is for and how it is used by the
     * module.
     */
    set documentation(value: String) {
      this._content["documentation"] = value;
    }

    get documentation(): String {
      return this._content["documentation"] as String;
    }

    /**
     * The maximum number of times this element is permitted to appear in the
     * request or response.
     */
    set max(value: String) {
      this._content["max"] = value;
    }

    get max(): String {
      return this._content["max"] as String;
    }

    /**
     * The minimum number of times this parameter SHALL appear in the request or
     * response.
     */
    set min(value: Integer) {
      this._content["min"] = value;
    }

    get min(): Integer {
      return this._content["min"] as Integer;
    }

    /**
     * The name of the parameter used to allow access to the value of the
     * parameter in evaluation contexts.
     */
    set name(value: Code) {
      this._content["name"] = value;
    }

    get name(): Code {
      return this._content["name"] as Code;
    }

    /**
     * If specified, this indicates a profile that the input data must conform
     * to, or that the output data will conform to.
     */
    set profile(value: Reference) {
      this._content["profile"] = value;
    }

    get profile(): Reference {
      return this._content["profile"] as Reference;
    }

    /** The type of the parameter. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** Whether the parameter is input or output for the module. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /** Base StructureDefinition for Period Type */
  export class Period extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Period";

    /**
     * The end of the period. If the end of the period is missing, it means that
     * the period is ongoing. The start may be in the past, and the end date in
     * the future, which means that period is expected/planned to end at that
     * time.
     */
    set end(value: DateTime) {
      this._content["end"] = value;
    }

    get end(): DateTime {
      return this._content["end"] as DateTime;
    }

    /** The start of the period. The boundary is inclusive. */
    set start(value: DateTime) {
      this._content["start"] = value;
    }

    get start(): DateTime {
      return this._content["start"] as DateTime;
    }
  }

  /** Base StructureDefinition for Range Type */
  export class Range extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Range";

    /** The high limit. The boundary is inclusive. */
    set high(value: Quantity) {
      this._content["high"] = value;
    }

    get high(): Quantity {
      return this._content["high"] as Quantity;
    }

    /** The low limit. The boundary is inclusive. */
    set low(value: Quantity) {
      this._content["low"] = value;
    }

    get low(): Quantity {
      return this._content["low"] as Quantity;
    }
  }

  /** Base StructureDefinition for Ratio Type */
  export class Ratio extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Ratio";

    /** The value of the denominator. */
    set denominator(value: Quantity) {
      this._content["denominator"] = value;
    }

    get denominator(): Quantity {
      return this._content["denominator"] as Quantity;
    }

    /** The value of the numerator. */
    set numerator(value: Quantity) {
      this._content["numerator"] = value;
    }

    get numerator(): Quantity {
      return this._content["numerator"] as Quantity;
    }
  }

  /** Base StructureDefinition for Reference Type */
  export class Reference extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Reference";

    /**
     * Plain text narrative that identifies the resource in addition to the
     * resource reference.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /**
     * An identifier for the other resource. This is used when there is no way
     * to reference the other resource directly, either because the entity is
     * not available through a FHIR server, or because there is no way for the
     * author of the resource to convert a known identifier to an actual
     * location. There is no requirement that a Reference.identifier point to
     * something that is actually exposed as a FHIR instance, but it SHALL point
     * to a business concept that would be expected to be exposed as a FHIR
     * instance, and that instance would need to be of a FHIR resource type
     * allowed by the reference.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A reference to a location at which the other resource is found. The
     * reference may be a relative reference, in which case it is relative to
     * the service base URL, or an absolute URL that resolves to the location
     * where the resource is found. The reference may be version specific or
     * not. If the reference is not to a FHIR RESTful server, then it should be
     * assumed to be version specific. Internal fragment references (start with
     * '#') refer to contained resources.
     */
    set reference(value: String) {
      this._content["reference"] = value;
    }

    get reference(): String {
      return this._content["reference"] as String;
    }
  }

  /** Base StructureDefinition for RelatedArtifact Type */
  export class RelatedArtifact extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RelatedArtifact";

    /**
     * A bibliographic citation for the related artifact. This text SHOULD be
     * formatted according to an accepted citation format.
     */
    set citation(value: String) {
      this._content["citation"] = value;
    }

    get citation(): String {
      return this._content["citation"] as String;
    }

    /**
     * A brief description of the document or knowledge resource being
     * referenced, suitable for display to a consumer.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /**
     * The document being referenced, represented as an attachment. This is
     * exclusive with the resource element.
     */
    set document(value: Attachment) {
      this._content["document"] = value;
    }

    get document(): Attachment {
      return this._content["document"] as Attachment;
    }

    /**
     * The related resource, such as a library, value set, profile, or other
     * knowledge resource.
     */
    set resource(value: Reference) {
      this._content["resource"] = value;
    }

    get resource(): Reference {
      return this._content["resource"] as Reference;
    }

    /** The type of relationship to the related artifact. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** A url for the artifact that can be followed to access the actual content. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }
  }

  /** Base StructureDefinition for SampledData Type */
  export class SampledData extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/SampledData";

    /**
     * A series of data points which are decimal values separated by a single
     * space (character u20). The special values "E" (error), "L" (below
     * detection limit) and "U" (above detection limit) can also be used in
     * place of a decimal value.
     */
    set data(value: String) {
      this._content["data"] = value;
    }

    get data(): String {
      return this._content["data"] as String;
    }

    /**
     * The number of sample points at each time point. If this value is greater
     * than one, then the dimensions will be interlaced - all the sample points
     * for a point in time will be recorded at once.
     */
    set dimensions(value: PositiveInt) {
      this._content["dimensions"] = value;
    }

    get dimensions(): PositiveInt {
      return this._content["dimensions"] as PositiveInt;
    }

    /**
     * A correction factor that is applied to the sampled data points before
     * they are added to the origin.
     */
    set factor(value: Decimal) {
      this._content["factor"] = value;
    }

    get factor(): Decimal {
      return this._content["factor"] as Decimal;
    }

    /**
     * The lower limit of detection of the measured points. This is needed if
     * any of the data points have the value "L" (lower than detection limit).
     */
    set lowerLimit(value: Decimal) {
      this._content["lowerLimit"] = value;
    }

    get lowerLimit(): Decimal {
      return this._content["lowerLimit"] as Decimal;
    }

    /**
     * The base quantity that a measured value of zero represents. In addition,
     * this provides the units of the entire measurement series.
     */
    set origin(value: Quantity) {
      this._content["origin"] = value;
    }

    get origin(): Quantity {
      return this._content["origin"] as Quantity;
    }

    /** The length of time between sampling times, measured in milliseconds. */
    set period(value: Decimal) {
      this._content["period"] = value;
    }

    get period(): Decimal {
      return this._content["period"] as Decimal;
    }

    /**
     * The upper limit of detection of the measured points. This is needed if
     * any of the data points have the value "U" (higher than detection limit).
     */
    set upperLimit(value: Decimal) {
      this._content["upperLimit"] = value;
    }

    get upperLimit(): Decimal {
      return this._content["upperLimit"] as Decimal;
    }
  }

  /** Base StructureDefinition for Signature Type */
  export class Signature extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Signature";

    /**
     * The base64 encoding of the Signature content. When signature is not
     * recorded electronically this element would be empty.
     */
    set blob(value: Base64Binary) {
      this._content["blob"] = value;
    }

    get blob(): Base64Binary {
      return this._content["blob"] as Base64Binary;
    }

    /**
     * A mime type that indicates the technical format of the signature.
     * Important mime types are application/signature+xml for X ML DigSig,
     * application/jwt for JWT, and image/* for a graphical image of a
     * signature, etc.
     */
    set contentType(value: Code) {
      this._content["contentType"] = value;
    }

    get contentType(): Code {
      return this._content["contentType"] as Code;
    }

    /**
     * A reference to an application-usable description of the identity that is
     * represented by the signature.
     */
    set onBehalfOf(value: Uri) {
      this._content["onBehalfOf"] = value;
    }

    get onBehalfOf(): Uri {
      return this._content["onBehalfOf"] as Uri;
    }

    /**
     * An indication of the reason that the entity signed this document. This
     * may be explicitly included as part of the signature information and can
     * be used when determining accountability for various actions concerning
     * the document.
     */
    set type(value: Array<Coding>) {
      this._content["type"] = value;
    }

    get type(): Array<Coding> {
      return this._content["type"] as Array<Coding>;
    }

    /** When the digital signature was signed. */
    set when(value: Instant) {
      this._content["when"] = value;
    }

    get when(): Instant {
      return this._content["when"] as Instant;
    }

    /**
     * A reference to an application-usable description of the identity that
     * signed (e.g. the signature used their private key).
     */
    set who(value: Uri) {
      this._content["who"] = value;
    }

    get who(): Uri {
      return this._content["who"] as Uri;
    }
  }

  /** Base StructureDefinition for Timing Type */
  export class Timing extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Timing";

    /**
     * A code for the timing schedule. Some codes such as BID are ubiquitous,
     * but many institutions define their own additional codes. If a code is
     * provided, the code is understood to be a complete statement of whatever
     * is specified in the structured timing data, and either the code or the
     * data may be used to interpret the Timing, with the exception that
     * .repeat.bounds still applies over the code (and is not contained in the
     * code).
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Identifies specific times when the event occurs. */
    set event(value: Array<DateTime>) {
      this._content["event"] = value;
    }

    get event(): Array<DateTime> {
      return this._content["event"] as Array<DateTime>;
    }

    /** A set of rules that describe when the event is scheduled. */
    set repeat(value: Element) {
      this._content["repeat"] = value;
    }

    get repeat(): Element {
      return this._content["repeat"] as Element;
    }
  }

  /** Base StructureDefinition for TriggerDefinition Type */
  export class TriggerDefinition extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/TriggerDefinition";

    /** The triggering data of the event (if this is a data trigger). */
    set eventData(value: DataRequirement) {
      this._content["eventData"] = value;
    }

    get eventData(): DataRequirement {
      return this._content["eventData"] as DataRequirement;
    }

    /** The name of the event (if this is a named-event trigger). */
    set eventName(value: String) {
      this._content["eventName"] = value;
    }

    get eventName(): String {
      return this._content["eventName"] as String;
    }

    /** The timing of the event (if this is a period trigger). */
    set eventTiming(value: Timing) {
      this._content["eventTiming"] = value;
    }

    get eventTiming(): Timing {
      return this._content["eventTiming"] as Timing;
    }

    /** The type of triggering event. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /** Base StructureDefinition for UsageContext Type */
  export class UsageContext extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/UsageContext";

    /**
     * A code that identifies the type of context being specified by this usage
     * context.
     */
    set code(value: Coding) {
      this._content["code"] = value;
    }

    get code(): Coding {
      return this._content["code"] as Coding;
    }

    /**
     * A value that defines the context specified in this context of use. The
     * interpretation of the value is defined by the code.
     */
    set value(value: CodeableConcept) {
      this._content["value"] = value;
    }

    get value(): CodeableConcept {
      return this._content["value"] as CodeableConcept;
    }
  }

  /** A fixed quantity (no comparator) */
  export class SimpleQuantity extends Quantity {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SimpleQuantity";
  }
}
