// Autogenerated by src/generate.  Do not edit!
// cspell: disable
namespace FhirR4b {
  export type TElement =
    | string
    | string[]
    | number
    | number[]
    | boolean
    | Resource
    | Resource[]
    | Address
    | Address[]
    | Age
    | Age[]
    | Annotation
    | Annotation[]
    | Attachment
    | Attachment[]
    | BackboneElement
    | BackboneElement[]
    | Base64Binary
    | Base64Binary[]
    | Boolean
    | Boolean[]
    | Canonical
    | Canonical[]
    | Code
    | Code[]
    | CodeableConcept
    | CodeableConcept[]
    | CodeableReference
    | CodeableReference[]
    | Coding
    | Coding[]
    | ContactDetail
    | ContactDetail[]
    | ContactPoint
    | ContactPoint[]
    | Contributor
    | Contributor[]
    | Count
    | Count[]
    | DataRequirement
    | DataRequirement[]
    | Date
    | Date[]
    | DateTime
    | DateTime[]
    | Decimal
    | Decimal[]
    | Distance
    | Distance[]
    | Dosage
    | Dosage[]
    | Duration
    | Duration[]
    | Element
    | Element[]
    | ElementDefinition
    | ElementDefinition[]
    | Expression
    | Expression[]
    | Extension
    | Extension[]
    | HumanName
    | HumanName[]
    | Id
    | Id[]
    | Identifier
    | Identifier[]
    | Instant
    | Instant[]
    | Integer
    | Integer[]
    | Markdown
    | Markdown[]
    | MarketingStatus
    | MarketingStatus[]
    | Meta
    | Meta[]
    | Money
    | Money[]
    | MoneyQuantity
    | MoneyQuantity[]
    | Narrative
    | Narrative[]
    | Oid
    | Oid[]
    | ParameterDefinition
    | ParameterDefinition[]
    | Period
    | Period[]
    | Population
    | Population[]
    | PositiveInt
    | PositiveInt[]
    | ProdCharacteristic
    | ProdCharacteristic[]
    | ProductShelfLife
    | ProductShelfLife[]
    | Quantity
    | Quantity[]
    | Range
    | Range[]
    | Ratio
    | Ratio[]
    | RatioRange
    | RatioRange[]
    | Reference
    | Reference[]
    | RelatedArtifact
    | RelatedArtifact[]
    | SampledData
    | SampledData[]
    | Signature
    | Signature[]
    | SimpleQuantity
    | SimpleQuantity[]
    | String
    | String[]
    | Time
    | Time[]
    | Timing
    | Timing[]
    | TriggerDefinition
    | TriggerDefinition[]
    | UnsignedInt
    | UnsignedInt[]
    | Uri
    | Uri[]
    | Url
    | Url[]
    | UsageContext
    | UsageContext[]
    | Uuid
    | Uuid[]
    | Xhtml
    | Xhtml[];

  /** Root of fhir class hierarchy */
  abstract class Base {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Base";
    protected _content: { [key: string]: TElement } = {};

    /**
     * Base class for all data elements
     *
     * @content {Object} value
     */
    constructor(content: { [key: string]: TElement }) {
      Object.assign(this._content, content);
      this._content.resourceType = this.constructor.name;
    }
  }

  /**
   * Base StructureDefinition for Element Type: Base definition for all elements
   * in a resource.
   */
  export abstract class Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Element";
    protected _content: { [key: string]: TElement } = {};

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the element. To make the use of extensions safe and
     * manageable, there is a strict set of governance applied to the definition
     * and use of extensions. Though any implementer can define an extension,
     * there is a set of requirements that SHALL be met as part of the
     * definition of the extension.
     */
    set extension(value: Array<Extension>) {
      this._content["extension"] = value;
    }

    get extension(): Array<Extension> {
      return this._content["extension"] as Array<Extension>;
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    set id(value: string) {
      this._content["id"] = value;
    }

    get id(): string {
      return this._content["id"] as string;
    }
  }

  /**
   * Base StructureDefinition for BackboneElement Type: Base definition for all
   * elements that are defined inside a resource - but not those in a data
   * type.
   */
  export abstract class BackboneElement extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/BackboneElement";

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the element and that modifies the understanding of
     * the element in which it is contained and/or the understanding of the
     * containing element's descendants. Usually modifier elements provide
     * negation or qualification. To make the use of extensions safe and
     * manageable, there is a strict set of governance applied to the definition
     * and use of extensions. Though any implementer can define an extension,
     * there is a set of requirements that SHALL be met as part of the
     * definition of the extension. Applications processing a resource are
     * required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    set modifierExtension(value: Array<Extension>) {
      this._content["modifierExtension"] = value;
    }

    get modifierExtension(): Array<Extension> {
      return this._content["modifierExtension"] as Array<Extension>;
    }
  }

  /** Base StructureDefinition for base64Binary Type: A stream of bytes */
  class Base64Binary extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/base64Binary";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/(\s*([0-9a-zA-Z\+/=]){4}\s*)+/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '(\s*([0-9a-zA-Z\+/=]){4}\s*)+' for type Base64Binary`,
        );
      }

      return true;
    }
  }

  /** Base StructureDefinition for boolean Type: Value of "true" or "false" */
  class Boolean extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/boolean";

    set value(value: boolean) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): boolean {
      return this._content["value"] as boolean;
    }

    validate(value: boolean) {
      if (!/true|false/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex 'true|false' for type Boolean`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for uri Type: String of characters used to
   * identify a name or a resource
   */
  class Uri extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/uri";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/\S*/.test(value.toString())) {
        throw new Error(`Value ${value} fails regex '\S*' for type Uri`);
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for canonical type: A URI that is a reference to a
   * canonical URL on a FHIR resource
   */
  class Canonical extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/canonical";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/\S*/.test(value.toString())) {
        throw new Error(`Value ${value} fails regex '\S*' for type Canonical`);
      }

      return true;
    }
  }

  /** Base StructureDefinition for string Type: A sequence of Unicode characters */
  class String extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/string";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/[ \r\n\t\S]+/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '[ \r\n\t\S]+' for type String`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for code type: A string which has at least one
   * character and no leading or trailing whitespace and where there is no
   * whitespace other than single spaces in the contents
   */
  class Code extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/code";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/[^\s]+(\s[^\s]+)*/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '[^\s]+(\s[^\s]+)*' for type Code`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for date Type: A date or partial date (e.g. just
   * year or year + month). There is no time zone. The format is a union of the
   * schema types gYear, gYearMonth and date. Dates SHALL be valid dates.
   */
  class Date extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/date";

    set value(value: DateTime) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): DateTime {
      return this._content["value"] as DateTime;
    }

    validate(value: DateTime) {
      if (
        !/([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?/.test(
          value.toString(),
        )
      ) {
        throw new Error(
          `Value ${value} fails regex '([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?' for type Date`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for dateTime Type: A date, date-time or partial
   * date (e.g. just year or year + month). If hours and minutes are specified,
   * a time zone SHALL be populated. The format is a union of the schema types
   * gYear, gYearMonth, date and dateTime. Seconds must be provided due to
   * schema type constraints but may be zero-filled and may be ignored. Dates
   * SHALL be valid dates.
   */
  class DateTime extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/dateTime";

    set value(value: DateTime) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): DateTime {
      return this._content["value"] as DateTime;
    }

    validate(value: DateTime) {
      if (
        !/([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?/.test(
          value.toString(),
        )
      ) {
        throw new Error(
          `Value ${value} fails regex '([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?' for type DateTime`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for decimal Type: A rational number with implicit
   * precision
   */
  class Decimal extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/decimal";

    set value(value: number) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): number {
      return this._content["value"] as number;
    }

    validate(value: number) {
      if (
        !/-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?/.test(value.toString())
      ) {
        throw new Error(
          `Value ${value} fails regex '-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?' for type Decimal`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for id type: Any combination of letters, numerals,
   * "-" and ".", with a length limit of 64 characters. (This might be an
   * integer, an unprefixed OID, UUID or any other identifier pattern that meets
   * these constraints.) Ids are case-insensitive.
   */
  class Id extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/id";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/[A-Za-z0-9\-\.]{1,64}/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '[A-Za-z0-9\-\.]{1,64}' for type Id`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for instant Type: An instant in time - known at
   * least to the second
   */
  class Instant extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/instant";

    set value(value: DateTime) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): DateTime {
      return this._content["value"] as DateTime;
    }

    validate(value: DateTime) {
      if (
        !/([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/.test(
          value.toString(),
        )
      ) {
        throw new Error(
          `Value ${value} fails regex '([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))' for type Instant`,
        );
      }

      return true;
    }
  }

  /** Base StructureDefinition for integer Type: A whole number */
  class Integer extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/integer";

    set value(value: number) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): number {
      return this._content["value"] as number;
    }

    validate(value: number) {
      if (!/-?([0]|([1-9][0-9]*))/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '-?([0]|([1-9][0-9]*))' for type Integer`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for markdown type: A string that may contain
   * Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   */
  class Markdown extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/markdown";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/[ \r\n\t\S]+/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '[ \r\n\t\S]+' for type Markdown`,
        );
      }

      return true;
    }
  }

  /** Base StructureDefinition for oid type: An OID represented as a URI */
  class Oid extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/oid";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/urn:oid:[0-2](\.(0|[1-9][0-9]*))+/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex 'urn:oid:[0-2](\.(0|[1-9][0-9]*))+' for type Oid`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for positiveInt type: An integer with a value that
   * is positive (e.g. >0)
   */
  class PositiveInt extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/positiveInt";

    set value(value: number) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): number {
      return this._content["value"] as number;
    }

    validate(value: number) {
      if (!/[1-9][0-9]*/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '[1-9][0-9]*' for type PositiveInt`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for time Type: A time during the day, with no date
   * specified
   */
  class Time extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/time";

    set value(value: DateTime) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): DateTime {
      return this._content["value"] as DateTime;
    }

    validate(value: DateTime) {
      if (
        !/([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?/.test(
          value.toString(),
        )
      ) {
        throw new Error(
          `Value ${value} fails regex '([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?' for type Time`,
        );
      }

      return true;
    }
  }

  /**
   * Base StructureDefinition for unsignedInt type: An integer with a value that
   * is not negative (e.g. >= 0)
   */
  class UnsignedInt extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/unsignedInt";

    set value(value: number) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): number {
      return this._content["value"] as number;
    }

    validate(value: number) {
      if (!/[0]|([1-9][0-9]*)/.test(value.toString())) {
        throw new Error(
          `Value ${value} fails regex '[0]|([1-9][0-9]*)' for type UnsignedInt`,
        );
      }

      return true;
    }
  }

  /** Base StructureDefinition for url type: A URI that is a literal reference */
  class Url extends Element {
    static canonicalUrl: string = "http://hl7.org/fhir/StructureDefinition/url";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (!/\S*/.test(value.toString())) {
        throw new Error(`Value ${value} fails regex '\S*' for type Url`);
      }

      return true;
    }
  }

  /** Base StructureDefinition for uuid type: A UUID, represented as a URI */
  class Uuid extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/uuid";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      if (
        !/urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/.test(
          value.toString(),
        )
      ) {
        throw new Error(
          `Value ${value} fails regex 'urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' for type Uuid`,
        );
      }

      return true;
    }
  }

  /** Base StructureDefinition for xhtml Type */
  class Xhtml extends Element {
    static canonicalUrl: string =
      "http://hl7.org/fhir/StructureDefinition/xhtml";

    set value(value: string) {
      this.validate(value);
      this._content["value"] = value;
    }

    get value(): string {
      return this._content["value"] as string;
    }

    validate(value: string) {
      return true;
    }
  }

  /**
   * Base StructureDefinition for Address Type: An address expressed using
   * postal conventions (as opposed to GPS or other location definition
   * formats). This data type may be used to convey addresses for use in
   * delivering mail as well as for visiting locations which might not be valid
   * for mail delivery. There are a variety of postal address formats defined
   * around the world.
   */
  export class Address extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Address";

    /**
     * The name of the city, town, suburb, village or other community or
     * delivery center.
     */
    set city(value: String) {
      this._content["city"] = value;
    }

    get city(): String {
      return this._content["city"] as String;
    }

    /** Country - a nation as commonly understood or generally accepted. */
    set country(value: String) {
      this._content["country"] = value;
    }

    get country(): String {
      return this._content["country"] as String;
    }

    /** The name of the administrative area (county). */
    set district(value: String) {
      this._content["district"] = value;
    }

    get district(): String {
      return this._content["district"] as String;
    }

    /**
     * This component contains the house number, apartment number, street name,
     * street direction, P.O. Box number, delivery hints, and similar address
     * information.
     */
    set line(value: Array<String>) {
      this._content["line"] = value;
    }

    get line(): Array<String> {
      return this._content["line"] as Array<String>;
    }

    /** Time period when address was/is in use. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** A postal code designating a region defined by the postal service. */
    set postalCode(value: String) {
      this._content["postalCode"] = value;
    }

    get postalCode(): String {
      return this._content["postalCode"] as String;
    }

    /**
     * Sub-unit of a country with limited sovereignty in a federally organized
     * country. A code may be used if codes are in common use (e.g. US 2 letter
     * state codes).
     */
    set state(value: String) {
      this._content["state"] = value;
    }

    get state(): String {
      return this._content["state"] as String;
    }

    /**
     * Specifies the entire address as it should be displayed e.g. on a postal
     * label. This may be provided instead of or as well as the specific parts.
     */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /**
     * Distinguishes between physical addresses (those you can visit) and
     * mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses
     * are both.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** The purpose of this address. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /**
   * Base StructureDefinition for Quantity Type: A measured amount (or an amount
   * that can potentially be measured). Note that measured amounts include
   * amounts that are not precisely quantified, including amounts involving
   * arbitrary units and floating currencies.
   */
  export class Quantity extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Quantity";

    /**
     * A computer processable form of the unit in some unit representation
     * system.
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * How the value should be understood and represented - whether the actual
     * value is greater or less than the stated value due to measurement issues;
     * e.g. if the comparator is "<" , then the real value is < stated value.
     */
    set comparator(value: Code) {
      this._content["comparator"] = value;
    }

    get comparator(): Code {
      return this._content["comparator"] as Code;
    }

    /**
     * The identification of the system that provides the coded form of the
     * unit.
     */
    set system(value: Uri) {
      this._content["system"] = value;
    }

    get system(): Uri {
      return this._content["system"] as Uri;
    }

    /** A human-readable form of the unit. */
    set unit(value: String) {
      this._content["unit"] = value;
    }

    get unit(): String {
      return this._content["unit"] as String;
    }

    /**
     * The value of the measured amount. The value includes an implicit
     * precision in the presentation of the value.
     */
    set value(value: Decimal) {
      this._content["value"] = value;
    }

    get value(): Decimal {
      return this._content["value"] as Decimal;
    }
  }

  /**
   * Base StructureDefinition for Age Type: A duration of time during which an
   * organism (or a process) has existed.
   */
  export class Age extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Age";
  }

  /**
   * Base StructureDefinition for Annotation Type: A text note which also
   * contains information about who made the statement and when.
   */
  export class Annotation extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Annotation";

    /** The individual responsible for making the annotation. */
    set author(value: Reference | String) {
      this._content["author"] = value;
    }

    get authorReference(): Reference {
      return this._content["author"] as Reference;
    }

    get authorString(): String {
      return this._content["author"] as String;
    }

    /** The text of the annotation in markdown format. */
    set text(value: Markdown) {
      this._content["text"] = value;
    }

    get text(): Markdown {
      return this._content["text"] as Markdown;
    }

    /** Indicates when this particular annotation was made. */
    set time(value: DateTime) {
      this._content["time"] = value;
    }

    get time(): DateTime {
      return this._content["time"] as DateTime;
    }
  }

  /**
   * Base StructureDefinition for Attachment Type: For referring to data content
   * defined in other formats.
   */
  export class Attachment extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Attachment";

    /**
     * Identifies the type of the data in the attachment and allows a method to
     * be chosen to interpret or render the data. Includes mime type parameters
     * such as charset where appropriate.
     */
    set contentType(value: Code) {
      this._content["contentType"] = value;
    }

    get contentType(): Code {
      return this._content["contentType"] as Code;
    }

    /** The date that the attachment was first created. */
    set creation(value: DateTime) {
      this._content["creation"] = value;
    }

    get creation(): DateTime {
      return this._content["creation"] as DateTime;
    }

    /** The actual data of the attachment - a sequence of bytes, base64 encoded. */
    set data(value: Base64Binary) {
      this._content["data"] = value;
    }

    get data(): Base64Binary {
      return this._content["data"] as Base64Binary;
    }

    /** The calculated hash of the data using SHA-1. Represented using base64. */
    set hash(value: Base64Binary) {
      this._content["hash"] = value;
    }

    get hash(): Base64Binary {
      return this._content["hash"] as Base64Binary;
    }

    /**
     * The human language of the content. The value can be any valid value
     * according to BCP 47.
     */
    set language(value: Code) {
      this._content["language"] = value;
    }

    get language(): Code {
      return this._content["language"] as Code;
    }

    /**
     * The number of bytes of data that make up this attachment (before base64
     * encoding, if that is done).
     */
    set size(value: UnsignedInt) {
      this._content["size"] = value;
    }

    get size(): UnsignedInt {
      return this._content["size"] as UnsignedInt;
    }

    /** A label or set of text to display in place of the data. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /** A location where the data can be accessed. */
    set url(value: Url) {
      this._content["url"] = value;
    }

    get url(): Url {
      return this._content["url"] as Url;
    }
  }

  /**
   * Base StructureDefinition for CodeableConcept Type: A concept that may be
   * defined by a formal reference to a terminology or ontology or may be
   * provided by text.
   */
  export class CodeableConcept extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CodeableConcept";

    /** A reference to a code defined by a terminology system. */
    set coding(value: Array<Coding>) {
      this._content["coding"] = value;
    }

    get coding(): Array<Coding> {
      return this._content["coding"] as Array<Coding>;
    }

    /**
     * A human language representation of the concept as seen/selected/uttered
     * by the user who entered the data and/or which represents the intended
     * meaning of the user.
     */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }
  }

  /**
   * Base StructureDefinition for CodeableReference Type: A reference to a
   * resource (by instance), or instead, a reference to a concept defined in a
   * terminology or ontology (by class).
   */
  export class CodeableReference extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CodeableReference";

    /**
     * A reference to a concept - e.g. the information is identified by its
     * general class to the degree of precision found in the terminology.
     */
    set concept(value: CodeableConcept) {
      this._content["concept"] = value;
    }

    get concept(): CodeableConcept {
      return this._content["concept"] as CodeableConcept;
    }

    /**
     * A reference to a resource the provides exact details about the
     * information being referenced.
     */
    set reference(value: Reference) {
      this._content["reference"] = value;
    }

    get reference(): Reference {
      return this._content["reference"] as Reference;
    }
  }

  /**
   * Base StructureDefinition for Coding Type: A reference to a code defined by
   * a terminology system.
   */
  export class Coding extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Coding";

    /**
     * A symbol in syntax defined by the system. The symbol may be a predefined
     * code or an expression in a syntax defined by the coding system (e.g.
     * post-coordination).
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * A representation of the meaning of the code in the system, following the
     * rules of the system.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /**
     * The identification of the code system that defines the meaning of the
     * symbol in the code.
     */
    set system(value: Uri) {
      this._content["system"] = value;
    }

    get system(): Uri {
      return this._content["system"] as Uri;
    }

    /**
     * Indicates that this coding was chosen by a user directly - e.g. off a
     * pick list of available items (codes or displays).
     */
    set userSelected(value: Boolean) {
      this._content["userSelected"] = value;
    }

    get userSelected(): Boolean {
      return this._content["userSelected"] as Boolean;
    }

    /**
     * The version of the code system which was used when choosing this code.
     * Note that a well-maintained code system does not need the version
     * reported, because the meaning of codes is consistent across versions.
     * However this cannot consistently be assured, and when the meaning is not
     * guaranteed to be consistent, the version SHOULD be exchanged.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Base StructureDefinition for ContactDetail Type: Specifies contact
   * information for a person or organization.
   */
  export class ContactDetail extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ContactDetail";

    /** The name of an individual to contact. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The contact details for the individual (if a name was provided) or the
     * organization.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * Base StructureDefinition for ContactPoint Type: Details for all kinds of
   * technology mediated contact points for a person or organization, including
   * telephone, email, etc.
   */
  export class ContactPoint extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ContactPoint";

    /** Time period when the contact point was/is in use. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Specifies a preferred order in which to use a set of contacts.
     * ContactPoints with lower rank values are more preferred than those with
     * higher rank values.
     */
    set rank(value: PositiveInt) {
      this._content["rank"] = value;
    }

    get rank(): PositiveInt {
      return this._content["rank"] as PositiveInt;
    }

    /**
     * Telecommunications form for contact point - what communications system is
     * required to make use of the contact.
     */
    set system(value: Code) {
      this._content["system"] = value;
    }

    get system(): Code {
      return this._content["system"] as Code;
    }

    /** Identifies the purpose for the contact point. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }

    /**
     * The actual contact point details, in a form that is meaningful to the
     * designated communication system (i.e. phone number or email address).
     */
    set value(value: String) {
      this._content["value"] = value;
    }

    get value(): String {
      return this._content["value"] as String;
    }
  }

  /**
   * Base StructureDefinition for Contributor Type: A contributor to the content
   * of a knowledge asset, including authors, editors, reviewers, and
   * endorsers.
   */
  export class Contributor extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Contributor";

    /**
     * Contact details to assist a user in finding and communicating with the
     * contributor.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The name of the individual or organization responsible for the
     * contribution.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The type of contributor. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * Base StructureDefinition for Count Type: A measured amount (or an amount
   * that can potentially be measured). Note that measured amounts include
   * amounts that are not precisely quantified, including amounts involving
   * arbitrary units and floating currencies.
   */
  export class Count extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Count";
  }

  /**
   * Base StructureDefinition for DataRequirement Type: Describes a required
   * data item for evaluation in terms of the type of data, and optional code or
   * date-based filters of the data.
   */
  export class DataRequirement extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DataRequirement";

    /**
     * Code filters specify additional constraints on the data, specifying the
     * value set of interest for a particular element of the data. Each code
     * filter defines an additional constraint on the data, i.e. code filters
     * are AND'ed, not OR'ed.
     */
    set codeFilter(value: Array<Element>) {
      this._content["codeFilter"] = value;
    }

    get codeFilter(): Array<Element> {
      return this._content["codeFilter"] as Array<Element>;
    }

    /**
     * Date filters specify additional constraints on the data in terms of the
     * applicable date range for specific elements. Each date filter specifies
     * an additional constraint on the data, i.e. date filters are AND'ed, not
     * OR'ed.
     */
    set dateFilter(value: Array<Element>) {
      this._content["dateFilter"] = value;
    }

    get dateFilter(): Array<Element> {
      return this._content["dateFilter"] as Array<Element>;
    }

    /**
     * Specifies a maximum number of results that are required (uses the _count
     * search parameter).
     */
    set limit(value: PositiveInt) {
      this._content["limit"] = value;
    }

    get limit(): PositiveInt {
      return this._content["limit"] as PositiveInt;
    }

    /**
     * Indicates that specific elements of the type are referenced by the
     * knowledge module and must be supported by the consumer in order to obtain
     * an effective evaluation. This does not mean that a value is required for
     * this element, only that the consuming system must understand the element
     * and be able to provide values for it if they are available.
     *
     * The value of mustSupport SHALL be a FHIRPath resolveable on the type of
     * the DataRequirement. The path SHALL consist only of identifiers, constant
     * indexers, and .resolve() (see the [Simple FHIRPath
     * Profile](fhirpath.html#simple) for full details).
     */
    set mustSupport(value: Array<String>) {
      this._content["mustSupport"] = value;
    }

    get mustSupport(): Array<String> {
      return this._content["mustSupport"] as Array<String>;
    }

    /**
     * The profile of the required data, specified as the uri of the profile
     * definition.
     */
    set profile(value: Array<Canonical>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Canonical> {
      return this._content["profile"] as Array<Canonical>;
    }

    /** Specifies the order of the results to be returned. */
    set sort(value: Array<Element>) {
      this._content["sort"] = value;
    }

    get sort(): Array<Element> {
      return this._content["sort"] as Array<Element>;
    }

    /**
     * The intended subjects of the data requirement. If this element is not
     * provided, a Patient subject is assumed.
     */
    set subject(value: CodeableConcept | Reference) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The type of the required data, specified as the type name of a resource.
     * For profiles, this value is set to the type of the base resource of the
     * profile.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * Base StructureDefinition for Distance Type: A length - a value with a unit
   * that is a physical distance.
   */
  export class Distance extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Distance";
  }

  /**
   * Base StructureDefinition for Dosage Type: Indicates how the medication
   * is/was taken or should be taken by the patient.
   */
  export class Dosage extends BackboneElement {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Dosage";

    /**
     * Supplemental instructions to the patient on how to take the medication
     * (e.g. "with meals" or"take half to one hour before food") or warnings for
     * the patient about the medication (e.g. "may cause drowsiness" or "avoid
     * exposure of skin to direct sunlight or sunlamps").
     */
    set additionalInstruction(value: Array<CodeableConcept>) {
      this._content["additionalInstruction"] = value;
    }

    get additionalInstruction(): Array<CodeableConcept> {
      return this._content["additionalInstruction"] as Array<CodeableConcept>;
    }

    /**
     * Indicates whether the Medication is only taken when needed within a
     * specific dosing schedule (Boolean option), or it indicates the
     * precondition for taking the Medication (CodeableConcept).
     */
    set asNeeded(value: Boolean | CodeableConcept) {
      this._content["asNeeded"] = value;
    }

    get asNeededBoolean(): Boolean {
      return this._content["asNeeded"] as Boolean;
    }

    get asNeededCodeableConcept(): CodeableConcept {
      return this._content["asNeeded"] as CodeableConcept;
    }

    /** The amount of medication administered. */
    set doseAndRate(value: Array<Element>) {
      this._content["doseAndRate"] = value;
    }

    get doseAndRate(): Array<Element> {
      return this._content["doseAndRate"] as Array<Element>;
    }

    /** Upper limit on medication per administration. */
    set maxDosePerAdministration(value: Quantity) {
      this._content["maxDosePerAdministration"] = value;
    }

    get maxDosePerAdministration(): Quantity {
      return this._content["maxDosePerAdministration"] as Quantity;
    }

    /** Upper limit on medication per lifetime of the patient. */
    set maxDosePerLifetime(value: Quantity) {
      this._content["maxDosePerLifetime"] = value;
    }

    get maxDosePerLifetime(): Quantity {
      return this._content["maxDosePerLifetime"] as Quantity;
    }

    /** Upper limit on medication per unit of time. */
    set maxDosePerPeriod(value: Ratio) {
      this._content["maxDosePerPeriod"] = value;
    }

    get maxDosePerPeriod(): Ratio {
      return this._content["maxDosePerPeriod"] as Ratio;
    }

    /** Technique for administering medication. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /** Instructions in terms that are understood by the patient or consumer. */
    set patientInstruction(value: String) {
      this._content["patientInstruction"] = value;
    }

    get patientInstruction(): String {
      return this._content["patientInstruction"] as String;
    }

    /** How drug should enter body. */
    set route(value: CodeableConcept) {
      this._content["route"] = value;
    }

    get route(): CodeableConcept {
      return this._content["route"] as CodeableConcept;
    }

    /**
     * Indicates the order in which the dosage instructions should be applied or
     * interpreted.
     */
    set sequence(value: Integer) {
      this._content["sequence"] = value;
    }

    get sequence(): Integer {
      return this._content["sequence"] as Integer;
    }

    /** Body site to administer to. */
    set site(value: CodeableConcept) {
      this._content["site"] = value;
    }

    get site(): CodeableConcept {
      return this._content["site"] as CodeableConcept;
    }

    /** Free text dosage instructions e.g. SIG. */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /** When medication should be administered. */
    set timing(value: Timing) {
      this._content["timing"] = value;
    }

    get timing(): Timing {
      return this._content["timing"] as Timing;
    }
  }

  /** Base StructureDefinition for Duration Type: A length of time. */
  export class Duration extends Quantity {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Duration";
  }

  /**
   * Base StructureDefinition for ElementDefinition Type: Captures constraints
   * on each element within the resource, profile, or extension.
   */
  export class ElementDefinition extends BackboneElement {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ElementDefinition";

    /** Identifies additional names by which this element might also be known. */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /**
     * Information about the base definition of the element, provided to make it
     * unnecessary for tools to trace the deviation of the element through the
     * derived and related profiles. When the element definition is not the
     * original definition of an element - i.g. either in a constraint on
     * another type, or for elements from a super type in a snap shot - then the
     * information in provided in the element definition may be different to the
     * base definition. On the original definition of the element, it will be
     * same.
     */
    set base(value: Element) {
      this._content["base"] = value;
    }

    get base(): Element {
      return this._content["base"] as Element;
    }

    /**
     * Binds to a value set if this element is coded (code, Coding,
     * CodeableConcept, Quantity), or the data types (string, uri).
     */
    set binding(value: Element) {
      this._content["binding"] = value;
    }

    get binding(): Element {
      return this._content["binding"] as Element;
    }

    /**
     * A code that has the same meaning as the element in a particular
     * terminology.
     */
    set code(value: Array<Coding>) {
      this._content["code"] = value;
    }

    get code(): Array<Coding> {
      return this._content["code"] as Array<Coding>;
    }

    /**
     * Explanatory notes and implementation guidance about the data element,
     * including notes about how to use the data properly, exceptions to proper
     * use, etc. (Note: The text you are reading is specified in
     * ElementDefinition.comment).
     */
    set comment(value: Markdown) {
      this._content["comment"] = value;
    }

    get comment(): Markdown {
      return this._content["comment"] as Markdown;
    }

    /**
     * A reference to an invariant that may make additional statements about the
     * cardinality or value in the instance.
     */
    set condition(value: Array<Id>) {
      this._content["condition"] = value;
    }

    get condition(): Array<Id> {
      return this._content["condition"] as Array<Id>;
    }

    /**
     * Formal constraints such as co-occurrence and other constraints that can
     * be computationally evaluated within the context of the instance.
     */
    set constraint(value: Array<Element>) {
      this._content["constraint"] = value;
    }

    get constraint(): Array<Element> {
      return this._content["constraint"] as Array<Element>;
    }

    /**
     * Identifies an element defined elsewhere in the definition whose content
     * rules should be applied to the current element. ContentReferences bring
     * across all the rules that are in the ElementDefinition for the element,
     * including definitions, cardinality constraints, bindings, invariants
     * etc.
     */
    set contentReference(value: Uri) {
      this._content["contentReference"] = value;
    }

    get contentReference(): Uri {
      return this._content["contentReference"] as Uri;
    }

    /**
     * The value that should be used if there is no value stated in the instance
     * (e.g. 'if not otherwise specified, the abstract is false').
     */
    set defaultValue(
      value:
        | Base64Binary
        | Boolean
        | Canonical
        | Code
        | Date
        | DateTime
        | Decimal
        | Id
        | Instant
        | Integer
        | Markdown
        | Oid
        | PositiveInt
        | String
        | Time
        | UnsignedInt
        | Uri
        | Url
        | Uuid
        | Address
        | Age
        | Annotation
        | Attachment
        | CodeableConcept
        | CodeableReference
        | Coding
        | ContactPoint
        | Count
        | Distance
        | Duration
        | HumanName
        | Identifier
        | Money
        | Period
        | Quantity
        | Range
        | Ratio
        | RatioRange
        | Reference
        | SampledData
        | Signature
        | Timing
        | ContactDetail
        | Contributor
        | DataRequirement
        | Expression
        | ParameterDefinition
        | RelatedArtifact
        | TriggerDefinition
        | UsageContext
        | Dosage,
    ) {
      this._content["defaultValue"] = value;
    }

    get defaultValueBase64Binary(): Base64Binary {
      return this._content["defaultValue"] as Base64Binary;
    }

    get defaultValueBoolean(): Boolean {
      return this._content["defaultValue"] as Boolean;
    }

    get defaultValueCanonical(): Canonical {
      return this._content["defaultValue"] as Canonical;
    }

    get defaultValueCode(): Code {
      return this._content["defaultValue"] as Code;
    }

    get defaultValueDate(): Date {
      return this._content["defaultValue"] as Date;
    }

    get defaultValueDateTime(): DateTime {
      return this._content["defaultValue"] as DateTime;
    }

    get defaultValueDecimal(): Decimal {
      return this._content["defaultValue"] as Decimal;
    }

    get defaultValueId(): Id {
      return this._content["defaultValue"] as Id;
    }

    get defaultValueInstant(): Instant {
      return this._content["defaultValue"] as Instant;
    }

    get defaultValueInteger(): Integer {
      return this._content["defaultValue"] as Integer;
    }

    get defaultValueMarkdown(): Markdown {
      return this._content["defaultValue"] as Markdown;
    }

    get defaultValueOid(): Oid {
      return this._content["defaultValue"] as Oid;
    }

    get defaultValuePositiveInt(): PositiveInt {
      return this._content["defaultValue"] as PositiveInt;
    }

    get defaultValueString(): String {
      return this._content["defaultValue"] as String;
    }

    get defaultValueTime(): Time {
      return this._content["defaultValue"] as Time;
    }

    get defaultValueUnsignedInt(): UnsignedInt {
      return this._content["defaultValue"] as UnsignedInt;
    }

    get defaultValueUri(): Uri {
      return this._content["defaultValue"] as Uri;
    }

    get defaultValueUrl(): Url {
      return this._content["defaultValue"] as Url;
    }

    get defaultValueUuid(): Uuid {
      return this._content["defaultValue"] as Uuid;
    }

    get defaultValueAddress(): Address {
      return this._content["defaultValue"] as Address;
    }

    get defaultValueAge(): Age {
      return this._content["defaultValue"] as Age;
    }

    get defaultValueAnnotation(): Annotation {
      return this._content["defaultValue"] as Annotation;
    }

    get defaultValueAttachment(): Attachment {
      return this._content["defaultValue"] as Attachment;
    }

    get defaultValueCodeableConcept(): CodeableConcept {
      return this._content["defaultValue"] as CodeableConcept;
    }

    get defaultValueCodeableReference(): CodeableReference {
      return this._content["defaultValue"] as CodeableReference;
    }

    get defaultValueCoding(): Coding {
      return this._content["defaultValue"] as Coding;
    }

    get defaultValueContactPoint(): ContactPoint {
      return this._content["defaultValue"] as ContactPoint;
    }

    get defaultValueCount(): Count {
      return this._content["defaultValue"] as Count;
    }

    get defaultValueDistance(): Distance {
      return this._content["defaultValue"] as Distance;
    }

    get defaultValueDuration(): Duration {
      return this._content["defaultValue"] as Duration;
    }

    get defaultValueHumanName(): HumanName {
      return this._content["defaultValue"] as HumanName;
    }

    get defaultValueIdentifier(): Identifier {
      return this._content["defaultValue"] as Identifier;
    }

    get defaultValueMoney(): Money {
      return this._content["defaultValue"] as Money;
    }

    get defaultValuePeriod(): Period {
      return this._content["defaultValue"] as Period;
    }

    get defaultValueQuantity(): Quantity {
      return this._content["defaultValue"] as Quantity;
    }

    get defaultValueRange(): Range {
      return this._content["defaultValue"] as Range;
    }

    get defaultValueRatio(): Ratio {
      return this._content["defaultValue"] as Ratio;
    }

    get defaultValueRatioRange(): RatioRange {
      return this._content["defaultValue"] as RatioRange;
    }

    get defaultValueReference(): Reference {
      return this._content["defaultValue"] as Reference;
    }

    get defaultValueSampledData(): SampledData {
      return this._content["defaultValue"] as SampledData;
    }

    get defaultValueSignature(): Signature {
      return this._content["defaultValue"] as Signature;
    }

    get defaultValueTiming(): Timing {
      return this._content["defaultValue"] as Timing;
    }

    get defaultValueContactDetail(): ContactDetail {
      return this._content["defaultValue"] as ContactDetail;
    }

    get defaultValueContributor(): Contributor {
      return this._content["defaultValue"] as Contributor;
    }

    get defaultValueDataRequirement(): DataRequirement {
      return this._content["defaultValue"] as DataRequirement;
    }

    get defaultValueExpression(): Expression {
      return this._content["defaultValue"] as Expression;
    }

    get defaultValueParameterDefinition(): ParameterDefinition {
      return this._content["defaultValue"] as ParameterDefinition;
    }

    get defaultValueRelatedArtifact(): RelatedArtifact {
      return this._content["defaultValue"] as RelatedArtifact;
    }

    get defaultValueTriggerDefinition(): TriggerDefinition {
      return this._content["defaultValue"] as TriggerDefinition;
    }

    get defaultValueUsageContext(): UsageContext {
      return this._content["defaultValue"] as UsageContext;
    }

    get defaultValueDosage(): Dosage {
      return this._content["defaultValue"] as Dosage;
    }

    /**
     * Provides a complete explanation of the meaning of the data element for
     * human readability. For the case of elements derived from existing
     * elements (e.g. constraints), the definition SHALL be consistent with the
     * base definition, but convey the meaning of the element in the particular
     * context of use of the resource. (Note: The text you are reading is
     * specified in ElementDefinition.definition).
     */
    set definition(value: Markdown) {
      this._content["definition"] = value;
    }

    get definition(): Markdown {
      return this._content["definition"] as Markdown;
    }

    /**
     * A sample value for this element demonstrating the type of information
     * that would typically be found in the element.
     */
    set example(value: Array<Element>) {
      this._content["example"] = value;
    }

    get example(): Array<Element> {
      return this._content["example"] as Array<Element>;
    }

    /**
     * Specifies a value that SHALL be exactly the value for this element in the
     * instance. For purposes of comparison, non-significant whitespace is
     * ignored, and all values must be an exact match (case and accent
     * sensitive). Missing elements/attributes must also be missing.
     */
    set fixed(
      value:
        | Base64Binary
        | Boolean
        | Canonical
        | Code
        | Date
        | DateTime
        | Decimal
        | Id
        | Instant
        | Integer
        | Markdown
        | Oid
        | PositiveInt
        | String
        | Time
        | UnsignedInt
        | Uri
        | Url
        | Uuid
        | Address
        | Age
        | Annotation
        | Attachment
        | CodeableConcept
        | CodeableReference
        | Coding
        | ContactPoint
        | Count
        | Distance
        | Duration
        | HumanName
        | Identifier
        | Money
        | Period
        | Quantity
        | Range
        | Ratio
        | RatioRange
        | Reference
        | SampledData
        | Signature
        | Timing
        | ContactDetail
        | Contributor
        | DataRequirement
        | Expression
        | ParameterDefinition
        | RelatedArtifact
        | TriggerDefinition
        | UsageContext
        | Dosage,
    ) {
      this._content["fixed"] = value;
    }

    get fixedBase64Binary(): Base64Binary {
      return this._content["fixed"] as Base64Binary;
    }

    get fixedBoolean(): Boolean {
      return this._content["fixed"] as Boolean;
    }

    get fixedCanonical(): Canonical {
      return this._content["fixed"] as Canonical;
    }

    get fixedCode(): Code {
      return this._content["fixed"] as Code;
    }

    get fixedDate(): Date {
      return this._content["fixed"] as Date;
    }

    get fixedDateTime(): DateTime {
      return this._content["fixed"] as DateTime;
    }

    get fixedDecimal(): Decimal {
      return this._content["fixed"] as Decimal;
    }

    get fixedId(): Id {
      return this._content["fixed"] as Id;
    }

    get fixedInstant(): Instant {
      return this._content["fixed"] as Instant;
    }

    get fixedInteger(): Integer {
      return this._content["fixed"] as Integer;
    }

    get fixedMarkdown(): Markdown {
      return this._content["fixed"] as Markdown;
    }

    get fixedOid(): Oid {
      return this._content["fixed"] as Oid;
    }

    get fixedPositiveInt(): PositiveInt {
      return this._content["fixed"] as PositiveInt;
    }

    get fixedString(): String {
      return this._content["fixed"] as String;
    }

    get fixedTime(): Time {
      return this._content["fixed"] as Time;
    }

    get fixedUnsignedInt(): UnsignedInt {
      return this._content["fixed"] as UnsignedInt;
    }

    get fixedUri(): Uri {
      return this._content["fixed"] as Uri;
    }

    get fixedUrl(): Url {
      return this._content["fixed"] as Url;
    }

    get fixedUuid(): Uuid {
      return this._content["fixed"] as Uuid;
    }

    get fixedAddress(): Address {
      return this._content["fixed"] as Address;
    }

    get fixedAge(): Age {
      return this._content["fixed"] as Age;
    }

    get fixedAnnotation(): Annotation {
      return this._content["fixed"] as Annotation;
    }

    get fixedAttachment(): Attachment {
      return this._content["fixed"] as Attachment;
    }

    get fixedCodeableConcept(): CodeableConcept {
      return this._content["fixed"] as CodeableConcept;
    }

    get fixedCodeableReference(): CodeableReference {
      return this._content["fixed"] as CodeableReference;
    }

    get fixedCoding(): Coding {
      return this._content["fixed"] as Coding;
    }

    get fixedContactPoint(): ContactPoint {
      return this._content["fixed"] as ContactPoint;
    }

    get fixedCount(): Count {
      return this._content["fixed"] as Count;
    }

    get fixedDistance(): Distance {
      return this._content["fixed"] as Distance;
    }

    get fixedDuration(): Duration {
      return this._content["fixed"] as Duration;
    }

    get fixedHumanName(): HumanName {
      return this._content["fixed"] as HumanName;
    }

    get fixedIdentifier(): Identifier {
      return this._content["fixed"] as Identifier;
    }

    get fixedMoney(): Money {
      return this._content["fixed"] as Money;
    }

    get fixedPeriod(): Period {
      return this._content["fixed"] as Period;
    }

    get fixedQuantity(): Quantity {
      return this._content["fixed"] as Quantity;
    }

    get fixedRange(): Range {
      return this._content["fixed"] as Range;
    }

    get fixedRatio(): Ratio {
      return this._content["fixed"] as Ratio;
    }

    get fixedRatioRange(): RatioRange {
      return this._content["fixed"] as RatioRange;
    }

    get fixedReference(): Reference {
      return this._content["fixed"] as Reference;
    }

    get fixedSampledData(): SampledData {
      return this._content["fixed"] as SampledData;
    }

    get fixedSignature(): Signature {
      return this._content["fixed"] as Signature;
    }

    get fixedTiming(): Timing {
      return this._content["fixed"] as Timing;
    }

    get fixedContactDetail(): ContactDetail {
      return this._content["fixed"] as ContactDetail;
    }

    get fixedContributor(): Contributor {
      return this._content["fixed"] as Contributor;
    }

    get fixedDataRequirement(): DataRequirement {
      return this._content["fixed"] as DataRequirement;
    }

    get fixedExpression(): Expression {
      return this._content["fixed"] as Expression;
    }

    get fixedParameterDefinition(): ParameterDefinition {
      return this._content["fixed"] as ParameterDefinition;
    }

    get fixedRelatedArtifact(): RelatedArtifact {
      return this._content["fixed"] as RelatedArtifact;
    }

    get fixedTriggerDefinition(): TriggerDefinition {
      return this._content["fixed"] as TriggerDefinition;
    }

    get fixedUsageContext(): UsageContext {
      return this._content["fixed"] as UsageContext;
    }

    get fixedDosage(): Dosage {
      return this._content["fixed"] as Dosage;
    }

    /**
     * If true, the value of this element affects the interpretation of the
     * element or resource that contains it, and the value of the element cannot
     * be ignored. Typically, this is used for status, negation and
     * qualification codes. The effect of this is that the element cannot be
     * ignored by systems: they SHALL either recognize the element and process
     * it, and/or a pre-determination has been made that it is not relevant to
     * their particular system.
     */
    set isModifier(value: Boolean) {
      this._content["isModifier"] = value;
    }

    get isModifier(): Boolean {
      return this._content["isModifier"] as Boolean;
    }

    /**
     * Explains how that element affects the interpretation of the resource or
     * element that contains it.
     */
    set isModifierReason(value: String) {
      this._content["isModifierReason"] = value;
    }

    get isModifierReason(): String {
      return this._content["isModifierReason"] as String;
    }

    /**
     * Whether the element should be included if a client requests a search with
     * the parameter _summary=true.
     */
    set isSummary(value: Boolean) {
      this._content["isSummary"] = value;
    }

    get isSummary(): Boolean {
      return this._content["isSummary"] as Boolean;
    }

    /**
     * A single preferred label which is the text to display beside the element
     * indicating its meaning or to use to prompt for the element in a user
     * display or form.
     */
    set label(value: String) {
      this._content["label"] = value;
    }

    get label(): String {
      return this._content["label"] as String;
    }

    /**
     * Identifies a concept from an external specification that roughly
     * corresponds to this element.
     */
    set mapping(value: Array<Element>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<Element> {
      return this._content["mapping"] as Array<Element>;
    }

    /**
     * The maximum number of times this element is permitted to appear in the
     * instance.
     */
    set max(value: String) {
      this._content["max"] = value;
    }

    get max(): String {
      return this._content["max"] as String;
    }

    /**
     * Indicates the maximum length in characters that is permitted to be
     * present in conformant instances and which is expected to be supported by
     * conformant consumers that support the element.
     */
    set maxLength(value: Integer) {
      this._content["maxLength"] = value;
    }

    get maxLength(): Integer {
      return this._content["maxLength"] as Integer;
    }

    /**
     * The maximum allowed value for the element. The value is inclusive. This
     * is allowed for the types date, dateTime, instant, time, decimal, integer,
     * and Quantity.
     */
    set maxValue(
      value:
        | Date
        | DateTime
        | Instant
        | Time
        | Decimal
        | Integer
        | PositiveInt
        | UnsignedInt
        | Quantity,
    ) {
      this._content["maxValue"] = value;
    }

    get maxValueDate(): Date {
      return this._content["maxValue"] as Date;
    }

    get maxValueDateTime(): DateTime {
      return this._content["maxValue"] as DateTime;
    }

    get maxValueInstant(): Instant {
      return this._content["maxValue"] as Instant;
    }

    get maxValueTime(): Time {
      return this._content["maxValue"] as Time;
    }

    get maxValueDecimal(): Decimal {
      return this._content["maxValue"] as Decimal;
    }

    get maxValueInteger(): Integer {
      return this._content["maxValue"] as Integer;
    }

    get maxValuePositiveInt(): PositiveInt {
      return this._content["maxValue"] as PositiveInt;
    }

    get maxValueUnsignedInt(): UnsignedInt {
      return this._content["maxValue"] as UnsignedInt;
    }

    get maxValueQuantity(): Quantity {
      return this._content["maxValue"] as Quantity;
    }

    /**
     * The Implicit meaning that is to be understood when this element is
     * missing (e.g. 'when this element is missing, the period is ongoing').
     */
    set meaningWhenMissing(value: Markdown) {
      this._content["meaningWhenMissing"] = value;
    }

    get meaningWhenMissing(): Markdown {
      return this._content["meaningWhenMissing"] as Markdown;
    }

    /** The minimum number of times this element SHALL appear in the instance. */
    set min(value: UnsignedInt) {
      this._content["min"] = value;
    }

    get min(): UnsignedInt {
      return this._content["min"] as UnsignedInt;
    }

    /**
     * The minimum allowed value for the element. The value is inclusive. This
     * is allowed for the types date, dateTime, instant, time, decimal, integer,
     * and Quantity.
     */
    set minValue(
      value:
        | Date
        | DateTime
        | Instant
        | Time
        | Decimal
        | Integer
        | PositiveInt
        | UnsignedInt
        | Quantity,
    ) {
      this._content["minValue"] = value;
    }

    get minValueDate(): Date {
      return this._content["minValue"] as Date;
    }

    get minValueDateTime(): DateTime {
      return this._content["minValue"] as DateTime;
    }

    get minValueInstant(): Instant {
      return this._content["minValue"] as Instant;
    }

    get minValueTime(): Time {
      return this._content["minValue"] as Time;
    }

    get minValueDecimal(): Decimal {
      return this._content["minValue"] as Decimal;
    }

    get minValueInteger(): Integer {
      return this._content["minValue"] as Integer;
    }

    get minValuePositiveInt(): PositiveInt {
      return this._content["minValue"] as PositiveInt;
    }

    get minValueUnsignedInt(): UnsignedInt {
      return this._content["minValue"] as UnsignedInt;
    }

    get minValueQuantity(): Quantity {
      return this._content["minValue"] as Quantity;
    }

    /**
     * If true, implementations that produce or consume resources SHALL provide
     * "support" for the element in some meaningful way. If false, the element
     * may be ignored and not supported. If false, whether to populate or use
     * the data element in any way is at the discretion of the implementation.
     */
    set mustSupport(value: Boolean) {
      this._content["mustSupport"] = value;
    }

    get mustSupport(): Boolean {
      return this._content["mustSupport"] as Boolean;
    }

    /**
     * If present, indicates that the order of the repeating element has meaning
     * and describes what that meaning is. If absent, it means that the order of
     * the element has no meaning.
     */
    set orderMeaning(value: String) {
      this._content["orderMeaning"] = value;
    }

    get orderMeaning(): String {
      return this._content["orderMeaning"] as String;
    }

    /**
     * The path identifies the element and is expressed as a "."-separated list
     * of ancestor elements, beginning with the name of the resource or
     * extension.
     */
    set path(value: String) {
      this._content["path"] = value;
    }

    get path(): String {
      return this._content["path"] as String;
    }

    /**
     * Specifies a value that the value in the instance SHALL follow - that is,
     * any value in the pattern must be found in the instance. Other additional
     * values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value
     * provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element
     * provided in the pattern[x] array must (recursively) match at least one
     * element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each
     * property in the pattern must be present in the complex object, and its
     * value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    set pattern(
      value:
        | Base64Binary
        | Boolean
        | Canonical
        | Code
        | Date
        | DateTime
        | Decimal
        | Id
        | Instant
        | Integer
        | Markdown
        | Oid
        | PositiveInt
        | String
        | Time
        | UnsignedInt
        | Uri
        | Url
        | Uuid
        | Address
        | Age
        | Annotation
        | Attachment
        | CodeableConcept
        | CodeableReference
        | Coding
        | ContactPoint
        | Count
        | Distance
        | Duration
        | HumanName
        | Identifier
        | Money
        | Period
        | Quantity
        | Range
        | Ratio
        | RatioRange
        | Reference
        | SampledData
        | Signature
        | Timing
        | ContactDetail
        | Contributor
        | DataRequirement
        | Expression
        | ParameterDefinition
        | RelatedArtifact
        | TriggerDefinition
        | UsageContext
        | Dosage,
    ) {
      this._content["pattern"] = value;
    }

    get patternBase64Binary(): Base64Binary {
      return this._content["pattern"] as Base64Binary;
    }

    get patternBoolean(): Boolean {
      return this._content["pattern"] as Boolean;
    }

    get patternCanonical(): Canonical {
      return this._content["pattern"] as Canonical;
    }

    get patternCode(): Code {
      return this._content["pattern"] as Code;
    }

    get patternDate(): Date {
      return this._content["pattern"] as Date;
    }

    get patternDateTime(): DateTime {
      return this._content["pattern"] as DateTime;
    }

    get patternDecimal(): Decimal {
      return this._content["pattern"] as Decimal;
    }

    get patternId(): Id {
      return this._content["pattern"] as Id;
    }

    get patternInstant(): Instant {
      return this._content["pattern"] as Instant;
    }

    get patternInteger(): Integer {
      return this._content["pattern"] as Integer;
    }

    get patternMarkdown(): Markdown {
      return this._content["pattern"] as Markdown;
    }

    get patternOid(): Oid {
      return this._content["pattern"] as Oid;
    }

    get patternPositiveInt(): PositiveInt {
      return this._content["pattern"] as PositiveInt;
    }

    get patternString(): String {
      return this._content["pattern"] as String;
    }

    get patternTime(): Time {
      return this._content["pattern"] as Time;
    }

    get patternUnsignedInt(): UnsignedInt {
      return this._content["pattern"] as UnsignedInt;
    }

    get patternUri(): Uri {
      return this._content["pattern"] as Uri;
    }

    get patternUrl(): Url {
      return this._content["pattern"] as Url;
    }

    get patternUuid(): Uuid {
      return this._content["pattern"] as Uuid;
    }

    get patternAddress(): Address {
      return this._content["pattern"] as Address;
    }

    get patternAge(): Age {
      return this._content["pattern"] as Age;
    }

    get patternAnnotation(): Annotation {
      return this._content["pattern"] as Annotation;
    }

    get patternAttachment(): Attachment {
      return this._content["pattern"] as Attachment;
    }

    get patternCodeableConcept(): CodeableConcept {
      return this._content["pattern"] as CodeableConcept;
    }

    get patternCodeableReference(): CodeableReference {
      return this._content["pattern"] as CodeableReference;
    }

    get patternCoding(): Coding {
      return this._content["pattern"] as Coding;
    }

    get patternContactPoint(): ContactPoint {
      return this._content["pattern"] as ContactPoint;
    }

    get patternCount(): Count {
      return this._content["pattern"] as Count;
    }

    get patternDistance(): Distance {
      return this._content["pattern"] as Distance;
    }

    get patternDuration(): Duration {
      return this._content["pattern"] as Duration;
    }

    get patternHumanName(): HumanName {
      return this._content["pattern"] as HumanName;
    }

    get patternIdentifier(): Identifier {
      return this._content["pattern"] as Identifier;
    }

    get patternMoney(): Money {
      return this._content["pattern"] as Money;
    }

    get patternPeriod(): Period {
      return this._content["pattern"] as Period;
    }

    get patternQuantity(): Quantity {
      return this._content["pattern"] as Quantity;
    }

    get patternRange(): Range {
      return this._content["pattern"] as Range;
    }

    get patternRatio(): Ratio {
      return this._content["pattern"] as Ratio;
    }

    get patternRatioRange(): RatioRange {
      return this._content["pattern"] as RatioRange;
    }

    get patternReference(): Reference {
      return this._content["pattern"] as Reference;
    }

    get patternSampledData(): SampledData {
      return this._content["pattern"] as SampledData;
    }

    get patternSignature(): Signature {
      return this._content["pattern"] as Signature;
    }

    get patternTiming(): Timing {
      return this._content["pattern"] as Timing;
    }

    get patternContactDetail(): ContactDetail {
      return this._content["pattern"] as ContactDetail;
    }

    get patternContributor(): Contributor {
      return this._content["pattern"] as Contributor;
    }

    get patternDataRequirement(): DataRequirement {
      return this._content["pattern"] as DataRequirement;
    }

    get patternExpression(): Expression {
      return this._content["pattern"] as Expression;
    }

    get patternParameterDefinition(): ParameterDefinition {
      return this._content["pattern"] as ParameterDefinition;
    }

    get patternRelatedArtifact(): RelatedArtifact {
      return this._content["pattern"] as RelatedArtifact;
    }

    get patternTriggerDefinition(): TriggerDefinition {
      return this._content["pattern"] as TriggerDefinition;
    }

    get patternUsageContext(): UsageContext {
      return this._content["pattern"] as UsageContext;
    }

    get patternDosage(): Dosage {
      return this._content["pattern"] as Dosage;
    }

    /**
     * Codes that define how this element is represented in instances, when the
     * deviation varies from the normal case.
     */
    set representation(value: Array<Code>) {
      this._content["representation"] = value;
    }

    get representation(): Array<Code> {
      return this._content["representation"] as Array<Code>;
    }

    /**
     * This element is for traceability of why the element was created and why
     * the constraints exist as they do. This may be used to point to source
     * materials or specifications that drove the structure of this element.
     */
    set requirements(value: Markdown) {
      this._content["requirements"] = value;
    }

    get requirements(): Markdown {
      return this._content["requirements"] as Markdown;
    }

    /**
     * A concise description of what this element means (e.g. for use in
     * autogenerated summaries).
     */
    set short(value: String) {
      this._content["short"] = value;
    }

    get short(): String {
      return this._content["short"] as String;
    }

    /**
     * If true, indicates that this slice definition is constraining a slice
     * definition with the same name in an inherited profile. If false, the
     * slice is not overriding any slice in an inherited profile. If missing,
     * the slice might or might not be overriding a slice in an inherited
     * profile, depending on the sliceName.
     */
    set sliceIsConstraining(value: Boolean) {
      this._content["sliceIsConstraining"] = value;
    }

    get sliceIsConstraining(): Boolean {
      return this._content["sliceIsConstraining"] as Boolean;
    }

    /**
     * The name of this element definition slice, when slicing is working. The
     * name must be a token with no dots or spaces. This is a unique name
     * referring to a specific set of constraints applied to this element, used
     * to provide a name to different slices of the same element.
     */
    set sliceName(value: String) {
      this._content["sliceName"] = value;
    }

    get sliceName(): String {
      return this._content["sliceName"] as String;
    }

    /**
     * Indicates that the element is sliced into a set of alternative
     * definitions (i.e. in a structure definition, there are multiple different
     * constraints on a single element in the base resource). Slicing can be
     * used in any resource that has cardinality ..* on the base resource, or
     * any resource with a choice of types. The set of slices is any elements
     * that come after this in the element sequence that have the same path,
     * until a shorter path occurs (the shorter path terminates the set).
     */
    set slicing(value: Element) {
      this._content["slicing"] = value;
    }

    get slicing(): Element {
      return this._content["slicing"] as Element;
    }

    /**
     * The data type or resource that the value of this element is permitted to
     * be.
     */
    set type(value: Array<Element>) {
      this._content["type"] = value;
    }

    get type(): Array<Element> {
      return this._content["type"] as Array<Element>;
    }
  }

  /**
   * Base StructureDefinition for Expression Type: A expression that is
   * evaluated in a specified context and returns a value. The context of use of
   * the expression must specify the context in which the expression is
   * evaluated, and how the result of the expression is used.
   */
  export class Expression extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Expression";

    /**
     * A brief, natural language description of the condition that effectively
     * communicates the intended semantics.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** An expression in the specified language that returns a value. */
    set expression(value: String) {
      this._content["expression"] = value;
    }

    get expression(): String {
      return this._content["expression"] as String;
    }

    /** The media type of the language for the expression. */
    set language(value: Code) {
      this._content["language"] = value;
    }

    get language(): Code {
      return this._content["language"] as Code;
    }

    /**
     * A short name assigned to the expression to allow for multiple reuse of
     * the expression in the context where it is defined.
     */
    set name(value: Id) {
      this._content["name"] = value;
    }

    get name(): Id {
      return this._content["name"] as Id;
    }

    /** A URI that defines where the expression is found. */
    set reference(value: Uri) {
      this._content["reference"] = value;
    }

    get reference(): Uri {
      return this._content["reference"] as Uri;
    }
  }

  /**
   * Base StructureDefinition for Extension Type: Optional Extension Element -
   * found in all resources.
   */
  export class Extension extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Extension";

    /**
     * Source of the definition for the extension code - a logical name or a
     * URL.
     */
    set url(value: string) {
      this._content["url"] = value;
    }

    get url(): string {
      return this._content["url"] as string;
    }

    /**
     * Value of extension - must be one of a constrained set of the data types
     * (see [Extensibility](extensibility.html) for a list).
     */
    set value(
      value:
        | Base64Binary
        | Boolean
        | Canonical
        | Code
        | Date
        | DateTime
        | Decimal
        | Id
        | Instant
        | Integer
        | Markdown
        | Oid
        | PositiveInt
        | String
        | Time
        | UnsignedInt
        | Uri
        | Url
        | Uuid
        | Address
        | Age
        | Annotation
        | Attachment
        | CodeableConcept
        | CodeableReference
        | Coding
        | ContactPoint
        | Count
        | Distance
        | Duration
        | HumanName
        | Identifier
        | Money
        | Period
        | Quantity
        | Range
        | Ratio
        | RatioRange
        | Reference
        | SampledData
        | Signature
        | Timing
        | ContactDetail
        | Contributor
        | DataRequirement
        | Expression
        | ParameterDefinition
        | RelatedArtifact
        | TriggerDefinition
        | UsageContext
        | Dosage,
    ) {
      this._content["value"] = value;
    }

    get valueBase64Binary(): Base64Binary {
      return this._content["value"] as Base64Binary;
    }

    get valueBoolean(): Boolean {
      return this._content["value"] as Boolean;
    }

    get valueCanonical(): Canonical {
      return this._content["value"] as Canonical;
    }

    get valueCode(): Code {
      return this._content["value"] as Code;
    }

    get valueDate(): Date {
      return this._content["value"] as Date;
    }

    get valueDateTime(): DateTime {
      return this._content["value"] as DateTime;
    }

    get valueDecimal(): Decimal {
      return this._content["value"] as Decimal;
    }

    get valueId(): Id {
      return this._content["value"] as Id;
    }

    get valueInstant(): Instant {
      return this._content["value"] as Instant;
    }

    get valueInteger(): Integer {
      return this._content["value"] as Integer;
    }

    get valueMarkdown(): Markdown {
      return this._content["value"] as Markdown;
    }

    get valueOid(): Oid {
      return this._content["value"] as Oid;
    }

    get valuePositiveInt(): PositiveInt {
      return this._content["value"] as PositiveInt;
    }

    get valueString(): String {
      return this._content["value"] as String;
    }

    get valueTime(): Time {
      return this._content["value"] as Time;
    }

    get valueUnsignedInt(): UnsignedInt {
      return this._content["value"] as UnsignedInt;
    }

    get valueUri(): Uri {
      return this._content["value"] as Uri;
    }

    get valueUrl(): Url {
      return this._content["value"] as Url;
    }

    get valueUuid(): Uuid {
      return this._content["value"] as Uuid;
    }

    get valueAddress(): Address {
      return this._content["value"] as Address;
    }

    get valueAge(): Age {
      return this._content["value"] as Age;
    }

    get valueAnnotation(): Annotation {
      return this._content["value"] as Annotation;
    }

    get valueAttachment(): Attachment {
      return this._content["value"] as Attachment;
    }

    get valueCodeableConcept(): CodeableConcept {
      return this._content["value"] as CodeableConcept;
    }

    get valueCodeableReference(): CodeableReference {
      return this._content["value"] as CodeableReference;
    }

    get valueCoding(): Coding {
      return this._content["value"] as Coding;
    }

    get valueContactPoint(): ContactPoint {
      return this._content["value"] as ContactPoint;
    }

    get valueCount(): Count {
      return this._content["value"] as Count;
    }

    get valueDistance(): Distance {
      return this._content["value"] as Distance;
    }

    get valueDuration(): Duration {
      return this._content["value"] as Duration;
    }

    get valueHumanName(): HumanName {
      return this._content["value"] as HumanName;
    }

    get valueIdentifier(): Identifier {
      return this._content["value"] as Identifier;
    }

    get valueMoney(): Money {
      return this._content["value"] as Money;
    }

    get valuePeriod(): Period {
      return this._content["value"] as Period;
    }

    get valueQuantity(): Quantity {
      return this._content["value"] as Quantity;
    }

    get valueRange(): Range {
      return this._content["value"] as Range;
    }

    get valueRatio(): Ratio {
      return this._content["value"] as Ratio;
    }

    get valueRatioRange(): RatioRange {
      return this._content["value"] as RatioRange;
    }

    get valueReference(): Reference {
      return this._content["value"] as Reference;
    }

    get valueSampledData(): SampledData {
      return this._content["value"] as SampledData;
    }

    get valueSignature(): Signature {
      return this._content["value"] as Signature;
    }

    get valueTiming(): Timing {
      return this._content["value"] as Timing;
    }

    get valueContactDetail(): ContactDetail {
      return this._content["value"] as ContactDetail;
    }

    get valueContributor(): Contributor {
      return this._content["value"] as Contributor;
    }

    get valueDataRequirement(): DataRequirement {
      return this._content["value"] as DataRequirement;
    }

    get valueExpression(): Expression {
      return this._content["value"] as Expression;
    }

    get valueParameterDefinition(): ParameterDefinition {
      return this._content["value"] as ParameterDefinition;
    }

    get valueRelatedArtifact(): RelatedArtifact {
      return this._content["value"] as RelatedArtifact;
    }

    get valueTriggerDefinition(): TriggerDefinition {
      return this._content["value"] as TriggerDefinition;
    }

    get valueUsageContext(): UsageContext {
      return this._content["value"] as UsageContext;
    }

    get valueDosage(): Dosage {
      return this._content["value"] as Dosage;
    }
  }

  /**
   * Base StructureDefinition for HumanName Type: A human's name with the
   * ability to identify parts and usage.
   */
  export class HumanName extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/HumanName";

    /**
     * The part of a name that links to the genealogy. In some cultures (e.g.
     * Eritrea) the family name of a son is the first name of his father.
     */
    set family(value: String) {
      this._content["family"] = value;
    }

    get family(): String {
      return this._content["family"] as String;
    }

    /** Given name. */
    set given(value: Array<String>) {
      this._content["given"] = value;
    }

    get given(): Array<String> {
      return this._content["given"] as Array<String>;
    }

    /**
     * Indicates the period of time when this name was valid for the named
     * person.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Part of the name that is acquired as a title due to academic, legal,
     * employment or nobility status, etc. and that appears at the start of the
     * name.
     */
    set prefix(value: Array<String>) {
      this._content["prefix"] = value;
    }

    get prefix(): Array<String> {
      return this._content["prefix"] as Array<String>;
    }

    /**
     * Part of the name that is acquired as a title due to academic, legal,
     * employment or nobility status, etc. and that appears at the end of the
     * name.
     */
    set suffix(value: Array<String>) {
      this._content["suffix"] = value;
    }

    get suffix(): Array<String> {
      return this._content["suffix"] as Array<String>;
    }

    /**
     * Specifies the entire name as it should be displayed e.g. on an
     * application UI. This may be provided instead of or as well as the
     * specific parts.
     */
    set text(value: String) {
      this._content["text"] = value;
    }

    get text(): String {
      return this._content["text"] as String;
    }

    /** Identifies the purpose for this name. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /**
   * Base StructureDefinition for Identifier Type: An identifier - identifies
   * some entity uniquely and unambiguously. Typically this is used for business
   * identifiers.
   */
  export class Identifier extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Identifier";

    /** Organization that issued/manages the identifier. */
    set assigner(value: Reference) {
      this._content["assigner"] = value;
    }

    get assigner(): Reference {
      return this._content["assigner"] as Reference;
    }

    /** Time period during which identifier is/was valid for use. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Establishes the namespace for the value - that is, a URL that describes a
     * set values that are unique.
     */
    set system(value: Uri) {
      this._content["system"] = value;
    }

    get system(): Uri {
      return this._content["system"] as Uri;
    }

    /**
     * A coded type for the identifier that can be used to determine which
     * identifier to use for a specific purpose.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** The purpose of this identifier. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }

    /**
     * The portion of the identifier typically relevant to the user and which is
     * unique within the context of the system.
     */
    set value(value: String) {
      this._content["value"] = value;
    }

    get value(): String {
      return this._content["value"] as String;
    }
  }

  /**
   * Base StructureDefinition for MarketingStatus Type: The marketing status
   * describes the date when a medicinal product is actually put on the market
   * or the date as of which it is no longer available.
   */
  export class MarketingStatus extends BackboneElement {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MarketingStatus";

    /**
     * The country in which the marketing authorisation has been granted shall
     * be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code
     * elements.
     */
    set country(value: CodeableConcept) {
      this._content["country"] = value;
    }

    get country(): CodeableConcept {
      return this._content["country"] as CodeableConcept;
    }

    /**
     * The date when the Medicinal Product is placed on the market by the
     * Marketing Authorisation Holder (or where applicable, the
     * manufacturer/distributor) in a country and/or jurisdiction shall be
     * provided A complete date consisting of day, month and year shall be
     * specified using the ISO 8601 date format NOTE “Placed on the market”
     * refers to the release of the Medicinal Product into the distribution
     * chain.
     */
    set dateRange(value: Period) {
      this._content["dateRange"] = value;
    }

    get dateRange(): Period {
      return this._content["dateRange"] as Period;
    }

    /**
     * Where a Medicines Regulatory Agency has granted a marketing authorisation
     * for which specific provisions within a jurisdiction apply, the
     * jurisdiction can be specified using an appropriate controlled terminology
     * The controlled term and the controlled term identifier shall be
     * specified.
     */
    set jurisdiction(value: CodeableConcept) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): CodeableConcept {
      return this._content["jurisdiction"] as CodeableConcept;
    }

    /**
     * The date when the Medicinal Product is placed on the market by the
     * Marketing Authorisation Holder (or where applicable, the
     * manufacturer/distributor) in a country and/or jurisdiction shall be
     * provided A complete date consisting of day, month and year shall be
     * specified using the ISO 8601 date format NOTE “Placed on the market”
     * refers to the release of the Medicinal Product into the distribution
     * chain.
     */
    set restoreDate(value: DateTime) {
      this._content["restoreDate"] = value;
    }

    get restoreDate(): DateTime {
      return this._content["restoreDate"] as DateTime;
    }

    /**
     * This attribute provides information on the status of the marketing of the
     * medicinal product See ISO/TS 20443 for more information and examples.
     */
    set status(value: CodeableConcept) {
      this._content["status"] = value;
    }

    get status(): CodeableConcept {
      return this._content["status"] as CodeableConcept;
    }
  }

  /**
   * Base StructureDefinition for Meta Type: The metadata about a resource. This
   * is content in the resource that is maintained by the infrastructure.
   * Changes to the content might not always be associated with version changes
   * to the resource.
   */
  export class Meta extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Meta";

    /** When the resource last changed - e.g. when the version changed. */
    set lastUpdated(value: Instant) {
      this._content["lastUpdated"] = value;
    }

    get lastUpdated(): Instant {
      return this._content["lastUpdated"] as Instant;
    }

    /**
     * A list of profiles (references to
     * [StructureDefinition](structuredefinition.html#) resources) that this
     * resource claims to conform to. The URL is a reference to
     * [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).
     */
    set profile(value: Array<Canonical>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Canonical> {
      return this._content["profile"] as Array<Canonical>;
    }

    /**
     * Security labels applied to this resource. These tags connect specific
     * resources to the overall security policy and infrastructure.
     */
    set security(value: Array<Coding>) {
      this._content["security"] = value;
    }

    get security(): Array<Coding> {
      return this._content["security"] as Array<Coding>;
    }

    /**
     * A uri that identifies the source system of the resource. This provides a
     * minimal amount of [Provenance](provenance.html#) information that can be
     * used to track or differentiate the source of information in the resource.
     * The source may identify another FHIR server, document, message, database,
     * etc.
     */
    set source(value: Uri) {
      this._content["source"] = value;
    }

    get source(): Uri {
      return this._content["source"] as Uri;
    }

    /**
     * Tags applied to this resource. Tags are intended to be used to identify
     * and relate resources to process and workflow, and applications are not
     * required to consider the tags when interpreting the meaning of a
     * resource.
     */
    set tag(value: Array<Coding>) {
      this._content["tag"] = value;
    }

    get tag(): Array<Coding> {
      return this._content["tag"] as Array<Coding>;
    }

    /**
     * The version specific identifier, as it appears in the version portion of
     * the URL. This value changes when the resource is created, updated, or
     * deleted.
     */
    set versionId(value: Id) {
      this._content["versionId"] = value;
    }

    get versionId(): Id {
      return this._content["versionId"] as Id;
    }
  }

  /**
   * Base StructureDefinition for Money Type: An amount of economic utility in
   * some recognized currency.
   */
  export class Money extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Money";

    /** ISO 4217 Currency Code. */
    set currency(value: Code) {
      this._content["currency"] = value;
    }

    get currency(): Code {
      return this._content["currency"] as Code;
    }

    /** Numerical value (with implicit precision). */
    set value(value: Decimal) {
      this._content["value"] = value;
    }

    get value(): Decimal {
      return this._content["value"] as Decimal;
    }
  }

  /**
   * Base StructureDefinition for Narrative Type: A human-readable summary of
   * the resource conveying the essential clinical and business information for
   * the resource.
   */
  export class Narrative extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Narrative";

    /** The actual narrative content, a stripped down version of XHTML. */
    set div(value: Xhtml) {
      this._content["div"] = value;
    }

    get div(): Xhtml {
      return this._content["div"] as Xhtml;
    }

    /**
     * The status of the narrative - whether it's entirely generated (from just
     * the defined data or the extensions too), or whether a human authored it
     * and it may contain additional data.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * Base StructureDefinition for ParameterDefinition Type: The parameters to
   * the module. This collection specifies both the input and output parameters.
   * Input parameters are provided by the caller as part of the $evaluate
   * operation. Output parameters are included in the GuidanceResponse.
   */
  export class ParameterDefinition extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ParameterDefinition";

    /**
     * A brief discussion of what the parameter is for and how it is used by the
     * module.
     */
    set documentation(value: String) {
      this._content["documentation"] = value;
    }

    get documentation(): String {
      return this._content["documentation"] as String;
    }

    /**
     * The maximum number of times this element is permitted to appear in the
     * request or response.
     */
    set max(value: String) {
      this._content["max"] = value;
    }

    get max(): String {
      return this._content["max"] as String;
    }

    /**
     * The minimum number of times this parameter SHALL appear in the request or
     * response.
     */
    set min(value: Integer) {
      this._content["min"] = value;
    }

    get min(): Integer {
      return this._content["min"] as Integer;
    }

    /**
     * The name of the parameter used to allow access to the value of the
     * parameter in evaluation contexts.
     */
    set name(value: Code) {
      this._content["name"] = value;
    }

    get name(): Code {
      return this._content["name"] as Code;
    }

    /**
     * If specified, this indicates a profile that the input data must conform
     * to, or that the output data will conform to.
     */
    set profile(value: Canonical) {
      this._content["profile"] = value;
    }

    get profile(): Canonical {
      return this._content["profile"] as Canonical;
    }

    /** The type of the parameter. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** Whether the parameter is input or output for the module. */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /**
   * Base StructureDefinition for Period Type: A time period defined by a start
   * and end date and optionally time.
   */
  export class Period extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Period";

    /**
     * The end of the period. If the end of the period is missing, it means no
     * end was known or planned at the time the instance was created. The start
     * may be in the past, and the end date in the future, which means that
     * period is expected/planned to end at that time.
     */
    set end(value: DateTime) {
      this._content["end"] = value;
    }

    get end(): DateTime {
      return this._content["end"] as DateTime;
    }

    /** The start of the period. The boundary is inclusive. */
    set start(value: DateTime) {
      this._content["start"] = value;
    }

    get start(): DateTime {
      return this._content["start"] as DateTime;
    }
  }

  /**
   * Base StructureDefinition for Population Type: A populatioof people with
   * some set of grouping criteria.
   */
  export class Population extends BackboneElement {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Population";

    /** The age of the specific population. */
    set age(value: Range | CodeableConcept) {
      this._content["age"] = value;
    }

    get ageRange(): Range {
      return this._content["age"] as Range;
    }

    get ageCodeableConcept(): CodeableConcept {
      return this._content["age"] as CodeableConcept;
    }

    /** The gender of the specific population. */
    set gender(value: CodeableConcept) {
      this._content["gender"] = value;
    }

    get gender(): CodeableConcept {
      return this._content["gender"] as CodeableConcept;
    }

    /**
     * The existing physiological conditions of the specific population to which
     * this applies.
     */
    set physiologicalCondition(value: CodeableConcept) {
      this._content["physiologicalCondition"] = value;
    }

    get physiologicalCondition(): CodeableConcept {
      return this._content["physiologicalCondition"] as CodeableConcept;
    }

    /** Race of the specific population. */
    set race(value: CodeableConcept) {
      this._content["race"] = value;
    }

    get race(): CodeableConcept {
      return this._content["race"] as CodeableConcept;
    }
  }

  /**
   * Base StructureDefinition for ProdCharacteristic Type: The marketing status
   * describes the date when a medicinal product is actually put on the market
   * or the date as of which it is no longer available.
   */
  export class ProdCharacteristic extends BackboneElement {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProdCharacteristic";

    /**
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used.
     */
    set color(value: Array<String>) {
      this._content["color"] = value;
    }

    get color(): Array<String> {
      return this._content["color"] as Array<String>;
    }

    /**
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and
     * the symbol identifier shall be used.
     */
    set depth(value: Quantity) {
      this._content["depth"] = value;
    }

    get depth(): Quantity {
      return this._content["depth"] as Quantity;
    }

    /**
     * Where applicable, the external diameter can be specified using a
     * numerical value and its unit of measurement The unit of measurement shall
     * be specified in accordance with ISO 11240 and the resulting terminology
     * The symbol and the symbol identifier shall be used.
     */
    set externalDiameter(value: Quantity) {
      this._content["externalDiameter"] = value;
    }

    get externalDiameter(): Quantity {
      return this._content["externalDiameter"] as Quantity;
    }

    /**
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and
     * the symbol identifier shall be used.
     */
    set height(value: Quantity) {
      this._content["height"] = value;
    }

    get height(): Quantity {
      return this._content["height"] as Quantity;
    }

    /**
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations.
     */
    set image(value: Array<Attachment>) {
      this._content["image"] = value;
    }

    get image(): Array<Attachment> {
      return this._content["image"] as Array<Attachment>;
    }

    /** Where applicable, the imprint can be specified as text. */
    set imprint(value: Array<String>) {
      this._content["imprint"] = value;
    }

    get imprint(): Array<String> {
      return this._content["imprint"] as Array<String>;
    }

    /**
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used.
     */
    set nominalVolume(value: Quantity) {
      this._content["nominalVolume"] = value;
    }

    get nominalVolume(): Quantity {
      return this._content["nominalVolume"] as Quantity;
    }

    /**
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used.
     */
    set scoring(value: CodeableConcept) {
      this._content["scoring"] = value;
    }

    get scoring(): CodeableConcept {
      return this._content["scoring"] as CodeableConcept;
    }

    /**
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used.
     */
    set shape(value: String) {
      this._content["shape"] = value;
    }

    get shape(): String {
      return this._content["shape"] as String;
    }

    /**
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and
     * the symbol identifier shall be used.
     */
    set weight(value: Quantity) {
      this._content["weight"] = value;
    }

    get weight(): Quantity {
      return this._content["weight"] as Quantity;
    }

    /**
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and
     * the symbol identifier shall be used.
     */
    set width(value: Quantity) {
      this._content["width"] = value;
    }

    get width(): Quantity {
      return this._content["width"] as Quantity;
    }
  }

  /**
   * Base StructureDefinition for ProductShelfLife Type: The shelf-life and
   * storage information for a medicinal product item or container can be
   * described using this class.
   */
  export class ProductShelfLife extends BackboneElement {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ProductShelfLife";

    /** Unique identifier for the packaged Medicinal Product. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * The shelf life time period can be specified using a numerical value for
     * the period of time and its unit of time measurement The unit of
     * measurement shall be specified in accordance with ISO 11240 and the
     * resulting terminology The symbol and the symbol identifier shall be
     * used.
     */
    set period(value: Quantity) {
      this._content["period"] = value;
    }

    get period(): Quantity {
      return this._content["period"] as Quantity;
    }

    /**
     * Special precautions for storage, if any, can be specified using an
     * appropriate controlled vocabulary The controlled term and the controlled
     * term identifier shall be specified.
     */
    set specialPrecautionsForStorage(value: Array<CodeableConcept>) {
      this._content["specialPrecautionsForStorage"] = value;
    }

    get specialPrecautionsForStorage(): Array<CodeableConcept> {
      return this._content[
        "specialPrecautionsForStorage"
      ] as Array<CodeableConcept>;
    }

    /**
     * This describes the shelf life, taking into account various scenarios such
     * as shelf life of the packaged Medicinal Product itself, shelf life after
     * transformation where necessary and shelf life after the first opening of
     * a bottle, etc. The shelf life type shall be specified using an
     * appropriate controlled vocabulary The controlled term and the controlled
     * term identifier shall be specified.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * Base StructureDefinition for Range Type: A set of ordered Quantities
   * defined by a low and high limit.
   */
  export class Range extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Range";

    /** The high limit. The boundary is inclusive. */
    set high(value: Quantity) {
      this._content["high"] = value;
    }

    get high(): Quantity {
      return this._content["high"] as Quantity;
    }

    /** The low limit. The boundary is inclusive. */
    set low(value: Quantity) {
      this._content["low"] = value;
    }

    get low(): Quantity {
      return this._content["low"] as Quantity;
    }
  }

  /**
   * Base StructureDefinition for Ratio Type: A relationship of two Quantity
   * values - expressed as a numerator and a denominator.
   */
  export class Ratio extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Ratio";

    /** The value of the denominator. */
    set denominator(value: Quantity) {
      this._content["denominator"] = value;
    }

    get denominator(): Quantity {
      return this._content["denominator"] as Quantity;
    }

    /** The value of the numerator. */
    set numerator(value: Quantity) {
      this._content["numerator"] = value;
    }

    get numerator(): Quantity {
      return this._content["numerator"] as Quantity;
    }
  }

  /**
   * Base StructureDefinition for RatioRange Type: A range of ratios expressed
   * as a low and high numerator and a denominator.
   */
  export class RatioRange extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/RatioRange";

    /** The value of the denominator. */
    set denominator(value: Quantity) {
      this._content["denominator"] = value;
    }

    get denominator(): Quantity {
      return this._content["denominator"] as Quantity;
    }

    /** The value of the high limit numerator. */
    set highNumerator(value: Quantity) {
      this._content["highNumerator"] = value;
    }

    get highNumerator(): Quantity {
      return this._content["highNumerator"] as Quantity;
    }

    /** The value of the low limit numerator. */
    set lowNumerator(value: Quantity) {
      this._content["lowNumerator"] = value;
    }

    get lowNumerator(): Quantity {
      return this._content["lowNumerator"] as Quantity;
    }
  }

  /**
   * Base StructureDefinition for Reference Type: A reference from one resource
   * to another.
   */
  export class Reference extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Reference";

    /**
     * Plain text narrative that identifies the resource in addition to the
     * resource reference.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /**
     * An identifier for the target resource. This is used when there is no way
     * to reference the other resource directly, either because the entity it
     * represents is not available through a FHIR server, or because there is no
     * way for the author of the resource to convert a known identifier to an
     * actual location. There is no requirement that a Reference.identifier
     * point to something that is actually exposed as a FHIR instance, but it
     * SHALL point to a business concept that would be expected to be exposed as
     * a FHIR instance, and that instance would need to be of a FHIR resource
     * type allowed by the reference.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A reference to a location at which the other resource is found. The
     * reference may be a relative reference, in which case it is relative to
     * the service base URL, or an absolute URL that resolves to the location
     * where the resource is found. The reference may be version specific or
     * not. If the reference is not to a FHIR RESTful server, then it should be
     * assumed to be version specific. Internal fragment references (start with
     * '#') refer to contained resources.
     */
    set reference(value: String) {
      this._content["reference"] = value;
    }

    get reference(): String {
      return this._content["reference"] as String;
    }

    /**
     * The expected type of the target of the reference. If both Reference.type
     * and Reference.reference are populated and Reference.reference is a FHIR
     * URL, both SHALL be consistent.
     *
     * The type is the Canonical URL of Resource Definition that is the type
     * this reference refers to. References are URLs that are relative to
     * http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to
     * http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only
     * allowed for logical models (and can only be used in references in logical
     * models, not resources).
     */
    set type(value: Uri) {
      this._content["type"] = value;
    }

    get type(): Uri {
      return this._content["type"] as Uri;
    }
  }

  /**
   * Base StructureDefinition for RelatedArtifact Type: Related artifacts such
   * as additional documentation, justification, or bibliographic references.
   */
  export class RelatedArtifact extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RelatedArtifact";

    /**
     * A bibliographic citation for the related artifact. This text SHOULD be
     * formatted according to an accepted citation format.
     */
    set citation(value: Markdown) {
      this._content["citation"] = value;
    }

    get citation(): Markdown {
      return this._content["citation"] as Markdown;
    }

    /**
     * A brief description of the document or knowledge resource being
     * referenced, suitable for display to a consumer.
     */
    set display(value: String) {
      this._content["display"] = value;
    }

    get display(): String {
      return this._content["display"] as String;
    }

    /**
     * The document being referenced, represented as an attachment. This is
     * exclusive with the resource element.
     */
    set document(value: Attachment) {
      this._content["document"] = value;
    }

    get document(): Attachment {
      return this._content["document"] as Attachment;
    }

    /**
     * A short label that can be used to reference the citation from elsewhere
     * in the containing artifact, such as a footnote index.
     */
    set label(value: String) {
      this._content["label"] = value;
    }

    get label(): String {
      return this._content["label"] as String;
    }

    /**
     * The related resource, such as a library, value set, profile, or other
     * knowledge resource.
     */
    set resource(value: Canonical) {
      this._content["resource"] = value;
    }

    get resource(): Canonical {
      return this._content["resource"] as Canonical;
    }

    /** The type of relationship to the related artifact. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /** A url for the artifact that can be followed to access the actual content. */
    set url(value: Url) {
      this._content["url"] = value;
    }

    get url(): Url {
      return this._content["url"] as Url;
    }
  }

  /**
   * Base StructureDefinition for SampledData Type: A series of measurements
   * taken by a device, with upper and lower limits. There may be more than one
   * dimension in the data.
   */
  export class SampledData extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/SampledData";

    /**
     * A series of data points which are decimal values separated by a single
     * space (character u20). The special values "E" (error), "L" (below
     * detection limit) and "U" (above detection limit) can also be used in
     * place of a decimal value.
     */
    set data(value: String) {
      this._content["data"] = value;
    }

    get data(): String {
      return this._content["data"] as String;
    }

    /**
     * The number of sample points at each time point. If this value is greater
     * than one, then the dimensions will be interlaced - all the sample points
     * for a point in time will be recorded at once.
     */
    set dimensions(value: PositiveInt) {
      this._content["dimensions"] = value;
    }

    get dimensions(): PositiveInt {
      return this._content["dimensions"] as PositiveInt;
    }

    /**
     * A correction factor that is applied to the sampled data points before
     * they are added to the origin.
     */
    set factor(value: Decimal) {
      this._content["factor"] = value;
    }

    get factor(): Decimal {
      return this._content["factor"] as Decimal;
    }

    /**
     * The lower limit of detection of the measured points. This is needed if
     * any of the data points have the value "L" (lower than detection limit).
     */
    set lowerLimit(value: Decimal) {
      this._content["lowerLimit"] = value;
    }

    get lowerLimit(): Decimal {
      return this._content["lowerLimit"] as Decimal;
    }

    /**
     * The base quantity that a measured value of zero represents. In addition,
     * this provides the units of the entire measurement series.
     */
    set origin(value: Quantity) {
      this._content["origin"] = value;
    }

    get origin(): Quantity {
      return this._content["origin"] as Quantity;
    }

    /** The length of time between sampling times, measured in milliseconds. */
    set period(value: Decimal) {
      this._content["period"] = value;
    }

    get period(): Decimal {
      return this._content["period"] as Decimal;
    }

    /**
     * The upper limit of detection of the measured points. This is needed if
     * any of the data points have the value "U" (higher than detection limit).
     */
    set upperLimit(value: Decimal) {
      this._content["upperLimit"] = value;
    }

    get upperLimit(): Decimal {
      return this._content["upperLimit"] as Decimal;
    }
  }

  /**
   * Base StructureDefinition for Signature Type: A signature along with
   * supporting context. The signature may be a digital signature that is
   * cryptographic in nature, or some other signature acceptable to the domain.
   * This other signature may be as simple as a graphical image representing a
   * hand-written signature, or a signature ceremony Different signature
   * approaches have different utilities.
   */
  export class Signature extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Signature";

    /**
     * The base64 encoding of the Signature content. When signature is not
     * recorded electronically this element would be empty.
     */
    set data(value: Base64Binary) {
      this._content["data"] = value;
    }

    get data(): Base64Binary {
      return this._content["data"] as Base64Binary;
    }

    /**
     * A reference to an application-usable description of the identity that is
     * represented by the signature.
     */
    set onBehalfOf(value: Reference) {
      this._content["onBehalfOf"] = value;
    }

    get onBehalfOf(): Reference {
      return this._content["onBehalfOf"] as Reference;
    }

    /**
     * A mime type that indicates the technical format of the signature.
     * Important mime types are application/signature+xml for X ML DigSig,
     * application/jose for JWS, and image/* for a graphical image of a
     * signature, etc.
     */
    set sigFormat(value: Code) {
      this._content["sigFormat"] = value;
    }

    get sigFormat(): Code {
      return this._content["sigFormat"] as Code;
    }

    /**
     * A mime type that indicates the technical format of the target resources
     * signed by the signature.
     */
    set targetFormat(value: Code) {
      this._content["targetFormat"] = value;
    }

    get targetFormat(): Code {
      return this._content["targetFormat"] as Code;
    }

    /**
     * An indication of the reason that the entity signed this document. This
     * may be explicitly included as part of the signature information and can
     * be used when determining accountability for various actions concerning
     * the document.
     */
    set type(value: Array<Coding>) {
      this._content["type"] = value;
    }

    get type(): Array<Coding> {
      return this._content["type"] as Array<Coding>;
    }

    /** When the digital signature was signed. */
    set when(value: Instant) {
      this._content["when"] = value;
    }

    get when(): Instant {
      return this._content["when"] as Instant;
    }

    /**
     * A reference to an application-usable description of the identity that
     * signed (e.g. the signature used their private key).
     */
    set who(value: Reference) {
      this._content["who"] = value;
    }

    get who(): Reference {
      return this._content["who"] as Reference;
    }
  }

  /**
   * Base StructureDefinition for Timing Type: Specifies an event that may occur
   * multiple times. Timing schedules are used to record when things are
   * planned, expected or requested to occur. The most common usage is in dosage
   * instructions for medications. They are also used when planning care of
   * various kinds, and may be used for reporting the schedule to which past
   * regular activities were carried out.
   */
  export class Timing extends BackboneElement {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Timing";

    /**
     * A code for the timing schedule (or just text in code.text). Some codes
     * such as BID are ubiquitous, but many institutions define their own
     * additional codes. If a code is provided, the code is understood to be a
     * complete statement of whatever is specified in the structured timing
     * data, and either the code or the data may be used to interpret the
     * Timing, with the exception that .repeat.bounds still applies over the
     * code (and is not contained in the code).
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Identifies specific times when the event occurs. */
    set event(value: Array<DateTime>) {
      this._content["event"] = value;
    }

    get event(): Array<DateTime> {
      return this._content["event"] as Array<DateTime>;
    }

    /** A set of rules that describe when the event is scheduled. */
    set repeat(value: Element) {
      this._content["repeat"] = value;
    }

    get repeat(): Element {
      return this._content["repeat"] as Element;
    }
  }

  /**
   * Base StructureDefinition for TriggerDefinition Type: A description of a
   * triggering event. Triggering events can be named events, data events, or
   * periodic, as determined by the type element.
   */
  export class TriggerDefinition extends Element {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/TriggerDefinition";

    /**
     * A boolean-valued expression that is evaluated in the context of the
     * container of the trigger definition and returns whether or not the
     * trigger fires.
     */
    set condition(value: Expression) {
      this._content["condition"] = value;
    }

    get condition(): Expression {
      return this._content["condition"] as Expression;
    }

    /**
     * The triggering data of the event (if this is a data trigger). If more
     * than one data is requirement is specified, then all the data requirements
     * must be true.
     */
    set data(value: Array<DataRequirement>) {
      this._content["data"] = value;
    }

    get data(): Array<DataRequirement> {
      return this._content["data"] as Array<DataRequirement>;
    }

    /**
     * A formal name for the event. This may be an absolute URI that identifies
     * the event formally (e.g. from a trigger registry), or a simple relative
     * URI that identifies the event in a local context.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The timing of the event (if this is a periodic trigger). */
    set timing(value: Timing | Reference | Date | DateTime) {
      this._content["timing"] = value;
    }

    get timingTiming(): Timing {
      return this._content["timing"] as Timing;
    }

    get timingReference(): Reference {
      return this._content["timing"] as Reference;
    }

    get timingDate(): Date {
      return this._content["timing"] as Date;
    }

    get timingDateTime(): DateTime {
      return this._content["timing"] as DateTime;
    }

    /** The type of triggering event. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * Base StructureDefinition for UsageContext Type: Specifies
   * clinical/business/etc. metadata that can be used to retrieve, index and/or
   * categorize an artifact. This metadata can either be specific to the
   * applicable population (e.g., age category, DRG) or the specific context of
   * care (e.g., venue, care setting, provider of care).
   */
  export class UsageContext extends Element {
    static url: string = "http://hl7.org/fhir/StructureDefinition/UsageContext";

    /**
     * A code that identifies the type of context being specified by this usage
     * context.
     */
    set code(value: Coding) {
      this._content["code"] = value;
    }

    get code(): Coding {
      return this._content["code"] as Coding;
    }

    /**
     * A value that defines the context specified in this context of use. The
     * interpretation of the value is defined by the code.
     */
    set value(value: CodeableConcept | Quantity | Range | Reference) {
      this._content["value"] = value;
    }

    get valueCodeableConcept(): CodeableConcept {
      return this._content["value"] as CodeableConcept;
    }

    get valueQuantity(): Quantity {
      return this._content["value"] as Quantity;
    }

    get valueRange(): Range {
      return this._content["value"] as Range;
    }

    get valueReference(): Reference {
      return this._content["value"] as Reference;
    }
  }

  /**
   * An amount of money. With regard to precision, see [Decimal
   * Precision](datatypes.html#precision)
   */
  export class MoneyQuantity extends Quantity {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MoneyQuantity";
  }

  /** A fixed quantity (no comparator) */
  export class SimpleQuantity extends Quantity {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SimpleQuantity";
  }

  /** This is the base resource type for everything. */
  export abstract class Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Resource";
    protected _content: { [key: string]: TElement } = {};

    /**
     * The logical id of the resource, as used in the URL for the resource. Once
     * assigned, this value never changes.
     */
    set id(value: string) {
      this._content["id"] = value;
    }

    get id(): string {
      return this._content["id"] as string;
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    set implicitRules(value: Uri) {
      this._content["implicitRules"] = value;
    }

    get implicitRules(): Uri {
      return this._content["implicitRules"] as Uri;
    }

    /** The base language in which the resource is written. */
    set language(value: Code) {
      this._content["language"] = value;
    }

    get language(): Code {
      return this._content["language"] as Code;
    }

    /**
     * The metadata about the resource. This is content that is maintained by
     * the infrastructure. Changes to the content might not always be associated
     * with version changes to the resource.
     */
    set meta(value: Meta) {
      this._content["meta"] = value;
    }

    get meta(): Meta {
      return this._content["meta"] as Meta;
    }
  }

  /** A resource that includes narrative, extensions, and contained resources. */
  export abstract class DomainResource extends Resource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DomainResource";

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    set contained(value: Array<Resource>) {
      this._content["contained"] = value;
    }

    get contained(): Array<Resource> {
      return this._content["contained"] as Array<Resource>;
    }

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the resource. To make the use of extensions safe and
     * manageable, there is a strict set of governance applied to the definition
     * and use of extensions. Though any implementer can define an extension,
     * there is a set of requirements that SHALL be met as part of the
     * definition of the extension.
     */
    set extension(value: Array<Extension>) {
      this._content["extension"] = value;
    }

    get extension(): Array<Extension> {
      return this._content["extension"] as Array<Extension>;
    }

    /**
     * May be used to represent additional information that is not part of the
     * basic definition of the resource and that modifies the understanding of
     * the element that contains it and/or the understanding of the containing
     * element's descendants. Usually modifier elements provide negation or
     * qualification. To make the use of extensions safe and manageable, there
     * is a strict set of governance applied to the definition and use of
     * extensions. Though any implementer is allowed to define an extension,
     * there is a set of requirements that SHALL be met as part of the
     * definition of the extension. Applications processing a resource are
     * required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    set modifierExtension(value: Array<Extension>) {
      this._content["modifierExtension"] = value;
    }

    get modifierExtension(): Array<Extension> {
      return this._content["modifierExtension"] as Array<Extension>;
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    set text(value: Narrative) {
      this._content["text"] = value;
    }

    get text(): Narrative {
      return this._content["text"] as Narrative;
    }
  }

  /**
   * A financial tool for tracking value accrued for a particular purpose. In
   * the healthcare field, used to track charges for a patient, cost centers,
   * etc.
   */
  export class Account extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Account";

    /**
     * The party(s) that are responsible for covering the payment of this
     * account, and what order should they be applied to the account.
     */
    set coverage(value: Array<BackboneElement>) {
      this._content["coverage"] = value;
    }

    get coverage(): Array<BackboneElement> {
      return this._content["coverage"] as Array<BackboneElement>;
    }

    /**
     * Provides additional information about what the account tracks and how it
     * is used.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The parties responsible for balancing the account if other payment
     * options fall short.
     */
    set guarantor(value: Array<BackboneElement>) {
      this._content["guarantor"] = value;
    }

    get guarantor(): Array<BackboneElement> {
      return this._content["guarantor"] as Array<BackboneElement>;
    }

    /**
     * Unique identifier used to reference the account. Might or might not be
     * intended for human use (e.g. credit card number).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Name used for the account when displaying it to humans in reports, etc. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Indicates the service area, hospital, department, etc. with
     * responsibility for managing the Account.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** Reference to a parent Account. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** The date range of services associated with this account. */
    set servicePeriod(value: Period) {
      this._content["servicePeriod"] = value;
    }

    get servicePeriod(): Period {
      return this._content["servicePeriod"] as Period;
    }

    /** Indicates whether the account is presently used/usable or not. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the entity which incurs the expenses. While the immediate
     * recipients of services or goods might be entities related to the subject,
     * the expenses were ultimately incurred by the subject of the Account.
     */
    set subject(value: Array<Reference>) {
      this._content["subject"] = value;
    }

    get subject(): Array<Reference> {
      return this._content["subject"] as Array<Reference>;
    }

    /** Categorizes the account for reporting and searching purposes. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * This resource allows for the definition of some activity to be performed,
   * independent of a particular patient, practitioner, or other performance
   * context.
   */
  export class ActivityDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ActivityDefinition";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * Indicates the sites on the subject's body where the procedure should be
     * performed (I.e. the target sites).
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * Detailed description of the type of activity; e.g. What lab test, what
     * procedure, what kind of encounter.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the activity definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the activity definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the activity definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the activity definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the activity definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Set this to true if the definition is to indicate that a particular
     * activity should NOT be performed. If true, this element should be
     * interpreted to reinforce a negative coding. For example NPO as a code
     * with a doNotPerform of true would still indicate to NOT perform the
     * action.
     */
    set doNotPerform(value: Boolean) {
      this._content["doNotPerform"] = value;
    }

    get doNotPerform(): Boolean {
      return this._content["doNotPerform"] as Boolean;
    }

    /**
     * Provides detailed dosage instructions in the same way that they are
     * described for MedicationRequest resources.
     */
    set dosage(value: Array<Dosage>) {
      this._content["dosage"] = value;
    }

    get dosage(): Array<Dosage> {
      return this._content["dosage"] as Array<Dosage>;
    }

    /**
     * Dynamic values that will be evaluated to produce values for elements of
     * the resulting resource. For example, if the dosage of a medication must
     * be computed based on the patient's weight, a dynamic value would be used
     * to specify an expression that calculated the weight, and the path on the
     * request resource that would contain the result.
     */
    set dynamicValue(value: Array<BackboneElement>) {
      this._content["dynamicValue"] = value;
    }

    get dynamicValue(): Array<BackboneElement> {
      return this._content["dynamicValue"] as Array<BackboneElement>;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the activity definition content was or is planned
     * to be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this activity definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this activity definition
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Indicates the level of authority/intentionality associated with the
     * activity and where the request should fit into the workflow chain.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * A legal or geographic region in which the activity definition is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A description of the kind of resource the activity definition is
     * representing. For example, a MedicationRequest, a ServiceRequest, or a
     * CommunicationRequest. Typically, but not always, this is a Request
     * resource.
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing any formal logic used by the
     * activity definition.
     */
    set library(value: Array<Canonical>) {
      this._content["library"] = value;
    }

    get library(): Array<Canonical> {
      return this._content["library"] as Array<Canonical>;
    }

    /**
     * Identifies the facility where the activity will occur; e.g. home,
     * hospital, specific clinic, etc.
     */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * A natural language name identifying the activity definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Defines observation requirements for the action to be performed, such as
     * body weight or surface area.
     */
    set observationRequirement(value: Array<Reference>) {
      this._content["observationRequirement"] = value;
    }

    get observationRequirement(): Array<Reference> {
      return this._content["observationRequirement"] as Array<Reference>;
    }

    /** Defines the observations that are expected to be produced by the action. */
    set observationResultRequirement(value: Array<Reference>) {
      this._content["observationResultRequirement"] = value;
    }

    get observationResultRequirement(): Array<Reference> {
      return this._content["observationResultRequirement"] as Array<Reference>;
    }

    /** Indicates who should participate in performing the action described. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * Indicates how quickly the activity should be addressed with respect to
     * other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * Identifies the food, drug or other product being consumed or supplied in
     * the activity.
     */
    set product(value: Reference | CodeableConcept) {
      this._content["product"] = value;
    }

    get productReference(): Reference {
      return this._content["product"] as Reference;
    }

    get productCodeableConcept(): CodeableConcept {
      return this._content["product"] as CodeableConcept;
    }

    /**
     * A profile to which the target of the activity definition is expected to
     * conform.
     */
    set profile(value: Canonical) {
      this._content["profile"] = value;
    }

    get profile(): Canonical {
      return this._content["profile"] as Canonical;
    }

    /**
     * The name of the organization or individual that published the activity
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this activity definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Identifies the quantity expected to be consumed at once (per dose, per
     * meal, etc.).
     */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * Defines specimen requirements for the action to be performed, such as
     * required specimens for a lab test.
     */
    set specimenRequirement(value: Array<Reference>) {
      this._content["specimenRequirement"] = value;
    }

    get specimenRequirement(): Array<Reference> {
      return this._content["specimenRequirement"] as Array<Reference>;
    }

    /**
     * The status of this activity definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A code, group definition, or canonical reference that describes or
     * identifies the intended subject of the activity being defined. Canonical
     * references are allowed to support the definition of protocols for drug
     * and substance quality specifications, and is allowed to reference a
     * MedicinalProductDefinition, SubstanceDefinition,
     * AdministrableProductDefinition, ManufacturedItemDefinition, or
     * PackagedProductDefinition resource.
     */
    set subject(value: CodeableConcept | Reference | Canonical) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectCanonical(): Canonical {
      return this._content["subject"] as Canonical;
    }

    /**
     * An explanatory or alternate title for the activity definition giving
     * additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /**
     * The period, timing or frequency upon which the described activity is to
     * occur.
     */
    set timing(value: Timing | DateTime | Age | Period | Range | Duration) {
      this._content["timing"] = value;
    }

    get timingTiming(): Timing {
      return this._content["timing"] as Timing;
    }

    get timingDateTime(): DateTime {
      return this._content["timing"] as DateTime;
    }

    get timingAge(): Age {
      return this._content["timing"] as Age;
    }

    get timingPeriod(): Period {
      return this._content["timing"] as Period;
    }

    get timingRange(): Range {
      return this._content["timing"] as Range;
    }

    get timingDuration(): Duration {
      return this._content["timing"] as Duration;
    }

    /** A short, descriptive, user-friendly title for the activity definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the activity. Topics provide
     * a high-level categorization of the activity that can be useful for
     * filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * A reference to a StructureMap resource that defines a transform that can
     * be executed to produce the intent resource using the ActivityDefinition
     * instance as the input.
     */
    set transform(value: Canonical) {
      this._content["transform"] = value;
    }

    get transform(): Canonical {
      return this._content["transform"] as Canonical;
    }

    /**
     * An absolute URI that is used to identify this activity definition when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this activity definition is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * activity definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the activity definition is used from a
     * clinical perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate activity definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the activity
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the activity definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active assets.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A medicinal product in the final form which is suitable for administering
   * to a patient (after any mixing of multiple components, dissolution etc. has
   * been performed).
   */
  export class AdministrableProductDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AdministrableProductDefinition";

    /**
     * The dose form of the final product after necessary reconstitution or
     * processing. Contrasts to the manufactured dose form (see
     * ManufacturedItemDefinition). If the manufactured form was 'powder for
     * solution for injection', the administrable dose form could be 'solution
     * for injection' (once mixed with another item having manufactured form
     * 'solvent for solution for injection').
     */
    set administrableDoseForm(value: CodeableConcept) {
      this._content["administrableDoseForm"] = value;
    }

    get administrableDoseForm(): CodeableConcept {
      return this._content["administrableDoseForm"] as CodeableConcept;
    }

    /**
     * A device that is integral to the medicinal product, in effect being
     * considered as an "ingredient" of the medicinal product. This is not
     * intended for devices that are just co-packaged.
     */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /**
     * References a product from which one or more of the constituent parts of
     * that product can be prepared and used as described by this administrable
     * product. If this administrable product describes the administration of a
     * crushed tablet, the 'formOf' would be the product representing a
     * distribution containing tablets and possibly also a cream. This is
     * distinct from the 'producedFrom' which refers to the specific components
     * of the product that are used in this preparation, rather than the product
     * as a whole.
     */
    set formOf(value: Array<Reference>) {
      this._content["formOf"] = value;
    }

    get formOf(): Array<Reference> {
      return this._content["formOf"] as Array<Reference>;
    }

    /** An identifier for the administrable product. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The ingredients of this administrable medicinal product. This is only
     * needed if the ingredients are not specified either using
     * ManufacturedItemDefiniton (via
     * AdministrableProductDefinition.producedFrom) to state which component
     * items are used to make this, or using by incoming references from the
     * Ingredient resource, to state in detail which substances exist within
     * this. This element allows a basic coded ingredient to be used.
     */
    set ingredient(value: Array<CodeableConcept>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<CodeableConcept> {
      return this._content["ingredient"] as Array<CodeableConcept>;
    }

    /**
     * Indicates the specific manufactured items that are part of the 'formOf'
     * product that are used in the preparation of this specific administrable
     * form. In some cases, an administrable form might use all of the items
     * from the overall product (or there might only be one item), while in
     * other cases, an administrable form might use only a subset of the items
     * available in the overall product. For example, an administrable form
     * might involve combining a liquid and a powder available as part of an
     * overall product, but not involve applying the also supplied cream.
     */
    set producedFrom(value: Array<Reference>) {
      this._content["producedFrom"] = value;
    }

    get producedFrom(): Array<Reference> {
      return this._content["producedFrom"] as Array<Reference>;
    }

    /** Characteristics e.g. a product's onset of action. */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /**
     * The path by which the product is taken into or makes contact with the
     * body. In some regions this is referred to as the licenced or approved
     * route. RouteOfAdministration cannot be used when the 'formOf' product
     * already uses MedicinalProductDefinition.route (and vice versa).
     */
    set routeOfAdministration(value: Array<BackboneElement>) {
      this._content["routeOfAdministration"] = value;
    }

    get routeOfAdministration(): Array<BackboneElement> {
      return this._content["routeOfAdministration"] as Array<BackboneElement>;
    }

    /**
     * The status of this administrable product. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The presentation type in which this item is given to a patient. e.g. for
     * a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid -
     * 'vial' (as in 'contains 5 ml per vial').
     */
    set unitOfPresentation(value: CodeableConcept) {
      this._content["unitOfPresentation"] = value;
    }

    get unitOfPresentation(): CodeableConcept {
      return this._content["unitOfPresentation"] as CodeableConcept;
    }
  }

  /**
   * Actual or potential/avoided event causing unintended physical injury
   * resulting from or contributed to by medical care, a research study or other
   * healthcare setting factors that requires additional monitoring, treatment,
   * or hospitalization, or that results in death.
   */
  export class AdverseEvent extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/AdverseEvent";

    /**
     * Whether the event actually happened, or just had the potential to. Note
     * that this is independent of whether anyone was affected or harmed or how
     * severely.
     */
    set actuality(value: Code) {
      this._content["actuality"] = value;
    }

    get actuality(): Code {
      return this._content["actuality"] as Code;
    }

    /** The overall type of event, intended for search and filtering purposes. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Parties that may or should contribute or have contributed information to
     * the adverse event, which can consist of one or more activities. Such
     * information includes information leading to the decision to perform the
     * activity and how to perform the activity (e.g. consultant), information
     * that the activity itself seeks to reveal (e.g. informant of clinical
     * history), or information about what activity was performed (e.g.
     * informant witness).
     */
    set contributor(value: Array<Reference>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Reference> {
      return this._content["contributor"] as Array<Reference>;
    }

    /** The date (and perhaps time) when the adverse event occurred. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Estimated or actual date the AdverseEvent began, in the opinion of the
     * reporter.
     */
    set detected(value: DateTime) {
      this._content["detected"] = value;
    }

    get detected(): DateTime {
      return this._content["detected"] as DateTime;
    }

    /**
     * The Encounter during which AdverseEvent was created or to which the
     * creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * This element defines the specific type of event that occurred or that was
     * prevented from occurring.
     */
    set event(value: CodeableConcept) {
      this._content["event"] = value;
    }

    get event(): CodeableConcept {
      return this._content["event"] as CodeableConcept;
    }

    /**
     * Business identifiers assigned to this adverse event by the performer or
     * other systems which remain constant as the resource is updated and
     * propagates from server to server.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** The information about where the adverse event occurred. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Describes the type of outcome from the adverse event. */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** The date on which the existence of the AdverseEvent was first recorded. */
    set recordedDate(value: DateTime) {
      this._content["recordedDate"] = value;
    }

    get recordedDate(): DateTime {
      return this._content["recordedDate"] as DateTime;
    }

    /**
     * Information on who recorded the adverse event. May be the patient or a
     * practitioner.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /** AdverseEvent.referenceDocument. */
    set referenceDocument(value: Array<Reference>) {
      this._content["referenceDocument"] = value;
    }

    get referenceDocument(): Array<Reference> {
      return this._content["referenceDocument"] as Array<Reference>;
    }

    /**
     * Includes information about the reaction that occurred as a result of
     * exposure to a substance (for example, a drug or a chemical).
     */
    set resultingCondition(value: Array<Reference>) {
      this._content["resultingCondition"] = value;
    }

    get resultingCondition(): Array<Reference> {
      return this._content["resultingCondition"] as Array<Reference>;
    }

    /** Assessment whether this event was of real importance. */
    set seriousness(value: CodeableConcept) {
      this._content["seriousness"] = value;
    }

    get seriousness(): CodeableConcept {
      return this._content["seriousness"] as CodeableConcept;
    }

    /**
     * Describes the severity of the adverse event, in relation to the subject.
     * Contrast to AdverseEvent.seriousness - a severe rash might not be
     * serious, but a mild heart problem is.
     */
    set severity(value: CodeableConcept) {
      this._content["severity"] = value;
    }

    get severity(): CodeableConcept {
      return this._content["severity"] as CodeableConcept;
    }

    /** AdverseEvent.study. */
    set study(value: Array<Reference>) {
      this._content["study"] = value;
    }

    get study(): Array<Reference> {
      return this._content["study"] as Array<Reference>;
    }

    /** This subject or group impacted by the event. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** AdverseEvent.subjectMedicalHistory. */
    set subjectMedicalHistory(value: Array<Reference>) {
      this._content["subjectMedicalHistory"] = value;
    }

    get subjectMedicalHistory(): Array<Reference> {
      return this._content["subjectMedicalHistory"] as Array<Reference>;
    }

    /** Describes the entity that is suspected to have caused the adverse event. */
    set suspectEntity(value: Array<BackboneElement>) {
      this._content["suspectEntity"] = value;
    }

    get suspectEntity(): Array<BackboneElement> {
      return this._content["suspectEntity"] as Array<BackboneElement>;
    }
  }

  /**
   * Risk of harmful or undesirable, physiological response which is unique to
   * an individual and associated with exposure to a substance.
   */
  export class AllergyIntolerance extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance";

    /** The source of the information about the allergy that is recorded. */
    set asserter(value: Reference) {
      this._content["asserter"] = value;
    }

    get asserter(): Reference {
      return this._content["asserter"] as Reference;
    }

    /** Category of the identified substance. */
    set category(value: Array<Code>) {
      this._content["category"] = value;
    }

    get category(): Array<Code> {
      return this._content["category"] as Array<Code>;
    }

    /** The clinical status of the allergy or intolerance. */
    set clinicalStatus(value: CodeableConcept) {
      this._content["clinicalStatus"] = value;
    }

    get clinicalStatus(): CodeableConcept {
      return this._content["clinicalStatus"] as CodeableConcept;
    }

    /**
     * Code for an allergy or intolerance statement (either a positive or a
     * negated/excluded statement). This may be a code for a substance or
     * pharmaceutical product that is considered to be responsible for the
     * adverse reaction risk (e.g., "Latex"), an allergy or intolerance
     * condition (e.g., "Latex allergy"), or a negated/excluded code for a
     * specific substance or class (e.g., "No latex allergy") or a general or
     * categorical negated statement (e.g., "No known allergy", "No known drug
     * allergies"). Note: the substance for a specific reaction may be different
     * from the substance identified as the cause of the risk, but it must be
     * consistent with it. For instance, it may be a more specific substance
     * (e.g. a brand medication) or a composite product that includes the
     * identified substance. It must be clinically safe to only process the
     * 'code' and ignore the 'reaction.substance'. If a receiving system is
     * unable to confirm that AllergyIntolerance.reaction.substance falls within
     * the semantic scope of AllergyIntolerance.code, then the receiving system
     * should ignore AllergyIntolerance.reaction.substance.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction
     * to the identified substance.
     */
    set criticality(value: Code) {
      this._content["criticality"] = value;
    }

    get criticality(): Code {
      return this._content["criticality"] as Code;
    }

    /** The encounter when the allergy or intolerance was asserted. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Business identifiers assigned to this AllergyIntolerance by the performer
     * or other systems which remain constant as the resource is updated and
     * propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Represents the date and/or time of the last known occurrence of a
     * reaction event.
     */
    set lastOccurrence(value: DateTime) {
      this._content["lastOccurrence"] = value;
    }

    get lastOccurrence(): DateTime {
      return this._content["lastOccurrence"] as DateTime;
    }

    /**
     * Additional narrative about the propensity for the Adverse Reaction, not
     * captured in other fields.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Estimated or actual date, date-time, or age when allergy or intolerance
     * was identified.
     */
    set onset(value: DateTime | Age | Period | Range | String) {
      this._content["onset"] = value;
    }

    get onsetDateTime(): DateTime {
      return this._content["onset"] as DateTime;
    }

    get onsetAge(): Age {
      return this._content["onset"] as Age;
    }

    get onsetPeriod(): Period {
      return this._content["onset"] as Period;
    }

    get onsetRange(): Range {
      return this._content["onset"] as Range;
    }

    get onsetString(): String {
      return this._content["onset"] as String;
    }

    /** The patient who has the allergy or intolerance. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Details about each adverse reaction event linked to exposure to the
     * identified substance.
     */
    set reaction(value: Array<BackboneElement>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<BackboneElement> {
      return this._content["reaction"] as Array<BackboneElement>;
    }

    /**
     * The recordedDate represents when this particular AllergyIntolerance
     * record was created in the system, which is often a system-generated
     * date.
     */
    set recordedDate(value: DateTime) {
      this._content["recordedDate"] = value;
    }

    get recordedDate(): DateTime {
      return this._content["recordedDate"] as DateTime;
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * content.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /**
     * Identification of the underlying physiological mechanism for the reaction
     * risk.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * Assertion about certainty associated with the propensity, or potential
     * risk, of a reaction to the identified substance (including pharmaceutical
     * product).
     */
    set verificationStatus(value: CodeableConcept) {
      this._content["verificationStatus"] = value;
    }

    get verificationStatus(): CodeableConcept {
      return this._content["verificationStatus"] as CodeableConcept;
    }
  }

  /**
   * A booking of a healthcare event among patient(s), practitioner(s), related
   * person(s) and/or device(s) for a specific date/time. This may result in one
   * or more Encounter(s).
   */
  export class Appointment extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Appointment";

    /**
     * The style of appointment or patient that has been booked in the slot (not
     * service type).
     */
    set appointmentType(value: CodeableConcept) {
      this._content["appointmentType"] = value;
    }

    get appointmentType(): CodeableConcept {
      return this._content["appointmentType"] as CodeableConcept;
    }

    /**
     * The service request this appointment is allocated to assess (e.g.
     * incoming referral or procedure request).
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The coded reason for the appointment being cancelled. This is often used
     * in reporting/billing/futher processing to determine if further actions
     * are required, or specific fees apply.
     */
    set cancelationReason(value: CodeableConcept) {
      this._content["cancelationReason"] = value;
    }

    get cancelationReason(): CodeableConcept {
      return this._content["cancelationReason"] as CodeableConcept;
    }

    /** Additional comments about the appointment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * The date that this appointment was initially created. This could be
     * different to the meta.lastModified value on the initial entry, as this
     * could have been before the resource was created on the FHIR server, and
     * should remain unchanged over the lifespan of the appointment.
     */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * The brief description of the appointment as would be shown on a subject
     * line in a meeting request, or appointment list. Detailed or expanded
     * information should be put in the comment field.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Date/Time that the appointment is to conclude. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * This records identifiers associated with this appointment concern that
     * are defined by business processes and/or used to refer to it when a
     * direct URL reference to the resource itself is not appropriate (e.g. in
     * CDA documents, or in written / printed documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Number of minutes that the appointment is to take. This can be less than
     * the duration between the start and end times. For example, where the
     * actual time of appointment is only an estimate or if a 30 minute
     * appointment is being requested, but any time would work. Also, if there
     * is, for example, a planned 15 minute break in the middle of a long
     * appointment, the duration may be 15 minutes less than the difference
     * between the start and end.
     */
    set minutesDuration(value: PositiveInt) {
      this._content["minutesDuration"] = value;
    }

    get minutesDuration(): PositiveInt {
      return this._content["minutesDuration"] as PositiveInt;
    }

    /** List of participants involved in the appointment. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * While Appointment.comment contains information for internal use,
     * Appointment.patientInstructions is used to capture patient facing
     * information about the Appointment (e.g. please bring your referral or
     * fast from 8pm night before).
     */
    set patientInstruction(value: String) {
      this._content["patientInstruction"] = value;
    }

    get patientInstruction(): String {
      return this._content["patientInstruction"] as String;
    }

    /**
     * The priority of the appointment. Can be used to make informed decisions
     * if needing to re-prioritize appointments. (The iCal Standard specifies 0
     * as undefined, 1 as highest, 9 as lowest priority).
     */
    set priority(value: UnsignedInt) {
      this._content["priority"] = value;
    }

    get priority(): UnsignedInt {
      return this._content["priority"] as UnsignedInt;
    }

    /**
     * The coded reason that this appointment is being scheduled. This is more
     * clinical than administrative.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Reason the appointment has been scheduled to take place, as specified
     * using information from another resource. When the patient arrives and the
     * encounter begins it may be used as the admission diagnosis. The
     * indication will typically be a Condition (with other resources referenced
     * in the evidence.detail), or a Procedure.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * A set of date ranges (potentially including times) that the appointment
     * is preferred to be scheduled within.
     *
     * The duration (usually in minutes) could also be provided to indicate the
     * length of the appointment to fill and populate the start/end times for
     * the actual allocated time. However, in other situations the duration may
     * be calculated by the scheduling system.
     */
    set requestedPeriod(value: Array<Period>) {
      this._content["requestedPeriod"] = value;
    }

    get requestedPeriod(): Array<Period> {
      return this._content["requestedPeriod"] as Array<Period>;
    }

    /**
     * A broad categorization of the service that is to be performed during this
     * appointment.
     */
    set serviceCategory(value: Array<CodeableConcept>) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): Array<CodeableConcept> {
      return this._content["serviceCategory"] as Array<CodeableConcept>;
    }

    /** The specific service that is to be performed during this appointment. */
    set serviceType(value: Array<CodeableConcept>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<CodeableConcept> {
      return this._content["serviceType"] as Array<CodeableConcept>;
    }

    /**
     * The slots from the participants' schedules that will be filled by the
     * appointment.
     */
    set slot(value: Array<Reference>) {
      this._content["slot"] = value;
    }

    get slot(): Array<Reference> {
      return this._content["slot"] as Array<Reference>;
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** Date/Time that the appointment is to take place. */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /**
     * The overall status of the Appointment. Each of the participants has their
     * own participation status which indicates their involvement in the
     * process, however this status indicates the shared status.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Additional information to support the appointment provided when making
     * the appointment.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /**
   * A reply to an appointment request for a patient and/or practitioner(s),
   * such as a confirmation or rejection.
   */
  export class AppointmentResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/AppointmentResponse";

    /**
     * A Person, Location, HealthcareService, or Device that is participating in
     * the appointment.
     */
    set actor(value: Reference) {
      this._content["actor"] = value;
    }

    get actor(): Reference {
      return this._content["actor"] as Reference;
    }

    /** Appointment that this response is replying to. */
    set appointment(value: Reference) {
      this._content["appointment"] = value;
    }

    get appointment(): Reference {
      return this._content["appointment"] as Reference;
    }

    /** Additional comments about the appointment. */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * This may be either the same as the appointment request to confirm the
     * details of the appointment, or alternately a new time to request a
     * re-negotiation of the end time.
     */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * This records identifiers associated with this appointment response
     * concern that are defined by business processes and/ or used to refer to
     * it when a direct URL reference to the resource itself is not
     * appropriate.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Participation status of the participant. When the status is declined or
     * tentative if the start/end times are different to the appointment, then
     * these times should be interpreted as a requested time change. When the
     * status is accepted, the times can either be the time of the appointment
     * (as a confirmation of the time) or can be empty.
     */
    set participantStatus(value: Code) {
      this._content["participantStatus"] = value;
    }

    get participantStatus(): Code {
      return this._content["participantStatus"] as Code;
    }

    /** Role of participant in the appointment. */
    set participantType(value: Array<CodeableConcept>) {
      this._content["participantType"] = value;
    }

    get participantType(): Array<CodeableConcept> {
      return this._content["participantType"] as Array<CodeableConcept>;
    }

    /**
     * Date/Time that the appointment is to take place, or requested new start
     * time.
     */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }
  }

  /**
   * A record of an event made for purposes of maintaining a security log.
   * Typical uses include detection of intrusion attempts and monitoring for
   * inappropriate usage.
   */
  export class AuditEvent extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/AuditEvent";

    /**
     * Indicator for type of action performed during the event that generated
     * the audit.
     */
    set action(value: Code) {
      this._content["action"] = value;
    }

    get action(): Code {
      return this._content["action"] as Code;
    }

    /** An actor taking an active role in the event or activity that is logged. */
    set agent(value: Array<BackboneElement>) {
      this._content["agent"] = value;
    }

    get agent(): Array<BackboneElement> {
      return this._content["agent"] as Array<BackboneElement>;
    }

    /** Specific instances of data or objects that have been accessed. */
    set entity(value: Array<BackboneElement>) {
      this._content["entity"] = value;
    }

    get entity(): Array<BackboneElement> {
      return this._content["entity"] as Array<BackboneElement>;
    }

    /** Indicates whether the event succeeded or failed. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** A free text description of the outcome of the event. */
    set outcomeDesc(value: String) {
      this._content["outcomeDesc"] = value;
    }

    get outcomeDesc(): String {
      return this._content["outcomeDesc"] as String;
    }

    /** The period during which the activity occurred. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The purposeOfUse (reason) that was used during the event being recorded. */
    set purposeOfEvent(value: Array<CodeableConcept>) {
      this._content["purposeOfEvent"] = value;
    }

    get purposeOfEvent(): Array<CodeableConcept> {
      return this._content["purposeOfEvent"] as Array<CodeableConcept>;
    }

    /** The time when the event was recorded. */
    set recorded(value: Instant) {
      this._content["recorded"] = value;
    }

    get recorded(): Instant {
      return this._content["recorded"] as Instant;
    }

    /** The system that is reporting the event. */
    set source(value: BackboneElement) {
      this._content["source"] = value;
    }

    get source(): BackboneElement {
      return this._content["source"] as BackboneElement;
    }

    /** Identifier for the category of event. */
    set subtype(value: Array<Coding>) {
      this._content["subtype"] = value;
    }

    get subtype(): Array<Coding> {
      return this._content["subtype"] as Array<Coding>;
    }

    /**
     * Identifier for a family of the event. For example, a menu item, program,
     * rule, policy, function code, application name or URL. It identifies the
     * performed function.
     */
    set type(value: Coding) {
      this._content["type"] = value;
    }

    get type(): Coding {
      return this._content["type"] as Coding;
    }
  }

  /**
   * Basic is used for handling concepts not yet defined in FHIR, narrative-only
   * resources that don't map to an existing resource, and custom resources not
   * appropriate for inclusion in the FHIR specification.
   */
  export class Basic extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Basic";

    /** Indicates who was responsible for creating the resource instance. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Identifies the 'type' of resource - equivalent to the resource name for
     * other resources.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Identifies when the resource was first created. */
    set created(value: Date) {
      this._content["created"] = value;
    }

    get created(): Date {
      return this._content["created"] as Date;
    }

    /**
     * Identifier assigned to the resource for business purposes, outside the
     * context of FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Identifies the patient, practitioner, device or any other resource that
     * is the "focus" of this resource.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * A resource that represents the data of a single raw artifact as digital
   * content accessible in its native format. A Binary resource can contain any
   * content, whether text, image, pdf, zip archive, etc.
   */
  export class Binary extends Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Binary";

    /**
     * MimeType of the binary content represented as a standard MimeType (BCP
     * 13).
     */
    set contentType(value: Code) {
      this._content["contentType"] = value;
    }

    get contentType(): Code {
      return this._content["contentType"] as Code;
    }

    /** The actual content, base64 encoded. */
    set data(value: Base64Binary) {
      this._content["data"] = value;
    }

    get data(): Base64Binary {
      return this._content["data"] as Base64Binary;
    }

    /**
     * This element identifies another resource that can be used as a proxy of
     * the security sensitivity to use when deciding and enforcing access
     * control rules for the Binary resource. Given that the Binary resource
     * contains very few elements that can be used to determine the sensitivity
     * of the data and relationships to individuals, the referenced resource
     * stands in as a proxy equivalent for this purpose. This referenced
     * resource may be related to the Binary (e.g. Media, DocumentReference), or
     * may be some non-related Resource purely as a security proxy. E.g. to
     * identify that the binary resource relates to a patient, and access should
     * only be granted to applications that have access to the patient.
     */
    set securityContext(value: Reference) {
      this._content["securityContext"] = value;
    }

    get securityContext(): Reference {
      return this._content["securityContext"] as Reference;
    }
  }

  /**
   * A material substance originating from a biological entity intended to be
   * transplanted or infused into another (possibly the same) biological
   * entity.
   */
  export class BiologicallyDerivedProduct extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct";

    /** How this product was collected. */
    set collection(value: BackboneElement) {
      this._content["collection"] = value;
    }

    get collection(): BackboneElement {
      return this._content["collection"] as BackboneElement;
    }

    /**
     * This records identifiers associated with this biologically derived
     * product instance that are defined by business processes and/or used to
     * refer to it when a direct URL reference to the resource itself is not
     * appropriate (e.g. in CDA documents, or in written / printed
     * documentation).
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Any manipulation of product post-collection that is intended to alter the
     * product. For example a buffy-coat enrichment or CD8 reduction of
     * Peripheral Blood Stem Cells to make it more suitable for infusion.
     */
    set manipulation(value: BackboneElement) {
      this._content["manipulation"] = value;
    }

    get manipulation(): BackboneElement {
      return this._content["manipulation"] as BackboneElement;
    }

    /** Parent product (if any). */
    set parent(value: Array<Reference>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Reference> {
      return this._content["parent"] as Array<Reference>;
    }

    /**
     * Any processing of the product during collection that does not change the
     * fundamental nature of the product. For example adding anti-coagulants
     * during the collection of Peripheral Blood Stem Cells.
     */
    set processing(value: Array<BackboneElement>) {
      this._content["processing"] = value;
    }

    get processing(): Array<BackboneElement> {
      return this._content["processing"] as Array<BackboneElement>;
    }

    /** Broad category of this product. */
    set productCategory(value: Code) {
      this._content["productCategory"] = value;
    }

    get productCategory(): Code {
      return this._content["productCategory"] as Code;
    }

    /**
     * A code that identifies the kind of this biologically derived product
     * (SNOMED Ctcode).
     */
    set productCode(value: CodeableConcept) {
      this._content["productCode"] = value;
    }

    get productCode(): CodeableConcept {
      return this._content["productCode"] as CodeableConcept;
    }

    /** Number of discrete units within this product. */
    set quantity(value: Integer) {
      this._content["quantity"] = value;
    }

    get quantity(): Integer {
      return this._content["quantity"] as Integer;
    }

    /** Procedure request to obtain this biologically derived product. */
    set request(value: Array<Reference>) {
      this._content["request"] = value;
    }

    get request(): Array<Reference> {
      return this._content["request"] as Array<Reference>;
    }

    /** Whether the product is currently available. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Product storage. */
    set storage(value: Array<BackboneElement>) {
      this._content["storage"] = value;
    }

    get storage(): Array<BackboneElement> {
      return this._content["storage"] as Array<BackboneElement>;
    }
  }

  /**
   * Record details about an anatomical structure. This resource may be used
   * when a coded concept does not provide the necessary detail needed for the
   * use case.
   */
  export class BodyStructure extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/BodyStructure";

    /** Whether this body site is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** A summary, characterization or explanation of the body structure. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Identifier for this instance of the anatomical structure. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Image or images used to identify a location. */
    set image(value: Array<Attachment>) {
      this._content["image"] = value;
    }

    get image(): Array<Attachment> {
      return this._content["image"] as Array<Attachment>;
    }

    /**
     * The anatomical location or region of the specimen, lesion, or body
     * structure.
     */
    set location(value: CodeableConcept) {
      this._content["location"] = value;
    }

    get location(): CodeableConcept {
      return this._content["location"] as CodeableConcept;
    }

    /**
     * Qualifier to refine the anatomical location. These include qualifiers for
     * laterality, relative location, directionality, number, and plane.
     */
    set locationQualifier(value: Array<CodeableConcept>) {
      this._content["locationQualifier"] = value;
    }

    get locationQualifier(): Array<CodeableConcept> {
      return this._content["locationQualifier"] as Array<CodeableConcept>;
    }

    /**
     * The kind of structure being represented by the body structure at
     * `BodyStructure.location`. This can define both normal and abnormal
     * morphologies.
     */
    set morphology(value: CodeableConcept) {
      this._content["morphology"] = value;
    }

    get morphology(): CodeableConcept {
      return this._content["morphology"] as CodeableConcept;
    }

    /** The person to which the body site belongs. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }
  }

  /** A container for a collection of resources. */
  export class Bundle extends Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Bundle";

    /**
     * An entry in a bundle resource - will either contain a resource or
     * information about a resource (transactions and history only).
     */
    set entry(value: Array<BackboneElement>) {
      this._content["entry"] = value;
    }

    get entry(): Array<BackboneElement> {
      return this._content["entry"] as Array<BackboneElement>;
    }

    /**
     * A persistent identifier for the bundle that won't change as a bundle is
     * copied from server to server.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** A series of links that provide context to this bundle. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** Digital Signature - base64 encoded. XML-DSig or a JWT. */
    set signature(value: Signature) {
      this._content["signature"] = value;
    }

    get signature(): Signature {
      return this._content["signature"] as Signature;
    }

    /**
     * The date/time that the bundle was assembled - i.e. when the resources
     * were placed in the bundle.
     */
    set timestamp(value: Instant) {
      this._content["timestamp"] = value;
    }

    get timestamp(): Instant {
      return this._content["timestamp"] as Instant;
    }

    /**
     * If a set of search matches, this is the total number of entries of type
     * 'match' across all pages in the search. It does not include search.mode =
     * 'include' or 'outcome' entries and it does not provide a count of the
     * number of entries in the Bundle.
     */
    set total(value: UnsignedInt) {
      this._content["total"] = value;
    }

    get total(): UnsignedInt {
      return this._content["total"] as UnsignedInt;
    }

    /** Indicates the purpose of this bundle - how it is intended to be used. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * A Capability Statement documents a set of capabilities (behaviors) of a
   * FHIR Server for a particular version of FHIR that may be used as a
   * statement of actual server functionality or a statement of required or
   * desired server implementation.
   */
  export class CapabilityStatement extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CapabilityStatement";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the capability statement and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the capability statement.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the capability statement was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the capability statement changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the capability statement from
     * a consumer's perspective. Typically, this is used when the capability
     * statement describes a desired rather than an actual solution, for example
     * as a formal expression of requirements as part of an RFP.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** A document definition. */
    set document(value: Array<BackboneElement>) {
      this._content["document"] = value;
    }

    get document(): Array<BackboneElement> {
      return this._content["document"] as Array<BackboneElement>;
    }

    /**
     * A Boolean value to indicate that this capability statement is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * The version of the FHIR specification that this CapabilityStatement
     * describes (which SHALL be the same as the FHIR version of the
     * CapabilityStatement itself). There is no default value.
     */
    set fhirVersion(value: Code) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Code {
      return this._content["fhirVersion"] as Code;
    }

    /**
     * A list of the formats supported by this implementation using their
     * content types.
     */
    set format(value: Array<Code>) {
      this._content["format"] = value;
    }

    get format(): Array<Code> {
      return this._content["format"] as Array<Code>;
    }

    /**
     * Identifies a specific implementation instance that is described by the
     * capability statement - i.e. a particular installation, rather than the
     * capabilities of a software program.
     */
    set implementation(value: BackboneElement) {
      this._content["implementation"] = value;
    }

    get implementation(): BackboneElement {
      return this._content["implementation"] as BackboneElement;
    }

    /**
     * A list of implementation guides that the server does (or should) support
     * in their entirety.
     */
    set implementationGuide(value: Array<Canonical>) {
      this._content["implementationGuide"] = value;
    }

    get implementationGuide(): Array<Canonical> {
      return this._content["implementationGuide"] as Array<Canonical>;
    }

    /**
     * Reference to a canonical URL of another CapabilityStatement that this
     * software adds to. The capability statement automatically includes
     * everything in the other statement, and it is not duplicated, though the
     * server may repeat the same resources, interactions and operations to add
     * additional details to them.
     */
    set imports(value: Array<Canonical>) {
      this._content["imports"] = value;
    }

    get imports(): Array<Canonical> {
      return this._content["imports"] as Array<Canonical>;
    }

    /**
     * Reference to a canonical URL of another CapabilityStatement that this
     * software implements. This capability statement is a published API
     * description that corresponds to a business service. The server may
     * actually implement a subset of the capability statement it claims to
     * implement, so the capability statement must specify the full capability
     * details.
     */
    set instantiates(value: Array<Canonical>) {
      this._content["instantiates"] = value;
    }

    get instantiates(): Array<Canonical> {
      return this._content["instantiates"] as Array<Canonical>;
    }

    /**
     * A legal or geographic region in which the capability statement is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The way that this statement is intended to be used, to describe an actual
     * running instance of software, a particular product (kind, not instance of
     * software) or a class of implementation (e.g. a desired purchase).
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** A description of the messaging capabilities of the solution. */
    set messaging(value: Array<BackboneElement>) {
      this._content["messaging"] = value;
    }

    get messaging(): Array<BackboneElement> {
      return this._content["messaging"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the capability statement. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A list of the patch formats supported by this implementation using their
     * content types.
     */
    set patchFormat(value: Array<Code>) {
      this._content["patchFormat"] = value;
    }

    get patchFormat(): Array<Code> {
      return this._content["patchFormat"] as Array<Code>;
    }

    /**
     * The name of the organization or individual that published the capability
     * statement.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this capability statement is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** A definition of the restful capabilities of the solution, if any. */
    set rest(value: Array<BackboneElement>) {
      this._content["rest"] = value;
    }

    get rest(): Array<BackboneElement> {
      return this._content["rest"] as Array<BackboneElement>;
    }

    /**
     * Software that is covered by this capability statement. It is used when
     * the capability statement describes the capabilities of a particular
     * software version, independent of an installation.
     */
    set software(value: BackboneElement) {
      this._content["software"] = value;
    }

    get software(): BackboneElement {
      return this._content["software"] as BackboneElement;
    }

    /**
     * The status of this capability statement. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the capability statement. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this capability statement when
     * it is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this capability statement is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * capability statement is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate capability statement instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the capability
     * statement when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the capability statement
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Describes the intention of how one or more practitioners intend to deliver
   * care for a particular patient, group or community for a period of time,
   * possibly limited to care for a specific condition or set of conditions.
   */
  export class CarePlan extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CarePlan";

    /**
     * Identifies a planned action to occur as part of the plan. For example, a
     * medication to be used, lab tests to perform, self-monitoring, education,
     * etc.
     */
    set activity(value: Array<BackboneElement>) {
      this._content["activity"] = value;
    }

    get activity(): Array<BackboneElement> {
      return this._content["activity"] as Array<BackboneElement>;
    }

    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose
     * management and/or mitigation are handled by this plan.
     */
    set addresses(value: Array<Reference>) {
      this._content["addresses"] = value;
    }

    get addresses(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    /**
     * When populated, the author is responsible for the care plan. The care
     * plan is attributed to the author.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** A care plan that is fulfilled in whole or in part by this care plan. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Identifies all people and organizations who are expected to be involved
     * in the care envisioned by this plan.
     */
    set careTeam(value: Array<Reference>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<Reference> {
      return this._content["careTeam"] as Array<Reference>;
    }

    /**
     * Identifies what "kind" of plan this is to support differentiation between
     * multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma",
     * "disease management", "wellness plan", etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Identifies the individual(s) or organization who provided the contents of
     * the care plan.
     */
    set contributor(value: Array<Reference>) {
      this._content["contributor"] = value;
    }

    get contributor(): Array<Reference> {
      return this._content["contributor"] as Array<Reference>;
    }

    /**
     * Represents when this particular CarePlan record was created in the
     * system, which is often a system-generated date.
     */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A description of the scope and nature of the plan. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The Encounter during which this CarePlan was created or to which the
     * creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Describes the intended objective(s) of carrying out the care plan. */
    set goal(value: Array<Reference>) {
      this._content["goal"] = value;
    }

    get goal(): Array<Reference> {
      return this._content["goal"] as Array<Reference>;
    }

    /**
     * Business identifiers assigned to this care plan by the performer or other
     * systems which remain constant as the resource is updated and propagates
     * from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or
     * other definition that is adhered to in whole or in part by this
     * CarePlan.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * questionnaire or other definition that is adhered to in whole or in part
     * by this CarePlan.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * Indicates the level of authority/intentionality associated with the care
     * plan and where the care plan fits into the workflow chain.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /** General notes about the care plan not covered elsewhere. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A larger care plan of which this particular care plan is a component or
     * step.
     */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Indicates when the plan did (or is intended to) come into effect and end. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Completed or terminated care plan whose function is taken by this new
     * care plan.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * Indicates whether the plan is currently being acted upon, represents
     * future intentions or is now a historical record.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the patient or group whose intended care is described by the
     * plan.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Identifies portions of the patient's record that specifically influenced
     * the formation of the plan. These might include comorbidities, recent
     * procedures, limitations, recent assessments, etc.
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }

    /** Human-friendly name for the care plan. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }
  }

  /**
   * The Care Team includes all the people and organizations who plan to
   * participate in the coordination and delivery of care for a patient.
   */
  export class CareTeam extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CareTeam";

    /**
     * Identifies what kind of team. This is to support differentiation between
     * multiple co-existing teams, such as care plan team, episode of care team,
     * longitudinal care team.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The Encounter during which this CareTeam was created or to which the
     * creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Business identifiers assigned to this care team by the performer or other
     * systems which remain constant as the resource is updated and propagates
     * from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The organization responsible for the care team. */
    set managingOrganization(value: Array<Reference>) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Array<Reference> {
      return this._content["managingOrganization"] as Array<Reference>;
    }

    /**
     * A label for human use intended to distinguish like teams. E.g. the "red"
     * vs. "green" trauma teams.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Comments made about the CareTeam. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Identifies all people and organizations who are expected to be involved
     * in the care team.
     */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** Indicates when the team did (or is intended to) come into effect and end. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Describes why the care team exists. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Condition(s) that this care team addresses. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** Indicates the current state of the care team. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Identifies the patient or group whose intended care is handled by the
     * team.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** A central contact detail for the care team (that applies to all members). */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * Catalog entries are wrappers that contextualize items included in a
   * catalog.
   */
  export class CatalogEntry extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CatalogEntry";

    /** Used for examplefor Out of Formulary, or any specifics. */
    set additionalCharacteristic(value: Array<CodeableConcept>) {
      this._content["additionalCharacteristic"] = value;
    }

    get additionalCharacteristic(): Array<CodeableConcept> {
      return this._content[
        "additionalCharacteristic"
      ] as Array<CodeableConcept>;
    }

    /** User for example for ATC classification, or. */
    set additionalClassification(value: Array<CodeableConcept>) {
      this._content["additionalClassification"] = value;
    }

    get additionalClassification(): Array<CodeableConcept> {
      return this._content[
        "additionalClassification"
      ] as Array<CodeableConcept>;
    }

    /** Used in supporting related concepts, e.g. NDC to RxNorm. */
    set additionalIdentifier(value: Array<Identifier>) {
      this._content["additionalIdentifier"] = value;
    }

    get additionalIdentifier(): Array<Identifier> {
      return this._content["additionalIdentifier"] as Array<Identifier>;
    }

    /** Classes of devices, or ATC for medication. */
    set classification(value: Array<CodeableConcept>) {
      this._content["classification"] = value;
    }

    get classification(): Array<CodeableConcept> {
      return this._content["classification"] as Array<CodeableConcept>;
    }

    /**
     * Used in supporting different identifiers for the same product, e.g.
     * manufacturer code and retailer code.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Typically date of issue is different from the beginning of the validity.
     * This can be used to see when an item was last updated.
     */
    set lastUpdated(value: DateTime) {
      this._content["lastUpdated"] = value;
    }

    get lastUpdated(): DateTime {
      return this._content["lastUpdated"] as DateTime;
    }

    /** Whether the entry represents an orderable item. */
    set orderable(value: Boolean) {
      this._content["orderable"] = value;
    }

    get orderable(): Boolean {
      return this._content["orderable"] as Boolean;
    }

    /** The item in a catalog or definition. */
    set referencedItem(value: Reference) {
      this._content["referencedItem"] = value;
    }

    get referencedItem(): Reference {
      return this._content["referencedItem"] as Reference;
    }

    /**
     * Used for example, to point to a substance, or to a device used to
     * administer a medication.
     */
    set relatedEntry(value: Array<BackboneElement>) {
      this._content["relatedEntry"] = value;
    }

    get relatedEntry(): Array<BackboneElement> {
      return this._content["relatedEntry"] as Array<BackboneElement>;
    }

    /**
     * Used to support catalog exchange even for unsupported products, e.g.
     * getting list of medications even if not prescribable.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The type of item - medication, device, service, protocol or other. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** The date until which this catalog entry is expected to be active. */
    set validTo(value: DateTime) {
      this._content["validTo"] = value;
    }

    get validTo(): DateTime {
      return this._content["validTo"] as DateTime;
    }

    /** The time period in which this catalog entry is expected to be active. */
    set validityPeriod(value: Period) {
      this._content["validityPeriod"] = value;
    }

    get validityPeriod(): Period {
      return this._content["validityPeriod"] as Period;
    }
  }

  /**
   * The resource ChargeItem describes the provision of healthcare provider
   * products for a certain patient, therefore referring not only to the
   * product, but containing in addition details of the provision, like date,
   * time, amounts and participating organizations and persons. Main Usage of
   * the ChargeItem is to enable the billing process and internal cost
   * allocation.
   */
  export class ChargeItem extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ChargeItem";

    /** Account into which this ChargeItems belongs. */
    set account(value: Array<Reference>) {
      this._content["account"] = value;
    }

    get account(): Array<Reference> {
      return this._content["account"] as Array<Reference>;
    }

    /** The anatomical location where the related service has been applied. */
    set bodysite(value: Array<CodeableConcept>) {
      this._content["bodysite"] = value;
    }

    get bodysite(): Array<CodeableConcept> {
      return this._content["bodysite"] as Array<CodeableConcept>;
    }

    /** A code that identifies the charge, like a billing code. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * event.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** The financial cost center permits the tracking of charge attribution. */
    set costCenter(value: Reference) {
      this._content["costCenter"] = value;
    }

    get costCenter(): Reference {
      return this._content["costCenter"] as Reference;
    }

    /**
     * References the source of pricing information, rules of application for
     * the code this ChargeItem uses.
     */
    set definitionCanonical(value: Array<Canonical>) {
      this._content["definitionCanonical"] = value;
    }

    get definitionCanonical(): Array<Canonical> {
      return this._content["definitionCanonical"] as Array<Canonical>;
    }

    /**
     * References the (external) source of pricing information, rules of
     * application for the code this ChargeItem uses.
     */
    set definitionUri(value: Array<Uri>) {
      this._content["definitionUri"] = value;
    }

    get definitionUri(): Array<Uri> {
      return this._content["definitionUri"] as Array<Uri>;
    }

    /** Date the charge item was entered. */
    set enteredDate(value: DateTime) {
      this._content["enteredDate"] = value;
    }

    get enteredDate(): DateTime {
      return this._content["enteredDate"] as DateTime;
    }

    /** The device, practitioner, etc. who entered the charge item. */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /**
     * Factor overriding the factor determined by the rules associated with the
     * code.
     */
    set factorOverride(value: Decimal) {
      this._content["factorOverride"] = value;
    }

    get factorOverride(): Decimal {
      return this._content["factorOverride"] as Decimal;
    }

    /** Identifiers assigned to this event performer or other systems. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Comments made about the event by the performer, subject or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Date/time(s) or duration when the charged service was applied. */
    set occurrence(value: DateTime | Period | Timing) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    get occurrenceTiming(): Timing {
      return this._content["occurrence"] as Timing;
    }

    /**
     * If the list price or the rule-based factor associated with the code is
     * overridden, this attribute can capture a text to indicate the reason for
     * this action.
     */
    set overrideReason(value: String) {
      this._content["overrideReason"] = value;
    }

    get overrideReason(): String {
      return this._content["overrideReason"] as String;
    }

    /** ChargeItems can be grouped to larger ChargeItems covering the whole set. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Indicates who or what performed or participated in the charged service. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /** The organization requesting the service. */
    set performingOrganization(value: Reference) {
      this._content["performingOrganization"] = value;
    }

    get performingOrganization(): Reference {
      return this._content["performingOrganization"] as Reference;
    }

    /**
     * Total price of the charge overriding the list price associated with the
     * code.
     */
    set priceOverride(value: Money) {
      this._content["priceOverride"] = value;
    }

    get priceOverride(): Money {
      return this._content["priceOverride"] as Money;
    }

    /**
     * Identifies the device, food, drug or other product being charged either
     * by type code or reference to an instance.
     */
    set product(value: Reference | CodeableConcept) {
      this._content["product"] = value;
    }

    get productReference(): Reference {
      return this._content["product"] as Reference;
    }

    get productCodeableConcept(): CodeableConcept {
      return this._content["product"] as CodeableConcept;
    }

    /** Quantity of which the charge item has been serviced. */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /** Describes why the event occurred in coded or textual form. */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /** The organization performing the service. */
    set requestingOrganization(value: Reference) {
      this._content["requestingOrganization"] = value;
    }

    get requestingOrganization(): Reference {
      return this._content["requestingOrganization"] as Reference;
    }

    /** Indicated the rendered service that caused this charge. */
    set service(value: Array<Reference>) {
      this._content["service"] = value;
    }

    get service(): Array<Reference> {
      return this._content["service"] as Array<Reference>;
    }

    /** The current state of the ChargeItem. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The individual or set of individuals the action is being or was performed
     * on.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Further information supporting this charge. */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /**
   * The ChargeItemDefinition resource provides the properties that apply to the
   * (billing) codes necessary to calculate costs and prices. The properties may
   * differ largely depending on type and realm, therefore this resource gives
   * only a rough structure and requires profiling for each type of billing code
   * system.
   */
  export class ChargeItemDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition";

    /** Expressions that describe applicability criteria for the billing code. */
    set applicability(value: Array<BackboneElement>) {
      this._content["applicability"] = value;
    }

    get applicability(): Array<BackboneElement> {
      return this._content["applicability"] as Array<BackboneElement>;
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * The defined billing details in this resource pertain to the given billing
     * code.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the charge item definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the charge item definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the charge item definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the charge item definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * The URL pointing to an externally-defined charge item definition that is
     * adhered to in whole or in part by this definition.
     */
    set derivedFromUri(value: Array<Uri>) {
      this._content["derivedFromUri"] = value;
    }

    get derivedFromUri(): Array<Uri> {
      return this._content["derivedFromUri"] as Array<Uri>;
    }

    /**
     * A free text natural language description of the charge item definition
     * from a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the charge item definition content was or is
     * planned to be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A Boolean value to indicate that this charge item definition is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this charge item definition
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The defined billing details in this resource pertain to the given product
     * instance(s).
     */
    set instance(value: Array<Reference>) {
      this._content["instance"] = value;
    }

    get instance(): Array<Reference> {
      return this._content["instance"] as Array<Reference>;
    }

    /**
     * A legal or geographic region in which the charge item definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A larger definition of which this particular definition is a component or
     * step.
     */
    set partOf(value: Array<Canonical>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Canonical> {
      return this._content["partOf"] as Array<Canonical>;
    }

    /**
     * Group of properties which are applicable under the same conditions. If no
     * applicability rules are established for the group, then all properties
     * always apply.
     */
    set propertyGroup(value: Array<BackboneElement>) {
      this._content["propertyGroup"] = value;
    }

    get propertyGroup(): Array<BackboneElement> {
      return this._content["propertyGroup"] as Array<BackboneElement>;
    }

    /**
     * The name of the organization or individual that published the charge item
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * As new versions of a protocol or guideline are defined, allows
     * identification of what versions are replaced by a new instance.
     */
    set replaces(value: Array<Canonical>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Canonical> {
      return this._content["replaces"] as Array<Canonical>;
    }

    /** The current state of the ChargeItemDefinition. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the charge item definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this charge item definition when
     * it is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this charge item definition is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * charge item definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate charge item definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the charge item
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the charge item
     * definition author and is not expected to be globally unique. For example,
     * it might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active assets.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The Citation Resource enables reference to any knowledge artifact for
   * purposes of identification and attribution. The Citation Resource supports
   * existing reference structures and developing publication practices such as
   * versioning, expressing complex contributorship roles, and referencing
   * computable resources.
   */
  export class Citation extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Citation";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /** Who authored the Citation. */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /** The article or artifact being described. */
    set citedArtifact(value: BackboneElement) {
      this._content["citedArtifact"] = value;
    }

    get citedArtifact(): BackboneElement {
      return this._content["citedArtifact"] as BackboneElement;
    }

    /** The assignment to an organizing scheme. */
    set classification(value: Array<BackboneElement>) {
      this._content["classification"] = value;
    }

    get classification(): Array<BackboneElement> {
      return this._content["classification"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * Use and/or publishing restrictions for the Citation, not for the cited
     * artifact.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /** The status of the citation. */
    set currentState(value: Array<CodeableConcept>) {
      this._content["currentState"] = value;
    }

    get currentState(): Array<CodeableConcept> {
      return this._content["currentState"] as Array<CodeableConcept>;
    }

    /**
     * The date (and optionally time) when the citation was published. The date
     * must change when the business version changes and it must change if the
     * status code changes. In addition, it should change when the substantive
     * content of the citation changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the citation from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** Who edited the Citation. */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the citation content was or is planned to be in
     * active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /** Who endorsed the Citation. */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this citation is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this citation when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the citation is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the citation. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Used for general notes and annotations not coded elsewhere. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The name of the organization or individual that published the citation. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this citation is needed and why it has been designed
     * as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** Artifact related to the Citation Resource. */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /** Who reviewed the Citation. */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The status of this summary. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** An effective date or period for a status of the citation. */
    set statusDate(value: Array<BackboneElement>) {
      this._content["statusDate"] = value;
    }

    get statusDate(): Array<BackboneElement> {
      return this._content["statusDate"] as Array<BackboneElement>;
    }

    /** A human-readable display of the citation. */
    set summary(value: Array<BackboneElement>) {
      this._content["summary"] = value;
    }

    get summary(): Array<BackboneElement> {
      return this._content["summary"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the citation. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this citation when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * summary is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the summary is stored
     * on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate citation instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the citation when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the citation author and is not expected to
     * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
     * if a managed version is not available. There is also no expectation that
     * versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A provider issued list of professional services and products which have
   * been provided, or are to be provided, to a patient which is sent to an
   * insurer for reimbursement.
   */
  export class Claim extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Claim";

    /**
     * Details of an accident which resulted in injuries which required the
     * products and services listed in the claim.
     */
    set accident(value: BackboneElement) {
      this._content["accident"] = value;
    }

    get accident(): BackboneElement {
      return this._content["accident"] as BackboneElement;
    }

    /** The period for which charges are being submitted. */
    set billablePeriod(value: Period) {
      this._content["billablePeriod"] = value;
    }

    get billablePeriod(): Period {
      return this._content["billablePeriod"] as Period;
    }

    /** The members of the team who provided the products and services. */
    set careTeam(value: Array<BackboneElement>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<BackboneElement> {
      return this._content["careTeam"] as Array<BackboneElement>;
    }

    /** The date this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Information about diagnoses relevant to the claim items. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /** Individual who created the claim, predetermination or preauthorization. */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** Facility where the services were provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /**
     * A code to indicate whether and for whom funds are to be reserved for
     * future claims.
     */
    set fundsReserve(value: CodeableConcept) {
      this._content["fundsReserve"] = value;
    }

    get fundsReserve(): CodeableConcept {
      return this._content["fundsReserve"] as CodeableConcept;
    }

    /** A unique identifier assigned to this claim. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Financial instruments for reimbursement for the health care products and
     * services specified on the claim.
     */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /** The Insurer who is target of the request. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * A claim line. Either a simple product or service or a 'group' of details
     * which can each be a simple items or groups of sub-details.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * Original prescription which has been superseded by this prescription to
     * support the dispensing of pharmacy services, medications or products.
     */
    set originalPrescription(value: Reference) {
      this._content["originalPrescription"] = value;
    }

    get originalPrescription(): Reference {
      return this._content["originalPrescription"] as Reference;
    }

    /**
     * The party to whom the professional services and/or products have been
     * supplied or are being considered and for whom actual or forecast
     * reimbursement is sought.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The party to be reimbursed for cost of the products and services
     * according to the terms of the policy.
     */
    set payee(value: BackboneElement) {
      this._content["payee"] = value;
    }

    get payee(): BackboneElement {
      return this._content["payee"] as BackboneElement;
    }

    /**
     * Prescription to support the dispensing of pharmacy, device or vision
     * products.
     */
    set prescription(value: Reference) {
      this._content["prescription"] = value;
    }

    get prescription(): Reference {
      return this._content["prescription"] as Reference;
    }

    /**
     * The provider-required urgency of processing the request. Typical values
     * include: stat, routine deferred.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * Procedures performed on the patient relevant to the billing items with
     * the claim.
     */
    set procedure(value: Array<BackboneElement>) {
      this._content["procedure"] = value;
    }

    get procedure(): Array<BackboneElement> {
      return this._content["procedure"] as Array<BackboneElement>;
    }

    /**
     * The provider which is responsible for the claim, predetermination or
     * preauthorization.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** A reference to a referral resource. */
    set referral(value: Reference) {
      this._content["referral"] = value;
    }

    get referral(): Reference {
      return this._content["referral"] as Reference;
    }

    /**
     * Other claims which are related to this claim such as prior submissions or
     * claims for related services or for the same event.
     */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A finer grained suite of claim type codes which may convey additional
     * information such as Inpatient vs Outpatient and/or a specialty service.
     */
    set subType(value: CodeableConcept) {
      this._content["subType"] = value;
    }

    get subType(): CodeableConcept {
      return this._content["subType"] as CodeableConcept;
    }

    /**
     * Additional information codes regarding exceptions, special
     * considerations, the condition, situation, prior or concurrent issues.
     */
    set supportingInfo(value: Array<BackboneElement>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<BackboneElement> {
      return this._content["supportingInfo"] as Array<BackboneElement>;
    }

    /** The total value of the all the items in the claim. */
    set total(value: Money) {
      this._content["total"] = value;
    }

    get total(): Money {
      return this._content["total"] as Money;
    }

    /**
     * The category of claim, e.g. oral, pharmacy, vision, institutional,
     * professional.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * A code to indicate whether the nature of the request is: to request
     * adjudication of products and services previously rendered; or requesting
     * authorization and adjudication for provision in the future; or requesting
     * the non-binding adjudication of the listed products and services which
     * could be provided in the future.
     */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /**
   * This resource provides the adjudication details from the processing of a
   * Claim resource.
   */
  export class ClaimResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClaimResponse";

    /**
     * The first-tier service adjudications for payor added product or service
     * lines.
     */
    set addItem(value: Array<BackboneElement>) {
      this._content["addItem"] = value;
    }

    get addItem(): Array<BackboneElement> {
      return this._content["addItem"] as Array<BackboneElement>;
    }

    /** Request for additional supporting or authorizing information. */
    set communicationRequest(value: Array<Reference>) {
      this._content["communicationRequest"] = value;
    }

    get communicationRequest(): Array<Reference> {
      return this._content["communicationRequest"] as Array<Reference>;
    }

    /** The date this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A human readable description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Errors encountered during the processing of the adjudication. */
    set error(value: Array<BackboneElement>) {
      this._content["error"] = value;
    }

    get error(): Array<BackboneElement> {
      return this._content["error"] as Array<BackboneElement>;
    }

    /**
     * The actual form, by reference or inclusion, for printing the content or
     * an EOB.
     */
    set form(value: Attachment) {
      this._content["form"] = value;
    }

    get form(): Attachment {
      return this._content["form"] as Attachment;
    }

    /** A code for the form to be used for printing the content. */
    set formCode(value: CodeableConcept) {
      this._content["formCode"] = value;
    }

    get formCode(): CodeableConcept {
      return this._content["formCode"] as CodeableConcept;
    }

    /**
     * A code, used only on a response to a preauthorization, to indicate
     * whether the benefits payable have been reserved and for whom.
     */
    set fundsReserve(value: CodeableConcept) {
      this._content["fundsReserve"] = value;
    }

    get fundsReserve(): CodeableConcept {
      return this._content["fundsReserve"] as CodeableConcept;
    }

    /** A unique identifier assigned to this claim response. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Financial instruments for reimbursement for the health care products and
     * services specified on the claim.
     */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /** The party responsible for authorization, adjudication and reimbursement. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * A claim line. Either a simple (a product or service) or a 'group' of
     * details which can also be a simple items or groups of sub-details.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * The outcome of the claim, predetermination, or preauthorization
     * processing.
     */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /**
     * The party to whom the professional services and/or products have been
     * supplied or are being considered and for whom actual for facast
     * reimbursement is sought.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Type of Party to be reimbursed: subscriber, provider, other. */
    set payeeType(value: CodeableConcept) {
      this._content["payeeType"] = value;
    }

    get payeeType(): CodeableConcept {
      return this._content["payeeType"] as CodeableConcept;
    }

    /** Payment details for the adjudication of the claim. */
    set payment(value: BackboneElement) {
      this._content["payment"] = value;
    }

    get payment(): BackboneElement {
      return this._content["payment"] as BackboneElement;
    }

    /** The time frame during which this authorization is effective. */
    set preAuthPeriod(value: Period) {
      this._content["preAuthPeriod"] = value;
    }

    get preAuthPeriod(): Period {
      return this._content["preAuthPeriod"] as Period;
    }

    /**
     * Reference from the Insurer which is used in later communications which
     * refers to this adjudication.
     */
    set preAuthRef(value: String) {
      this._content["preAuthRef"] = value;
    }

    get preAuthRef(): String {
      return this._content["preAuthRef"] as String;
    }

    /**
     * A note that describes or explains adjudication results in a human
     * readable form.
     */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The provider which is responsible for the claim, predetermination or
     * preauthorization.
     */
    set requestor(value: Reference) {
      this._content["requestor"] = value;
    }

    get requestor(): Reference {
      return this._content["requestor"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A finer grained suite of claim type codes which may convey additional
     * information such as Inpatient vs Outpatient and/or a specialty service.
     */
    set subType(value: CodeableConcept) {
      this._content["subType"] = value;
    }

    get subType(): CodeableConcept {
      return this._content["subType"] as CodeableConcept;
    }

    /** Categorized monetary totals for the adjudication. */
    set total(value: Array<BackboneElement>) {
      this._content["total"] = value;
    }

    get total(): Array<BackboneElement> {
      return this._content["total"] as Array<BackboneElement>;
    }

    /**
     * A finer grained suite of claim type codes which may convey additional
     * information such as Inpatient vs Outpatient and/or a specialty service.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * A code to indicate whether the nature of the request is: to request
     * adjudication of products and services previously rendered; or requesting
     * authorization and adjudication for provision in the future; or requesting
     * the non-binding adjudication of the listed products and services which
     * could be provided in the future.
     */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /**
   * A record of a clinical assessment performed to determine what problem(s)
   * may affect the patient and before planning the treatments or management
   * strategies that are best to manage a patient's condition. Assessments are
   * often 1:1 with a clinical consultation / encounter, but this varies greatly
   * depending on the clinical workflow. This resource is called
   * "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion
   * with the recording of assessment tools such as Apgar score.
   */
  export class ClinicalImpression extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClinicalImpression";

    /** The clinician performing the assessment. */
    set assessor(value: Reference) {
      this._content["assessor"] = value;
    }

    get assessor(): Reference {
      return this._content["assessor"] as Reference;
    }

    /** Categorizes the type of clinical assessment performed. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Indicates when the documentation of the assessment was complete. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A summary of the context and/or cause of the assessment - why / where it
     * was performed, and what patient events/status prompted it.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** The point in time or period over which the subject was assessed. */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /**
     * The Encounter during which this ClinicalImpression was created or to
     * which the creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Specific findings or diagnoses that were considered likely or relevant to
     * ongoing treatment.
     */
    set finding(value: Array<BackboneElement>) {
      this._content["finding"] = value;
    }

    get finding(): Array<BackboneElement> {
      return this._content["finding"] as Array<BackboneElement>;
    }

    /**
     * Business identifiers assigned to this clinical impression by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * One or more sets of investigations (signs, symptoms, etc.). The actual
     * grouping of investigations varies greatly depending on the type and
     * context of the assessment. These investigations may include data
     * generated during the assessment process, or data previously generated and
     * recorded that is pertinent to the outcomes.
     */
    set investigation(value: Array<BackboneElement>) {
      this._content["investigation"] = value;
    }

    get investigation(): Array<BackboneElement> {
      return this._content["investigation"] as Array<BackboneElement>;
    }

    /**
     * Commentary about the impression, typically recorded after the impression
     * itself was made, though supplemental notes by the original author could
     * also appear.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A reference to the last assessment that was conducted on this patient.
     * Assessments are often/usually ongoing in nature; a care provider
     * (practitioner or team) will make new assessments on an ongoing basis as
     * new data arises or the patient's conditions changes.
     */
    set previous(value: Reference) {
      this._content["previous"] = value;
    }

    get previous(): Reference {
      return this._content["previous"] as Reference;
    }

    /** A list of the relevant problems/conditions for a patient. */
    set problem(value: Array<Reference>) {
      this._content["problem"] = value;
    }

    get problem(): Array<Reference> {
      return this._content["problem"] as Array<Reference>;
    }

    /** Estimate of likely outcome. */
    set prognosisCodeableConcept(value: Array<CodeableConcept>) {
      this._content["prognosisCodeableConcept"] = value;
    }

    get prognosisCodeableConcept(): Array<CodeableConcept> {
      return this._content[
        "prognosisCodeableConcept"
      ] as Array<CodeableConcept>;
    }

    /** RiskAssessment expressing likely outcome. */
    set prognosisReference(value: Array<Reference>) {
      this._content["prognosisReference"] = value;
    }

    get prognosisReference(): Array<Reference> {
      return this._content["prognosisReference"] as Array<Reference>;
    }

    /**
     * Reference to a specific published clinical protocol that was followed
     * during this assessment, and/or that provides evidence in support of the
     * diagnosis.
     */
    set protocol(value: Array<Uri>) {
      this._content["protocol"] = value;
    }

    get protocol(): Array<Uri> {
      return this._content["protocol"] as Array<Uri>;
    }

    /** Identifies the workflow status of the assessment. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Captures the reason for the current state of the ClinicalImpression. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /** The patient or group of individuals assessed as part of this record. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** A text summary of the investigations and the diagnosis. */
    set summary(value: String) {
      this._content["summary"] = value;
    }

    get summary(): String {
      return this._content["summary"] as String;
    }

    /** Information supporting the clinical impression. */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }
  }

  /**
   * A single issue - either an indication, contraindication, interaction or an
   * undesirable effect for a medicinal product, medication, device or
   * procedure.
   */
  export class ClinicalUseDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ClinicalUseDefinition";

    /**
     * A categorisation of the issue, primarily for dividing warnings into
     * subject heading areas such as "Pregnancy and Lactation", "Overdose",
     * "Effects on Ability to Drive and Use Machines".
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** Specifics for when this is a contraindication. */
    set contraindication(value: BackboneElement) {
      this._content["contraindication"] = value;
    }

    get contraindication(): BackboneElement {
      return this._content["contraindication"] as BackboneElement;
    }

    /** Business identifier for this issue. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Specifics for when this is an indication. */
    set indication(value: BackboneElement) {
      this._content["indication"] = value;
    }

    get indication(): BackboneElement {
      return this._content["indication"] as BackboneElement;
    }

    /** Specifics for when this is an interaction. */
    set interaction(value: BackboneElement) {
      this._content["interaction"] = value;
    }

    get interaction(): BackboneElement {
      return this._content["interaction"] as BackboneElement;
    }

    /** The population group to which this applies. */
    set population(value: Array<Reference>) {
      this._content["population"] = value;
    }

    get population(): Array<Reference> {
      return this._content["population"] as Array<Reference>;
    }

    /** Whether this is a current issue or one that has been retired etc. */
    set status(value: CodeableConcept) {
      this._content["status"] = value;
    }

    get status(): CodeableConcept {
      return this._content["status"] as CodeableConcept;
    }

    /** The medication or procedure for which this is an indication. */
    set subject(value: Array<Reference>) {
      this._content["subject"] = value;
    }

    get subject(): Array<Reference> {
      return this._content["subject"] as Array<Reference>;
    }

    /**
     * Indication | contraindication | interaction | undesirable-effect |
     * warning.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * Describe the possible undesirable effects (negative outcomes) from the
     * use of the medicinal product as treatment.
     */
    set undesirableEffect(value: BackboneElement) {
      this._content["undesirableEffect"] = value;
    }

    get undesirableEffect(): BackboneElement {
      return this._content["undesirableEffect"] as BackboneElement;
    }

    /**
     * A critical piece of information about environmental, health or physical
     * risks or hazards that serve as caution to the user. For example 'Do not
     * operate heavy machinery', 'May cause drowsiness', or 'Get medical
     * advice/attention if you feel unwell'.
     */
    set warning(value: BackboneElement) {
      this._content["warning"] = value;
    }

    get warning(): BackboneElement {
      return this._content["warning"] as BackboneElement;
    }
  }

  /**
   * The CodeSystem resource is used to declare the existence of and describe a
   * code system or code system supplement and its key properties, and
   * optionally define a part or all of its content.
   */
  export class CodeSystem extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/CodeSystem";

    /**
     * If code comparison is case sensitive when codes within this system are
     * compared to each other.
     */
    set caseSensitive(value: Boolean) {
      this._content["caseSensitive"] = value;
    }

    get caseSensitive(): Boolean {
      return this._content["caseSensitive"] as Boolean;
    }

    /** The code system defines a compositional (post-coordination) grammar. */
    set compositional(value: Boolean) {
      this._content["compositional"] = value;
    }

    get compositional(): Boolean {
      return this._content["compositional"] as Boolean;
    }

    /**
     * Concepts that are in the code system. The concept definitions are
     * inherently hierarchical, but the definitions must be consulted to
     * determine what the meanings of the hierarchical relationships are.
     */
    set concept(value: Array<BackboneElement>) {
      this._content["concept"] = value;
    }

    get concept(): Array<BackboneElement> {
      return this._content["concept"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The extent of the content of the code system (the concepts and codes it
     * defines) are represented in this resource instance.
     */
    set content(value: Code) {
      this._content["content"] = value;
    }

    get content(): Code {
      return this._content["content"] as Code;
    }

    /**
     * A copyright statement relating to the code system and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the code system.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The total number of concepts defined by the code system. Where the code
     * system has a compositional grammar, the basis of this count is defined by
     * the system steward.
     */
    set count(value: UnsignedInt) {
      this._content["count"] = value;
    }

    get count(): UnsignedInt {
      return this._content["count"] as UnsignedInt;
    }

    /**
     * The date (and optionally time) when the code system was published. The
     * date must change when the business version changes and it must change if
     * the status code changes. In addition, it should change when the
     * substantive content of the code system changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the code system from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this code system is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A filter that can be used in a value set compose statement when selecting
     * concepts using a filter.
     */
    set filter(value: Array<BackboneElement>) {
      this._content["filter"] = value;
    }

    get filter(): Array<BackboneElement> {
      return this._content["filter"] as Array<BackboneElement>;
    }

    /** The meaning of the hierarchy of concepts as represented in this resource. */
    set hierarchyMeaning(value: Code) {
      this._content["hierarchyMeaning"] = value;
    }

    get hierarchyMeaning(): Code {
      return this._content["hierarchyMeaning"] as Code;
    }

    /**
     * A formal identifier that is used to identify this code system when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the code system is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the code system. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A property defines an additional slot through which additional
     * information can be provided about a concept.
     */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /**
     * The name of the organization or individual that published the code
     * system.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this code system is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The date (and optionally time) when the code system resource was created
     * or revised.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The canonical URL of the code system that this code system supplement is
     * adding designations and properties to.
     */
    set supplements(value: Canonical) {
      this._content["supplements"] = value;
    }

    get supplements(): Canonical {
      return this._content["supplements"] as Canonical;
    }

    /** A short, descriptive, user-friendly title for the code system. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this code system when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this code
     * system is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the code system is
     * stored on different servers. This is used in
     * [Coding](datatypes.html#Coding).system.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate code system instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * Canonical reference to the value set that contains the entire code
     * system.
     */
    set valueSet(value: Canonical) {
      this._content["valueSet"] = value;
    }

    get valueSet(): Canonical {
      return this._content["valueSet"] as Canonical;
    }

    /**
     * The identifier that is used to identify this version of the code system
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the code system author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     * This is used in [Coding](datatypes.html#Coding).version.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * This flag is used to signify that the code system does not commit to
     * concept permanence across versions. If true, a version must be specified
     * when referencing this code system.
     */
    set versionNeeded(value: Boolean) {
      this._content["versionNeeded"] = value;
    }

    get versionNeeded(): Boolean {
      return this._content["versionNeeded"] as Boolean;
    }
  }

  /**
   * An occurrence of information being transmitted; e.g. an alert that was sent
   * to a responsible provider, a public health agency that was notified about a
   * reportable condition.
   */
  export class Communication extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/Communication";

    /**
     * Other resources that pertain to this communication and to which this
     * communication should be associated.
     */
    set about(value: Array<Reference>) {
      this._content["about"] = value;
    }

    get about(): Array<Reference> {
      return this._content["about"] as Array<Reference>;
    }

    /**
     * An order, proposal or plan fulfilled in whole or in part by this
     * Communication.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The type of message conveyed such as alert, notification, reminder,
     * instruction, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The Encounter during which this Communication was created or to which the
     * creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Business identifiers assigned to this communication by the performer or
     * other systems which remain constant as the resource is updated and
     * propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Prior communication that this communication is in response to. */
    set inResponseTo(value: Array<Reference>) {
      this._content["inResponseTo"] = value;
    }

    get inResponseTo(): Array<Reference> {
      return this._content["inResponseTo"] as Array<Reference>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
     * definition that is adhered to in whole or in part by this Communication.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this Communication.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /** A channel that was used for this communication (e.g. email, fax). */
    set medium(value: Array<CodeableConcept>) {
      this._content["medium"] = value;
    }

    get medium(): Array<CodeableConcept> {
      return this._content["medium"] as Array<CodeableConcept>;
    }

    /**
     * Additional notes or commentary about the communication by the sender,
     * receiver or other interested parties.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Part of this action. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Text, attachment(s), or resource(s) that was communicated to the
     * recipient.
     */
    set payload(value: Array<BackboneElement>) {
      this._content["payload"] = value;
    }

    get payload(): Array<BackboneElement> {
      return this._content["payload"] as Array<BackboneElement>;
    }

    /**
     * Characterizes how quickly the planned or in progress communication must
     * be addressed. Includes concepts such as stat, urgent, routine.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** The reason or justification for the communication. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this communication. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** The time when this communication arrived at the destination. */
    set received(value: DateTime) {
      this._content["received"] = value;
    }

    get received(): DateTime {
      return this._content["received"] as DateTime;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, care
     * team or device) which was the target of the communication. If receipts
     * need to be tracked by an individual, a separate resource instance will
     * need to be created for each recipient. Multiple recipient communications
     * are intended where either receipts are not tracked (e.g. a mass mail-out)
     * or a receipt is captured in aggregate (all emails confirmed received by a
     * particular time).
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which was the source of the communication.
     */
    set sender(value: Reference) {
      this._content["sender"] = value;
    }

    get sender(): Reference {
      return this._content["sender"] as Reference;
    }

    /** The time when this communication was sent. */
    set sent(value: DateTime) {
      this._content["sent"] = value;
    }

    get sent(): DateTime {
      return this._content["sent"] as DateTime;
    }

    /** The status of the transmission. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Captures the reason for the current state of the Communication. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /** The patient or group that was the focus of this communication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Description of the purpose/content, similar to a subject line in an
     * email.
     */
    set topic(value: CodeableConcept) {
      this._content["topic"] = value;
    }

    get topic(): CodeableConcept {
      return this._content["topic"] as CodeableConcept;
    }
  }

  /**
   * A request to convey information; e.g. the CDS system proposes that an alert
   * be sent to a responsible provider, the CDS system proposes that the public
   * health agency be notified about a reportable condition.
   */
  export class CommunicationRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CommunicationRequest";

    /**
     * Other resources that pertain to this communication request and to which
     * this communication request should be associated.
     */
    set about(value: Array<Reference>) {
      this._content["about"] = value;
    }

    get about(): Array<Reference> {
      return this._content["about"] as Array<Reference>;
    }

    /**
     * For draft requests, indicates the date of initial creation. For requests
     * with other statuses, indicates the date of activation.
     */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /** A plan or proposal that is fulfilled in whole or in part by this request. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The type of message to be sent such as alert, notification, reminder,
     * instruction, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * If true indicates that the CommunicationRequest is asking for the
     * specified action to _not_ occur.
     */
    set doNotPerform(value: Boolean) {
      this._content["doNotPerform"] = value;
    }

    get doNotPerform(): Boolean {
      return this._content["doNotPerform"] as Boolean;
    }

    /**
     * The Encounter during which this CommunicationRequest was created or to
     * which the creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * A shared identifier common to all requests that were authorized more or
     * less simultaneously by a single author, representing the identifier of
     * the requisition, prescription or similar form.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * Business identifiers assigned to this communication request by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A channel that was used for this communication (e.g. email, fax). */
    set medium(value: Array<CodeableConcept>) {
      this._content["medium"] = value;
    }

    get medium(): Array<CodeableConcept> {
      return this._content["medium"] as Array<CodeableConcept>;
    }

    /**
     * Comments made about the request by the requester, sender, recipient,
     * subject or other participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The time when this communication is to occur. */
    set occurrence(value: DateTime | Period) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    /** Text, attachment(s), or resource(s) to be communicated to the recipient. */
    set payload(value: Array<BackboneElement>) {
      this._content["payload"] = value;
    }

    get payload(): Array<BackboneElement> {
      return this._content["payload"] as Array<BackboneElement>;
    }

    /**
     * Characterizes how quickly the proposed act must be initiated. Includes
     * concepts such as stat, urgent, routine.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** Describes why the request is being made in coded or textual form. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this request. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The entity (e.g. person, organization, clinical information system,
     * device, group, or care team) which is the intended target of the
     * communication.
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /**
     * Completed or terminated request(s) whose function is taken by this new
     * request.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The device, individual, or organization who initiated the request and has
     * responsibility for its activation.
     */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which is to be the source of the communication.
     */
    set sender(value: Reference) {
      this._content["sender"] = value;
    }

    get sender(): Reference {
      return this._content["sender"] as Reference;
    }

    /** The status of the proposal or order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Captures the reason for the current state of the CommunicationRequest. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /** The patient or group that is the focus of this communication request. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * A compartment definition that defines how resources are accessed on a
   * server.
   */
  export class CompartmentDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CompartmentDefinition";

    /** Which compartment this definition describes. */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the compartment definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the compartment definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the compartment definition
     * from a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this compartment definition is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A natural language name identifying the compartment definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the compartment
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this compartment definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** Information about how a resource is related to the compartment. */
    set resource(value: Array<BackboneElement>) {
      this._content["resource"] = value;
    }

    get resource(): Array<BackboneElement> {
      return this._content["resource"] as Array<BackboneElement>;
    }

    /** Whether the search syntax is supported,. */
    set search(value: Boolean) {
      this._content["search"] = value;
    }

    get search(): Boolean {
      return this._content["search"] as Boolean;
    }

    /**
     * The status of this compartment definition. Enables tracking the
     * life-cycle of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An absolute URI that is used to identify this compartment definition when
     * it is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this compartment definition is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * compartment definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate compartment definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the compartment
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the compartment
     * definition author and is not expected to be globally unique. For example,
     * it might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A set of healthcare-related information that is assembled together into a
   * single logical package that provides a single coherent statement of
   * meaning, establishes its own context and that has clinical attestation with
   * regard to who is making the statement. A Composition defines the structure
   * and narrative content necessary for a document. However, a Composition
   * alone does not constitute a document. Rather, the Composition must be the
   * first entry in a Bundle where Bundle.type=document, and any other resources
   * referenced from Composition must be included as subsequent entries in the
   * Bundle (for example Patient, Practitioner, Encounter, etc.).
   */
  export class Composition extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Composition";

    /**
     * A participant who has attested to the accuracy of the
     * composition/document.
     */
    set attester(value: Array<BackboneElement>) {
      this._content["attester"] = value;
    }

    get attester(): Array<BackboneElement> {
      return this._content["attester"] as Array<BackboneElement>;
    }

    /**
     * Identifies who is responsible for the information in the composition, not
     * necessarily who typed it in.
     */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * A categorization for the type of the composition - helps for indexing and
     * searching. This may be implied by or derived from the code specified in
     * the Composition Type.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** The code specifying the level of confidentiality of the Composition. */
    set confidentiality(value: Code) {
      this._content["confidentiality"] = value;
    }

    get confidentiality(): Code {
      return this._content["confidentiality"] as Code;
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the composition/document information.
     */
    set custodian(value: Reference) {
      this._content["custodian"] = value;
    }

    get custodian(): Reference {
      return this._content["custodian"] as Reference;
    }

    /**
     * The composition editing time, when the composition was last logically
     * changed by the author.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Describes the clinical encounter or type of care this documentation is
     * associated with.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The clinical service, such as a colonoscopy or an appendectomy, being
     * documented.
     */
    set event(value: Array<BackboneElement>) {
      this._content["event"] = value;
    }

    get event(): Array<BackboneElement> {
      return this._content["event"] as Array<BackboneElement>;
    }

    /**
     * A version-independent identifier for the Composition. This identifier
     * stays constant as the composition is changed over time.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * Relationships that this composition has with other compositions or
     * documents that already exist.
     */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /** The root of the sections that make up the composition. */
    set section(value: Array<BackboneElement>) {
      this._content["section"] = value;
    }

    get section(): Array<BackboneElement> {
      return this._content["section"] as Array<BackboneElement>;
    }

    /**
     * The workflow/clinical status of this composition. The status is a marker
     * for the clinical standing of the document.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Who or what the composition is about. The composition can be about a
     * person, (patient or healthcare practitioner), a device (e.g. a machine)
     * or even a group of subjects (such as a document about a herd of
     * livestock, or a set of patients that share a common exposure).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Official human-readable label for the composition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Specifies the particular kind of composition (e.g. History and Physical,
     * Discharge Summary, Progress Note). This usually equates to the purpose of
     * making the composition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * A statement of relationships from one set of concepts to one or more other
   * concepts - either concepts in code systems, or data element/data element
   * concepts, or classes in class models.
   */
  export class ConceptMap extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ConceptMap";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the concept map and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the concept map.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the concept map was published. The
     * date must change when the business version changes and it must change if
     * the status code changes. In addition, it should change when the
     * substantive content of the concept map changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the concept map from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this concept map is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** A group of mappings that all have the same source and target system. */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this concept map when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A legal or geographic region in which the concept map is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the concept map. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the concept
     * map.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this concept map is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Identifier for the source value set that contains the concepts that are
     * being mapped and provides context for the mappings.
     */
    set source(value: Uri | Canonical) {
      this._content["source"] = value;
    }

    get sourceUri(): Uri {
      return this._content["source"] as Uri;
    }

    get sourceCanonical(): Canonical {
      return this._content["source"] as Canonical;
    }

    /**
     * The status of this concept map. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The target value set provides context for the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the value
     * set provides important context about how the concept mapping choices are
     * made.
     */
    set target(value: Uri | Canonical) {
      this._content["target"] = value;
    }

    get targetUri(): Uri {
      return this._content["target"] as Uri;
    }

    get targetCanonical(): Canonical {
      return this._content["target"] as Canonical;
    }

    /** A short, descriptive, user-friendly title for the concept map. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this concept map when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * concept map is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the concept map is
     * stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate concept map instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the concept map
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the concept map author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A clinical condition, problem, diagnosis, or other event, situation, issue,
   * or clinical concept that has risen to a level of concern.
   */
  export class Condition extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Condition";

    /**
     * The date or estimated date that the condition resolved or went into
     * remission. This is called "abatement" because of the many overloaded
     * connotations associated with "remission" or "resolution" - Conditions are
     * never really resolved, but they can abate.
     */
    set abatement(value: DateTime | Age | Period | Range | String) {
      this._content["abatement"] = value;
    }

    get abatementDateTime(): DateTime {
      return this._content["abatement"] as DateTime;
    }

    get abatementAge(): Age {
      return this._content["abatement"] as Age;
    }

    get abatementPeriod(): Period {
      return this._content["abatement"] as Period;
    }

    get abatementRange(): Range {
      return this._content["abatement"] as Range;
    }

    get abatementString(): String {
      return this._content["abatement"] as String;
    }

    /** Individual who is making the condition statement. */
    set asserter(value: Reference) {
      this._content["asserter"] = value;
    }

    get asserter(): Reference {
      return this._content["asserter"] as Reference;
    }

    /** The anatomical location where this condition manifests itself. */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /** A category assigned to the condition. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** The clinical status of the condition. */
    set clinicalStatus(value: CodeableConcept) {
      this._content["clinicalStatus"] = value;
    }

    get clinicalStatus(): CodeableConcept {
      return this._content["clinicalStatus"] as CodeableConcept;
    }

    /** Identification of the condition, problem or diagnosis. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * The Encounter during which this Condition was created or to which the
     * creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Supporting evidence / manifestations that are the basis of the
     * Condition's verification status, such as evidence that confirmed or
     * refuted the condition.
     */
    set evidence(value: Array<BackboneElement>) {
      this._content["evidence"] = value;
    }

    get evidence(): Array<BackboneElement> {
      return this._content["evidence"] as Array<BackboneElement>;
    }

    /**
     * Business identifiers assigned to this condition by the performer or other
     * systems which remain constant as the resource is updated and propagates
     * from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Additional information about the Condition. This is a general
     * notes/comments entry for description of the Condition, its diagnosis and
     * prognosis.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Estimated or actual date or date-time the condition began, in the opinion
     * of the clinician.
     */
    set onset(value: DateTime | Age | Period | Range | String) {
      this._content["onset"] = value;
    }

    get onsetDateTime(): DateTime {
      return this._content["onset"] as DateTime;
    }

    get onsetAge(): Age {
      return this._content["onset"] as Age;
    }

    get onsetPeriod(): Period {
      return this._content["onset"] as Period;
    }

    get onsetRange(): Range {
      return this._content["onset"] as Range;
    }

    get onsetString(): String {
      return this._content["onset"] as String;
    }

    /**
     * The recordedDate represents when this particular Condition record was
     * created in the system, which is often a system-generated date.
     */
    set recordedDate(value: DateTime) {
      this._content["recordedDate"] = value;
    }

    get recordedDate(): DateTime {
      return this._content["recordedDate"] as DateTime;
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * content.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /**
     * A subjective assessment of the severity of the condition as evaluated by
     * the clinician.
     */
    set severity(value: CodeableConcept) {
      this._content["severity"] = value;
    }

    get severity(): CodeableConcept {
      return this._content["severity"] as CodeableConcept;
    }

    /**
     * Clinical stage or grade of a condition. May include formal severity
     * assessments.
     */
    set stage(value: Array<BackboneElement>) {
      this._content["stage"] = value;
    }

    get stage(): Array<BackboneElement> {
      return this._content["stage"] as Array<BackboneElement>;
    }

    /**
     * Indicates the patient or group who the condition record is associated
     * with.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The verification status to support the clinical status of the condition. */
    set verificationStatus(value: CodeableConcept) {
      this._content["verificationStatus"] = value;
    }

    get verificationStatus(): CodeableConcept {
      return this._content["verificationStatus"] as CodeableConcept;
    }
  }

  /**
   * A record of a healthcare consumer’s choices, which permits or denies
   * identified recipient(s) or recipient role(s) to perform one or more actions
   * within a given policy context, for specific purposes and periods of time.
   */
  export class Consent extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Consent";

    /**
     * A classification of the type of consents found in the statement. This
     * element supports indexing and retrieval of consent statements.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** When this Consent was issued / created / indexed. */
    set dateTime(value: DateTime) {
      this._content["dateTime"] = value;
    }

    get dateTime(): DateTime {
      return this._content["dateTime"] as DateTime;
    }

    /** Unique identifier for this copy of the Consent Statement. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization that manages the consent, and the framework within which
     * it is executed.
     */
    set organization(value: Array<Reference>) {
      this._content["organization"] = value;
    }

    get organization(): Array<Reference> {
      return this._content["organization"] as Array<Reference>;
    }

    /** The patient/healthcare consumer to whom this consent applies. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Either the Grantor, which is the entity responsible for granting the
     * rights listed in a Consent Directive or the Grantee, which is the entity
     * responsible for complying with the Consent Directive, including any
     * obligations or limitations on authorizations and enforcement of
     * prohibitions.
     */
    set performer(value: Array<Reference>) {
      this._content["performer"] = value;
    }

    get performer(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    /**
     * The references to the policies that are included in this consent scope.
     * Policies may be organizational, but are often defined jurisdictionally,
     * or in law.
     */
    set policy(value: Array<BackboneElement>) {
      this._content["policy"] = value;
    }

    get policy(): Array<BackboneElement> {
      return this._content["policy"] as Array<BackboneElement>;
    }

    /** A reference to the specific base computable regulation or policy. */
    set policyRule(value: CodeableConcept) {
      this._content["policyRule"] = value;
    }

    get policyRule(): CodeableConcept {
      return this._content["policyRule"] as CodeableConcept;
    }

    /**
     * An exception to the base policy of this consent. An exception can be an
     * addition or removal of access permissions.
     */
    set provision(value: BackboneElement) {
      this._content["provision"] = value;
    }

    get provision(): BackboneElement {
      return this._content["provision"] as BackboneElement;
    }

    /**
     * A selector of the type of consent being presented: ADR, Privacy,
     * Treatment, Research. This list is now extensible.
     */
    set scope(value: CodeableConcept) {
      this._content["scope"] = value;
    }

    get scope(): CodeableConcept {
      return this._content["scope"] as CodeableConcept;
    }

    /**
     * The source on which this consent statement is based. The source might be
     * a scanned original paper form, or a reference to a consent that links
     * back to such a source, a reference to a document repository (e.g. XDS)
     * that stores the original consent document.
     */
    set source(value: Attachment | Reference) {
      this._content["source"] = value;
    }

    get sourceAttachment(): Attachment {
      return this._content["source"] as Attachment;
    }

    get sourceReference(): Reference {
      return this._content["source"] as Reference;
    }

    /** Indicates the current state of this consent. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Whether a treatment instruction (e.g. artificial respiration yes or no)
     * was verified with the patient, his/her family or another authorized
     * person.
     */
    set verification(value: Array<BackboneElement>) {
      this._content["verification"] = value;
    }

    get verification(): Array<BackboneElement> {
      return this._content["verification"] as Array<BackboneElement>;
    }
  }

  /**
   * Legally enforceable, formally recorded unilateral or bilateral directive
   * i.e., a policy or agreement.
   */
  export class Contract extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Contract";

    /**
     * Alternative representation of the title for this Contract definition,
     * derivative, or instance in any legal state., e.g., a domain specific
     * contract number related to legislation.
     */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /** Relevant time or time-period when this Contract is applicable. */
    set applies(value: Period) {
      this._content["applies"] = value;
    }

    get applies(): Period {
      return this._content["applies"] as Period;
    }

    /**
     * The individual or organization that authored the Contract definition,
     * derivative, or instance in any legal state.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * A formally or informally recognized grouping of people, principals,
     * organizations, or jurisdictions formed for the purpose of achieving some
     * form of collective action such as the promulgation, administration and
     * enforcement of contracts and policies.
     */
    set authority(value: Array<Reference>) {
      this._content["authority"] = value;
    }

    get authority(): Array<Reference> {
      return this._content["authority"] as Array<Reference>;
    }

    /**
     * Precusory content developed with a focus and intent of supporting the
     * formation a Contract instance, which may be associated with and
     * transformable into a Contract.
     */
    set contentDefinition(value: BackboneElement) {
      this._content["contentDefinition"] = value;
    }

    get contentDefinition(): BackboneElement {
      return this._content["contentDefinition"] as BackboneElement;
    }

    /**
     * The minimal content derived from the basal information source at a
     * specific stage in its lifecycle.
     */
    set contentDerivative(value: CodeableConcept) {
      this._content["contentDerivative"] = value;
    }

    get contentDerivative(): CodeableConcept {
      return this._content["contentDerivative"] as CodeableConcept;
    }

    /**
     * Recognized governance framework or system operating with a circumscribed
     * scope in accordance with specified principles, policies, processes or
     * procedures for managing rights, actions, or behaviors of parties or
     * principals relative to resources.
     */
    set domain(value: Array<Reference>) {
      this._content["domain"] = value;
    }

    get domain(): Array<Reference> {
      return this._content["domain"] as Array<Reference>;
    }

    /**
     * Event resulting in discontinuation or termination of this Contract
     * instance by one or more parties to the contract.
     */
    set expirationType(value: CodeableConcept) {
      this._content["expirationType"] = value;
    }

    get expirationType(): CodeableConcept {
      return this._content["expirationType"] as CodeableConcept;
    }

    /**
     * The "patient friendly language" versionof the Contract in whole or in
     * parts. "Patient friendly language" means the representation of the
     * Contract and Contract Provisions in a manner that is readily accessible
     * and understandable by a layperson in accordance with best practices for
     * communication styles that ensure that those agreeing to or signing the
     * Contract understand the roles, actions, obligations, responsibilities,
     * and implication of the agreement.
     */
    set friendly(value: Array<BackboneElement>) {
      this._content["friendly"] = value;
    }

    get friendly(): Array<BackboneElement> {
      return this._content["friendly"] as Array<BackboneElement>;
    }

    /**
     * Unique identifier for this Contract or a derivative that references a
     * Source Contract.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a FHIR-defined Contract Definition that is adhered to
     * in whole or part by this Contract.
     */
    set instantiatesCanonical(value: Reference) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Reference {
      return this._content["instantiatesCanonical"] as Reference;
    }

    /**
     * The URL pointing to an externally maintained definition that is adhered
     * to in whole or in part by this Contract.
     */
    set instantiatesUri(value: Uri) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Uri {
      return this._content["instantiatesUri"] as Uri;
    }

    /** When this Contract was issued. */
    set issued(value: DateTime) {
      this._content["issued"] = value;
    }

    get issued(): DateTime {
      return this._content["issued"] as DateTime;
    }

    /** List of Legal expressions or representations of this Contract. */
    set legal(value: Array<BackboneElement>) {
      this._content["legal"] = value;
    }

    get legal(): Array<BackboneElement> {
      return this._content["legal"] as Array<BackboneElement>;
    }

    /**
     * Legal states of the formation of a legal instrument, which is a formally
     * executed written document that can be formally attributed to its author,
     * records and formally expresses a legally enforceable act, process, or
     * contractual duty, obligation, or right, and therefore evidences that act,
     * process, or agreement.
     */
    set legalState(value: CodeableConcept) {
      this._content["legalState"] = value;
    }

    get legalState(): CodeableConcept {
      return this._content["legalState"] as CodeableConcept;
    }

    /**
     * Legally binding Contract: This is the signed and legally recognized
     * representation of the Contract, which is considered the "source of truth"
     * and which would be the basis for legal action related to enforcement of
     * this Contract.
     */
    set legallyBinding(value: Attachment | Reference) {
      this._content["legallyBinding"] = value;
    }

    get legallyBindingAttachment(): Attachment {
      return this._content["legallyBinding"] as Attachment;
    }

    get legallyBindingReference(): Reference {
      return this._content["legallyBinding"] as Reference;
    }

    /**
     * A natural language name identifying this Contract definition, derivative,
     * or instance in any legal state. Provides additional information about its
     * content. This name should be usable as an identifier for the module by
     * machine processing applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Links to Provenance records for past versions of this Contract
     * definition, derivative, or instance, which identify key state transitions
     * or updates that are likely to be relevant to a user looking at the
     * current version of the Contract. The Provence.entity indicates the target
     * that was changed in the update.
     * http://build.fhir.org/provenance-definitions.html#Provenance.entity.
     */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /** List of Computable Policy Rule Language Representations of this Contract. */
    set rule(value: Array<BackboneElement>) {
      this._content["rule"] = value;
    }

    get rule(): Array<BackboneElement> {
      return this._content["rule"] as Array<BackboneElement>;
    }

    /**
     * A selector of legal concerns for this Contract definition, derivative, or
     * instance in any legal state.
     */
    set scope(value: CodeableConcept) {
      this._content["scope"] = value;
    }

    get scope(): CodeableConcept {
      return this._content["scope"] as CodeableConcept;
    }

    /**
     * Parties with legal standing in the Contract, including the principal
     * parties, the grantor(s) and grantee(s), which are any person or
     * organization bound by the contract, and any ancillary parties, which
     * facilitate the execution of the contract such as a notary or witness.
     */
    set signer(value: Array<BackboneElement>) {
      this._content["signer"] = value;
    }

    get signer(): Array<BackboneElement> {
      return this._content["signer"] as Array<BackboneElement>;
    }

    /** Sites in which the contract is complied with, exercised, or in force. */
    set site(value: Array<Reference>) {
      this._content["site"] = value;
    }

    get site(): Array<Reference> {
      return this._content["site"] as Array<Reference>;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Sub-category for the Contract that distinguishes the kinds of systems
     * that would be interested in the Contract within the context of the
     * Contract's scope.
     */
    set subType(value: Array<CodeableConcept>) {
      this._content["subType"] = value;
    }

    get subType(): Array<CodeableConcept> {
      return this._content["subType"] as Array<CodeableConcept>;
    }

    /** The target entity impacted by or of interest to parties to the agreement. */
    set subject(value: Array<Reference>) {
      this._content["subject"] = value;
    }

    get subject(): Array<Reference> {
      return this._content["subject"] as Array<Reference>;
    }

    /**
     * An explanatory or alternate user-friendly title for this Contract
     * definition, derivative, or instance in any legal state.t giving
     * additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /**
     * Information that may be needed by/relevant to the performer in their
     * execution of this term action.
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }

    /**
     * One or more Contract Provisions, which may be related and conveyed as a
     * group, and may contain nested groups.
     */
    set term(value: Array<BackboneElement>) {
      this._content["term"] = value;
    }

    get term(): Array<BackboneElement> {
      return this._content["term"] as Array<BackboneElement>;
    }

    /**
     * A short, descriptive, user-friendly title for this Contract definition,
     * derivative, or instance in any legal state.t giving additional
     * information about its content.
     */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Narrows the range of legal concerns to focus on the achievement of
     * specific contractual objectives.
     */
    set topic(value: CodeableConcept | Reference) {
      this._content["topic"] = value;
    }

    get topicCodeableConcept(): CodeableConcept {
      return this._content["topic"] as CodeableConcept;
    }

    get topicReference(): Reference {
      return this._content["topic"] as Reference;
    }

    /**
     * A high-level category for the legal instrument, whether constructed as a
     * Contract definition, derivative, or instance in any legal state. Provides
     * additional information about its content within the context of the
     * Contract's scope to distinguish the kinds of systems that would be
     * interested in the contract.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Canonical identifier for this contract, represented as a URI (globally
     * unique).
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * An edition identifier used for business purposes to label business
     * significant variants.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Financial instrument which may be used to reimburse or pay for health care
   * products and services. Includes both insurance and self-payment.
   */
  export class Coverage extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Coverage";

    /**
     * The party who benefits from the insurance coverage; the patient when
     * products and/or services are provided.
     */
    set beneficiary(value: Reference) {
      this._content["beneficiary"] = value;
    }

    get beneficiary(): Reference {
      return this._content["beneficiary"] as Reference;
    }

    /** A suite of underwriter specific classifiers. */
    set class(value: Array<BackboneElement>) {
      this._content["class"] = value;
    }

    get class(): Array<BackboneElement> {
      return this._content["class"] as Array<BackboneElement>;
    }

    /** The policy(s) which constitute this insurance coverage. */
    set contract(value: Array<Reference>) {
      this._content["contract"] = value;
    }

    get contract(): Array<Reference> {
      return this._content["contract"] as Array<Reference>;
    }

    /**
     * A suite of codes indicating the cost category and associated amount which
     * have been detailed in the policy and may have been included on the health
     * card.
     */
    set costToBeneficiary(value: Array<BackboneElement>) {
      this._content["costToBeneficiary"] = value;
    }

    get costToBeneficiary(): Array<BackboneElement> {
      return this._content["costToBeneficiary"] as Array<BackboneElement>;
    }

    /** A unique identifier for a dependent under the coverage. */
    set dependent(value: String) {
      this._content["dependent"] = value;
    }

    get dependent(): String {
      return this._content["dependent"] as String;
    }

    /** A unique identifier assigned to this coverage. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The insurer-specific identifier for the insurer-defined network of
     * providers to which the beneficiary may seek treatment which will be
     * covered at the 'in-network' rate, otherwise 'out of network' terms and
     * conditions apply.
     */
    set network(value: String) {
      this._content["network"] = value;
    }

    get network(): String {
      return this._content["network"] as String;
    }

    /**
     * The order of applicability of this coverage relative to other coverages
     * which are currently in force. Note, there may be gaps in the numbering
     * and this does not imply primary, secondary etc. as the specific
     * positioning of coverages depends upon the episode of care.
     */
    set order(value: PositiveInt) {
      this._content["order"] = value;
    }

    get order(): PositiveInt {
      return this._content["order"] as PositiveInt;
    }

    /**
     * The program or plan underwriter or payor including both insurance and
     * non-insurance agreements, such as patient-pay agreements.
     */
    set payor(value: Array<Reference>) {
      this._content["payor"] = value;
    }

    get payor(): Array<Reference> {
      return this._content["payor"] as Array<Reference>;
    }

    /**
     * Time period during which the coverage is in force. A missing start date
     * indicates the start date isn't known, a missing end date means the
     * coverage is continuing to be in force.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The party who 'owns' the insurance policy. */
    set policyHolder(value: Reference) {
      this._content["policyHolder"] = value;
    }

    get policyHolder(): Reference {
      return this._content["policyHolder"] as Reference;
    }

    /** The relationship of beneficiary (patient) to the subscriber. */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * When 'subrogation=true' this insurance instance has been included not for
     * adjudication but to provide insurers with the details to recover costs.
     */
    set subrogation(value: Boolean) {
      this._content["subrogation"] = value;
    }

    get subrogation(): Boolean {
      return this._content["subrogation"] as Boolean;
    }

    /**
     * The party who has signed-up for or 'owns' the contractual relationship to
     * the policy or to whom the benefit of the policy for services rendered to
     * them or their family is due.
     */
    set subscriber(value: Reference) {
      this._content["subscriber"] = value;
    }

    get subscriber(): Reference {
      return this._content["subscriber"] as Reference;
    }

    /** The insurer assigned ID for the Subscriber. */
    set subscriberId(value: String) {
      this._content["subscriberId"] = value;
    }

    get subscriberId(): String {
      return this._content["subscriberId"] as String;
    }

    /**
     * The type of coverage: social program, medical plan, accident coverage
     * (workers compensation, auto), group health or payment by an individual or
     * organization.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * The CoverageEligibilityRequest provides patient and insurance coverage
   * information to an insurer for them to respond, in the form of an
   * CoverageEligibilityResponse, with information regarding whether the stated
   * coverage is valid and in-force and optionally to provide the insurance
   * details of the policy.
   */
  export class CoverageEligibilityRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest";

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Person who created the request. */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** Facility where the services are intended to be provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /** A unique identifier assigned to this coverage eligiblity request. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Financial instruments for reimbursement for the health care products and
     * services.
     */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /**
     * The Insurer who issued the coverage in question and is the recipient of
     * the request.
     */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * Service categories or billable services for which benefit details and/or
     * an authorization prior to service delivery may be required by the payor.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * The party who is the beneficiary of the supplied coverage and for whom
     * eligibility is sought.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** When the requestor expects the processor to complete processing. */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /** The provider which is responsible for the request. */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /**
     * Code to specify whether requesting: prior authorization requirements for
     * some service categories or billing codes; benefits for coverages
     * specified or discovered; discovery and return of coverages for the
     * patient; and/or validation that the specified coverage is in-force at the
     * date/period specified or 'now' if not specified.
     */
    set purpose(value: Array<Code>) {
      this._content["purpose"] = value;
    }

    get purpose(): Array<Code> {
      return this._content["purpose"] as Array<Code>;
    }

    /**
     * The date or dates when the enclosed suite of services were performed or
     * completed.
     */
    set serviced(value: Date | Period) {
      this._content["serviced"] = value;
    }

    get servicedDate(): Date {
      return this._content["serviced"] as Date;
    }

    get servicedPeriod(): Period {
      return this._content["serviced"] as Period;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Additional information codes regarding exceptions, special
     * considerations, the condition, situation, prior or concurrent issues.
     */
    set supportingInfo(value: Array<BackboneElement>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<BackboneElement> {
      return this._content["supportingInfo"] as Array<BackboneElement>;
    }
  }

  /**
   * This resource provides eligibility and plan details from the processing of
   * an CoverageEligibilityRequest resource.
   */
  export class CoverageEligibilityResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse";

    /** The date this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A human readable description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Errors encountered during the processing of the request. */
    set error(value: Array<BackboneElement>) {
      this._content["error"] = value;
    }

    get error(): Array<BackboneElement> {
      return this._content["error"] as Array<BackboneElement>;
    }

    /** A code for the form to be used for printing the content. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** A unique identifier assigned to this coverage eligiblity request. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Financial instruments for reimbursement for the health care products and
     * services.
     */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /**
     * The Insurer who issued the coverage in question and is the author of the
     * response.
     */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /** The outcome of the request processing. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /**
     * The party who is the beneficiary of the supplied coverage and for whom
     * eligibility is sought.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * A reference from the Insurer to which these services pertain to be used
     * on further communication and as proof that the request occurred.
     */
    set preAuthRef(value: String) {
      this._content["preAuthRef"] = value;
    }

    get preAuthRef(): String {
      return this._content["preAuthRef"] as String;
    }

    /**
     * Code to specify whether requesting: prior authorization requirements for
     * some service categories or billing codes; benefits for coverages
     * specified or discovered; discovery and return of coverages for the
     * patient; and/or validation that the specified coverage is in-force at the
     * date/period specified or 'now' if not specified.
     */
    set purpose(value: Array<Code>) {
      this._content["purpose"] = value;
    }

    get purpose(): Array<Code> {
      return this._content["purpose"] as Array<Code>;
    }

    /** Reference to the original request resource. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** The provider which is responsible for the request. */
    set requestor(value: Reference) {
      this._content["requestor"] = value;
    }

    get requestor(): Reference {
      return this._content["requestor"] as Reference;
    }

    /**
     * The date or dates when the enclosed suite of services were performed or
     * completed.
     */
    set serviced(value: Date | Period) {
      this._content["serviced"] = value;
    }

    get servicedDate(): Date {
      return this._content["serviced"] as Date;
    }

    get servicedPeriod(): Period {
      return this._content["serviced"] as Period;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * Indicates an actual or potential clinical issue with or between one or more
   * active or proposed clinical actions for a patient; e.g. Drug-drug
   * interaction, Ineffective treatment frequency, Procedure-condition conflict,
   * etc.
   */
  export class DetectedIssue extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DetectedIssue";

    /**
     * Individual or device responsible for the issue being raised. For example,
     * a decision support application or a pharmacist conducting a medication
     * review.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** Identifies the general type of issue identified. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A textual explanation of the detected issue. */
    set detail(value: String) {
      this._content["detail"] = value;
    }

    get detail(): String {
      return this._content["detail"] as String;
    }

    /**
     * Supporting evidence or manifestations that provide the basis for
     * identifying the detected issue such as a GuidanceResponse or
     * MeasureReport.
     */
    set evidence(value: Array<BackboneElement>) {
      this._content["evidence"] = value;
    }

    get evidence(): Array<BackboneElement> {
      return this._content["evidence"] as Array<BackboneElement>;
    }

    /** The date or period when the detected issue was initially identified. */
    set identified(value: DateTime | Period) {
      this._content["identified"] = value;
    }

    get identifiedDateTime(): DateTime {
      return this._content["identified"] as DateTime;
    }

    get identifiedPeriod(): Period {
      return this._content["identified"] as Period;
    }

    /** Business identifier associated with the detected issue record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Indicates the resource representing the current activity or proposed
     * activity that is potentially problematic.
     */
    set implicated(value: Array<Reference>) {
      this._content["implicated"] = value;
    }

    get implicated(): Array<Reference> {
      return this._content["implicated"] as Array<Reference>;
    }

    /**
     * Indicates an action that has been taken or is committed to reduce or
     * eliminate the likelihood of the risk identified by the detected issue
     * from manifesting. Can also reflect an observation of known mitigating
     * factors that may reduce/eliminate the need for any action.
     */
    set mitigation(value: Array<BackboneElement>) {
      this._content["mitigation"] = value;
    }

    get mitigation(): Array<BackboneElement> {
      return this._content["mitigation"] as Array<BackboneElement>;
    }

    /** Indicates the patient whose record the detected issue is associated with. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The literature, knowledge-base or similar reference that describes the
     * propensity for the detected issue identified.
     */
    set reference(value: Uri) {
      this._content["reference"] = value;
    }

    get reference(): Uri {
      return this._content["reference"] as Uri;
    }

    /**
     * Indicates the degree of importance associated with the identified issue
     * based on the potential impact on the patient.
     */
    set severity(value: Code) {
      this._content["severity"] = value;
    }

    get severity(): Code {
      return this._content["severity"] as Code;
    }

    /** Indicates the status of the detected issue. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * A type of a manufactured item that is used in the provision of healthcare
   * without being substantially changed through that activity. The device may
   * be a medical or non-medical device.
   */
  export class Device extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Device";

    /**
     * Contact details for an organization or a particular human that is
     * responsible for the device.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /** The reference to the definition for the device. */
    set definition(value: Reference) {
      this._content["definition"] = value;
    }

    get definition(): Reference {
      return this._content["definition"] as Reference;
    }

    /**
     * This represents the manufacturer's name of the device as provided by the
     * device, from a UDI label, or by a person describing the Device. This
     * typically would be used when a person provides the name(s) or when the
     * device represents one of the names available from DeviceDefinition.
     */
    set deviceName(value: Array<BackboneElement>) {
      this._content["deviceName"] = value;
    }

    get deviceName(): Array<BackboneElement> {
      return this._content["deviceName"] as Array<BackboneElement>;
    }

    /**
     * The distinct identification string as required by regulation for a human
     * cell, tissue, or cellular and tissue-based product.
     */
    set distinctIdentifier(value: String) {
      this._content["distinctIdentifier"] = value;
    }

    get distinctIdentifier(): String {
      return this._content["distinctIdentifier"] as String;
    }

    /**
     * The date and time beyond which this device is no longer valid or should
     * not be used (if applicable).
     */
    set expirationDate(value: DateTime) {
      this._content["expirationDate"] = value;
    }

    get expirationDate(): DateTime {
      return this._content["expirationDate"] as DateTime;
    }

    /**
     * Unique instance identifiers assigned to a device by manufacturers other
     * organizations or owners.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The place where the device can be found. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Lot number assigned by the manufacturer. */
    set lotNumber(value: String) {
      this._content["lotNumber"] = value;
    }

    get lotNumber(): String {
      return this._content["lotNumber"] as String;
    }

    /** The date and time when the device was manufactured. */
    set manufactureDate(value: DateTime) {
      this._content["manufactureDate"] = value;
    }

    get manufactureDate(): DateTime {
      return this._content["manufactureDate"] as DateTime;
    }

    /** A name of the manufacturer. */
    set manufacturer(value: String) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): String {
      return this._content["manufacturer"] as String;
    }

    /** The manufacturer's model number for the device. */
    set modelNumber(value: String) {
      this._content["modelNumber"] = value;
    }

    get modelNumber(): String {
      return this._content["modelNumber"] as String;
    }

    /**
     * Descriptive information, usage information or implantation information
     * that is not captured in an existing element.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * An organization that is responsible for the provision and ongoing
     * maintenance of the device.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** The device that this device is attached to or is part of. */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /** The part number or catalog number of the device. */
    set partNumber(value: String) {
      this._content["partNumber"] = value;
    }

    get partNumber(): String {
      return this._content["partNumber"] as String;
    }

    /** Patient information, If the device is affixed to a person. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The actual configuration settings of a device as it actually operates,
     * e.g., regulation status, time properties.
     */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /**
     * Provides additional safety characteristics about a medical device. For
     * example devices containing latex.
     */
    set safety(value: Array<CodeableConcept>) {
      this._content["safety"] = value;
    }

    get safety(): Array<CodeableConcept> {
      return this._content["safety"] as Array<CodeableConcept>;
    }

    /**
     * The serial number assigned by the organization when the device was
     * manufactured.
     */
    set serialNumber(value: String) {
      this._content["serialNumber"] = value;
    }

    get serialNumber(): String {
      return this._content["serialNumber"] as String;
    }

    /**
     * The capabilities supported on a device, the standards to which the device
     * conforms for a particular purpose, and used for the communication.
     */
    set specialization(value: Array<BackboneElement>) {
      this._content["specialization"] = value;
    }

    get specialization(): Array<BackboneElement> {
      return this._content["specialization"] as Array<BackboneElement>;
    }

    /** Status of the Device availability. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Reason for the dtatus of the Device availability. */
    set statusReason(value: Array<CodeableConcept>) {
      this._content["statusReason"] = value;
    }

    get statusReason(): Array<CodeableConcept> {
      return this._content["statusReason"] as Array<CodeableConcept>;
    }

    /** The kind or type of device. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Unique device identifier (UDI) assigned to device label or package. Note
     * that the Device may include multiple udiCarriers as it either may include
     * just the udiCarrier for the jurisdiction it is sold, or for multiple
     * jurisdictions it could have been sold.
     */
    set udiCarrier(value: Array<BackboneElement>) {
      this._content["udiCarrier"] = value;
    }

    get udiCarrier(): Array<BackboneElement> {
      return this._content["udiCarrier"] as Array<BackboneElement>;
    }

    /** A network address on which the device may be contacted directly. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The actual design of the device or software version running on the
     * device.
     */
    set version(value: Array<BackboneElement>) {
      this._content["version"] = value;
    }

    get version(): Array<BackboneElement> {
      return this._content["version"] as Array<BackboneElement>;
    }
  }

  /**
   * The characteristics, operational status and capabilities of a
   * medical-related component of a medical device.
   */
  export class DeviceDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceDefinition";

    /** Device capabilities. */
    set capability(value: Array<BackboneElement>) {
      this._content["capability"] = value;
    }

    get capability(): Array<BackboneElement> {
      return this._content["capability"] as Array<BackboneElement>;
    }

    /**
     * Contact details for an organization or a particular human that is
     * responsible for the device.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /** A name given to the device to identify it. */
    set deviceName(value: Array<BackboneElement>) {
      this._content["deviceName"] = value;
    }

    get deviceName(): Array<BackboneElement> {
      return this._content["deviceName"] as Array<BackboneElement>;
    }

    /**
     * Unique instance identifiers assigned to a device by the software,
     * manufacturers, other organizations or owners. For example: handle ID.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Language code for the human-readable text strings produced by the device
     * (all supported).
     */
    set languageCode(value: Array<CodeableConcept>) {
      this._content["languageCode"] = value;
    }

    get languageCode(): Array<CodeableConcept> {
      return this._content["languageCode"] as Array<CodeableConcept>;
    }

    /** A name of the manufacturer. */
    set manufacturer(value: String | Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturerString(): String {
      return this._content["manufacturer"] as String;
    }

    get manufacturerReference(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /** A substance used to create the material(s) of which the device is made. */
    set material(value: Array<BackboneElement>) {
      this._content["material"] = value;
    }

    get material(): Array<BackboneElement> {
      return this._content["material"] as Array<BackboneElement>;
    }

    /** The model number for the device. */
    set modelNumber(value: String) {
      this._content["modelNumber"] = value;
    }

    get modelNumber(): String {
      return this._content["modelNumber"] as String;
    }

    /**
     * Descriptive information, usage information or implantation information
     * that is not captured in an existing element.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Access to on-line information about the device. */
    set onlineInformation(value: Uri) {
      this._content["onlineInformation"] = value;
    }

    get onlineInformation(): Uri {
      return this._content["onlineInformation"] as Uri;
    }

    /**
     * An organization that is responsible for the provision and ongoing
     * maintenance of the device.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** The parent device it can be part of. */
    set parentDevice(value: Reference) {
      this._content["parentDevice"] = value;
    }

    get parentDevice(): Reference {
      return this._content["parentDevice"] as Reference;
    }

    /** Dimensions, color etc. */
    set physicalCharacteristics(value: ProdCharacteristic) {
      this._content["physicalCharacteristics"] = value;
    }

    get physicalCharacteristics(): ProdCharacteristic {
      return this._content["physicalCharacteristics"] as ProdCharacteristic;
    }

    /**
     * The actual configuration settings of a device as it actually operates,
     * e.g., regulation status, time properties.
     */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /**
     * The quantity of the device present in the packaging (e.g. the number of
     * devices present in a pack, or the number of devices in the same package
     * of the medicinal product).
     */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /** Safety characteristics of the device. */
    set safety(value: Array<CodeableConcept>) {
      this._content["safety"] = value;
    }

    get safety(): Array<CodeableConcept> {
      return this._content["safety"] as Array<CodeableConcept>;
    }

    /** Shelf Life and storage information. */
    set shelfLifeStorage(value: Array<ProductShelfLife>) {
      this._content["shelfLifeStorage"] = value;
    }

    get shelfLifeStorage(): Array<ProductShelfLife> {
      return this._content["shelfLifeStorage"] as Array<ProductShelfLife>;
    }

    /**
     * The capabilities supported on a device, the standards to which the device
     * conforms for a particular purpose, and used for the communication.
     */
    set specialization(value: Array<BackboneElement>) {
      this._content["specialization"] = value;
    }

    get specialization(): Array<BackboneElement> {
      return this._content["specialization"] as Array<BackboneElement>;
    }

    /** What kind of device or device system this is. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Unique device identifier (UDI) assigned to device label or package. Note
     * that the Device may include multiple udiCarriers as it either may include
     * just the udiCarrier for the jurisdiction it is sold, or for multiple
     * jurisdictions it could have been sold.
     */
    set udiDeviceIdentifier(value: Array<BackboneElement>) {
      this._content["udiDeviceIdentifier"] = value;
    }

    get udiDeviceIdentifier(): Array<BackboneElement> {
      return this._content["udiDeviceIdentifier"] as Array<BackboneElement>;
    }

    /** A network address on which the device may be contacted directly. */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /** The available versions of the device, e.g., software versions. */
    set version(value: Array<String>) {
      this._content["version"] = value;
    }

    get version(): Array<String> {
      return this._content["version"] as Array<String>;
    }
  }

  /**
   * Describes a measurement, calculation or setting capability of a medical
   * device.
   */
  export class DeviceMetric extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/DeviceMetric";

    /**
     * Describes the calibrations that have been performed or that are required
     * to be performed.
     */
    set calibration(value: Array<BackboneElement>) {
      this._content["calibration"] = value;
    }

    get calibration(): Array<BackboneElement> {
      return this._content["calibration"] as Array<BackboneElement>;
    }

    /**
     * Indicates the category of the observation generation process. A
     * DeviceMetric can be for example a setting, measurement, or calculation.
     */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /**
     * Describes the color representation for the metric. This is often used to
     * aid clinicians to track and identify parameter types by color. In
     * practice, consider a Patient Monitor that has ECG/HR and Pleth for
     * example; the parameters are displayed in different characteristic colors,
     * such as HR-blue, BP-green, and PR and SpO2- magenta.
     */
    set color(value: Code) {
      this._content["color"] = value;
    }

    get color(): Code {
      return this._content["color"] as Code;
    }

    /**
     * Unique instance identifiers assigned to a device by the device or gateway
     * software, manufacturers, other organizations or owners. For example:
     * handle ID.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Describes the measurement repetition time. This is not necessarily the
     * same as the update period. The measurement repetition time can range from
     * milliseconds up to hours. An example for a measurement repetition time in
     * the range of milliseconds is the sampling rate of an ECG. An example for
     * a measurement repetition time in the range of hours is a NIBP that is
     * triggered automatically every hour. The update period may be different
     * than the measurement repetition time, if the device does not update the
     * published observed value with the same frequency as it was measured.
     */
    set measurementPeriod(value: Timing) {
      this._content["measurementPeriod"] = value;
    }

    get measurementPeriod(): Timing {
      return this._content["measurementPeriod"] as Timing;
    }

    /**
     * Indicates current operational state of the device. For example: On, Off,
     * Standby, etc.
     */
    set operationalStatus(value: Code) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Code {
      return this._content["operationalStatus"] as Code;
    }

    /**
     * Describes the link to the Device that this DeviceMetric belongs to and
     * that provide information about the location of this DeviceMetric in the
     * containment structure of the parent Device. An example would be a Device
     * that represents a Channel. This reference can be used by a client
     * application to distinguish DeviceMetrics that have the same type, but
     * should be interpreted based on their containment location.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /**
     * Describes the link to the Device that this DeviceMetric belongs to and
     * that contains administrative device information such as manufacturer,
     * serial number, etc.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * Describes the type of the metric. For example: Heart Rate, PEEP Setting,
     * etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Describes the unit that an observed value determined for this metric will
     * have. For example: Percent, Seconds, etc.
     */
    set unit(value: CodeableConcept) {
      this._content["unit"] = value;
    }

    get unit(): CodeableConcept {
      return this._content["unit"] as CodeableConcept;
    }
  }

  /**
   * Represents a request for a patient to employ a medical device. The device
   * may be an implantable device, or an external assistive device, such as a
   * walker.
   */
  export class DeviceRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceRequest";

    /** When the request transitioned to being actionable. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /** Plan/proposal/order fulfilled by this request. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** The details of the device to be used. */
    set code(value: Reference | CodeableConcept) {
      this._content["code"] = value;
    }

    get codeReference(): Reference {
      return this._content["code"] as Reference;
    }

    get codeCodeableConcept(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * An encounter that provides additional context in which this request is
     * made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Composite request this is part of. */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /** Identifiers assigned to this order by the orderer or by the receiver. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
     * definition that is adhered to in whole or in part by this DeviceRequest.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this DeviceRequest.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be required for delivering the requested
     * service.
     */
    set insurance(value: Array<Reference>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<Reference> {
      return this._content["insurance"] as Array<Reference>;
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Details about this request that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated with
     * the statement.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. "Every 8 hours"; "Three
     * times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec
     * 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    set occurrence(value: DateTime | Period | Timing) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    get occurrenceTiming(): Timing {
      return this._content["occurrence"] as Timing;
    }

    /**
     * Specific parameters for the ordered item. For example, the prism value
     * for lenses.
     */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }

    /** The desired performer for doing the diagnostic testing. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Desired type of performer for doing the diagnostic testing. */
    set performerType(value: CodeableConcept) {
      this._content["performerType"] = value;
    }

    get performerType(): CodeableConcept {
      return this._content["performerType"] as CodeableConcept;
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    set priorRequest(value: Array<Reference>) {
      this._content["priorRequest"] = value;
    }

    get priorRequest(): Array<Reference> {
      return this._content["priorRequest"] as Array<Reference>;
    }

    /**
     * Indicates how quickly the DeviceRequest should be addressed with respect
     * to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** Reason or justification for the use of this device. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Reason or justification for the use of this device. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** Key events in the history of the request. */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /** The status of the request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient who will use the device. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Additional clinical information about the patient that may influence the
     * request fulfilment. For example, this may include where on the subject's
     * body the device will be used (i.e. the target site).
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }
  }

  /**
   * A record of a device being used by a patient where the record is the result
   * of a report from the patient or another clinician.
   */
  export class DeviceUseStatement extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DeviceUseStatement";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * DeviceUseStatement.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the anotomic location on the subject's body where the device
     * was used ( i.e. the target).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /**
     * Allows linking the DeviceUseStatement to the underlying Request, or to
     * other information that supports or is used to derive the
     * DeviceUseStatement.
     */
    set derivedFrom(value: Array<Reference>) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Array<Reference> {
      return this._content["derivedFrom"] as Array<Reference>;
    }

    /** The details of the device used. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /** An external identifier for this statement such as an IRI. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Details about the device statement that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated with
     * the statement.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Reason or justification for the use of the device. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Indicates another resource whose existence justifies this
     * DeviceUseStatement.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** The time at which the statement was made/recorded. */
    set recordedOn(value: DateTime) {
      this._content["recordedOn"] = value;
    }

    get recordedOn(): DateTime {
      return this._content["recordedOn"] as DateTime;
    }

    /** Who reported the device was being used by the patient. */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the device used that this statement is about. Generally this
     * will be active or completed.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient who used the device. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** How often the device was used. */
    set timing(value: Timing | Period | DateTime) {
      this._content["timing"] = value;
    }

    get timingTiming(): Timing {
      return this._content["timing"] as Timing;
    }

    get timingPeriod(): Period {
      return this._content["timing"] as Period;
    }

    get timingDateTime(): DateTime {
      return this._content["timing"] as DateTime;
    }
  }

  /**
   * The findings and interpretation of diagnostic tests performed on patients,
   * groups of patients, devices, and locations, and/or specimens derived from
   * these. The report includes clinical context such as requesting and provider
   * information, and some mix of atomic results, images, textual and coded
   * interpretations, and formatted representation of diagnostic reports.
   */
  export class DiagnosticReport extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DiagnosticReport";

    /** Details concerning a service requested. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * A code that classifies the clinical discipline, department or diagnostic
     * service that created the report (e.g. cardiology, biochemistry,
     * hematology, MRI). This is used for searching, sorting and display
     * purposes.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** A code or name that describes this diagnostic report. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Concise and clinically contextualized summary conclusion
     * (interpretation/impression) of the diagnostic report.
     */
    set conclusion(value: String) {
      this._content["conclusion"] = value;
    }

    get conclusion(): String {
      return this._content["conclusion"] as String;
    }

    /**
     * One or more codes that represent the summary conclusion
     * (interpretation/impression) of the diagnostic report.
     */
    set conclusionCode(value: Array<CodeableConcept>) {
      this._content["conclusionCode"] = value;
    }

    get conclusionCode(): Array<CodeableConcept> {
      return this._content["conclusionCode"] as Array<CodeableConcept>;
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source of
     * the date/time is not known, only the date/time itself.
     */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * which this DiagnosticReport is about.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Identifiers assigned to this report by the performer or other systems. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * One or more links to full details of any imaging performed during the
     * diagnostic investigation. Typically, this is imaging performed by DICOM
     * enabled modalities, but this is not required. A fully enabled PACS viewer
     * can use this information to provide views of the source images.
     */
    set imagingStudy(value: Array<Reference>) {
      this._content["imagingStudy"] = value;
    }

    get imagingStudy(): Array<Reference> {
      return this._content["imagingStudy"] as Array<Reference>;
    }

    /**
     * The date and time that this version of the report was made available to
     * providers, typically after the report was reviewed and verified.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /**
     * A list of key images associated with this report. The images are
     * generally created during the diagnostic process, and may be directly of
     * the patient, or of treated specimens (i.e. slides of interest).
     */
    set media(value: Array<BackboneElement>) {
      this._content["media"] = value;
    }

    get media(): Array<BackboneElement> {
      return this._content["media"] as Array<BackboneElement>;
    }

    /** The diagnostic service that is responsible for issuing the report. */
    set performer(value: Array<Reference>) {
      this._content["performer"] = value;
    }

    get performer(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    /**
     * Rich text representation of the entire result as issued by the diagnostic
     * service. Multiple formats are allowed but they SHALL be semantically
     * equivalent.
     */
    set presentedForm(value: Array<Attachment>) {
      this._content["presentedForm"] = value;
    }

    get presentedForm(): Array<Attachment> {
      return this._content["presentedForm"] as Array<Attachment>;
    }

    /** [Observations](observation.html) that are part of this diagnostic report. */
    set result(value: Array<Reference>) {
      this._content["result"] = value;
    }

    get result(): Array<Reference> {
      return this._content["result"] as Array<Reference>;
    }

    /**
     * The practitioner or organization that is responsible for the report's
     * conclusions and interpretations.
     */
    set resultsInterpreter(value: Array<Reference>) {
      this._content["resultsInterpreter"] = value;
    }

    get resultsInterpreter(): Array<Reference> {
      return this._content["resultsInterpreter"] as Array<Reference>;
    }

    /** Details about the specimens on which this diagnostic report is based. */
    set specimen(value: Array<Reference>) {
      this._content["specimen"] = value;
    }

    get specimen(): Array<Reference> {
      return this._content["specimen"] as Array<Reference>;
    }

    /** The status of the diagnostic report. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The subject of the report. Usually, but not always, this is a patient.
     * However, diagnostic services also perform analyses on specimens collected
     * from a variety of other sources.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * A collection of documents compiled for a purpose together with metadata
   * that applies to the collection.
   */
  export class DocumentManifest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DocumentManifest";

    /**
     * Identifies who is the author of the manifest. Manifest author is not
     * necessarly the author of the references included.
     */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /** The list of Resources that consist of the parts of this manifest. */
    set content(value: Array<Reference>) {
      this._content["content"] = value;
    }

    get content(): Array<Reference> {
      return this._content["content"] as Array<Reference>;
    }

    /**
     * When the document manifest was created for submission to the server (not
     * necessarily the same thing as the actual resource last modified time,
     * since it may be modified, replicated, etc.).
     */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /**
     * Human-readable description of the source document. This is sometimes
     * known as the "title".
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Other identifiers associated with the document manifest, including
     * version independent identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A single identifier that uniquely identifies this manifest. Principally
     * used to refer to the manifest in non-FHIR contexts.
     */
    set masterIdentifier(value: Identifier) {
      this._content["masterIdentifier"] = value;
    }

    get masterIdentifier(): Identifier {
      return this._content["masterIdentifier"] as Identifier;
    }

    /**
     * A patient, practitioner, or organization for which this set of documents
     * is intended.
     */
    set recipient(value: Array<Reference>) {
      this._content["recipient"] = value;
    }

    get recipient(): Array<Reference> {
      return this._content["recipient"] as Array<Reference>;
    }

    /** Related identifiers or resources associated with the DocumentManifest. */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /**
     * Identifies the source system, application, or software that produced the
     * document manifest.
     */
    set source(value: Uri) {
      this._content["source"] = value;
    }

    get source(): Uri {
      return this._content["source"] as Uri;
    }

    /** The status of this document manifest. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Who or what the set of documents is about. The documents can be about a
     * person, (patient or healthcare practitioner), a device (i.e. machine) or
     * even a group of subjects (such as a document about a herd of farm
     * animals, or a set of patients that share a common exposure). If the
     * documents cross more than one subject, then more than one subject is
     * allowed here (unusual use case).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The code specifying the type of clinical activity that resulted in
     * placing the associated content into the DocumentManifest.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * A reference to a document of any kind for any purpose. Provides metadata
   * about the document so that the document can be discovered and managed. The
   * scope of a document is any seralized object with a mime-type, so includes
   * formal patient centric documents (CDA), cliical notes, scanned paper, and
   * non-patient specific documents like policy text.
   */
  export class DocumentReference extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/DocumentReference";

    /** Which person or organization authenticates that this document is valid. */
    set authenticator(value: Reference) {
      this._content["authenticator"] = value;
    }

    get authenticator(): Reference {
      return this._content["authenticator"] as Reference;
    }

    /** Identifies who is responsible for adding the information to the document. */
    set author(value: Array<Reference>) {
      this._content["author"] = value;
    }

    get author(): Array<Reference> {
      return this._content["author"] as Array<Reference>;
    }

    /**
     * A categorization for the type of document referenced - helps for indexing
     * and searching. This may be implied by or derived from the code specified
     * in the DocumentReference.type.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The document and format referenced. There may be multiple content element
     * repetitions, each with a different format.
     */
    set content(value: Array<BackboneElement>) {
      this._content["content"] = value;
    }

    get content(): Array<BackboneElement> {
      return this._content["content"] as Array<BackboneElement>;
    }

    /** The clinical context in which the document was prepared. */
    set context(value: BackboneElement) {
      this._content["context"] = value;
    }

    get context(): BackboneElement {
      return this._content["context"] as BackboneElement;
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the document.
     */
    set custodian(value: Reference) {
      this._content["custodian"] = value;
    }

    get custodian(): Reference {
      return this._content["custodian"] as Reference;
    }

    /** When the document reference was created. */
    set date(value: Instant) {
      this._content["date"] = value;
    }

    get date(): Instant {
      return this._content["date"] as Instant;
    }

    /** Human-readable description of the source document. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** The status of the underlying document. */
    set docStatus(value: Code) {
      this._content["docStatus"] = value;
    }

    get docStatus(): Code {
      return this._content["docStatus"] as Code;
    }

    /**
     * Other identifiers associated with the document, including version
     * independent identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Document identifier as assigned by the source of the document. This
     * identifier is specific to this version of the document. This unique
     * identifier may be used elsewhere to identify this version of the
     * document.
     */
    set masterIdentifier(value: Identifier) {
      this._content["masterIdentifier"] = value;
    }

    get masterIdentifier(): Identifier {
      return this._content["masterIdentifier"] as Identifier;
    }

    /**
     * Relationships that this document has with other document references that
     * already exist.
     */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /**
     * A set of Security-Tag codes specifying the level of privacy/security of
     * the Document. Note that DocumentReference.meta.security contains the
     * security labels of the "reference" to the document, while
     * DocumentReference.securityLabel contains a snapshot of the security
     * labels on the document the reference refers to.
     */
    set securityLabel(value: Array<CodeableConcept>) {
      this._content["securityLabel"] = value;
    }

    get securityLabel(): Array<CodeableConcept> {
      return this._content["securityLabel"] as Array<CodeableConcept>;
    }

    /** The status of this document reference. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Who or what the document is about. The document can be about a person,
     * (patient or healthcare practitioner), a device (e.g. a machine) or even a
     * group of subjects (such as a document about a herd of farm animals, or a
     * set of patients that share a common exposure).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Specifies the particular kind of document referenced (e.g. History and
     * Physical, Discharge Summary, Progress Note). This usually equates to the
     * purpose of making the document referenced.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * An interaction between a patient and healthcare provider(s) for the purpose
   * of providing healthcare service(s) or assessing the health status of a
   * patient.
   */
  export class Encounter extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Encounter";

    /** The set of accounts that may be used for billing for this Encounter. */
    set account(value: Array<Reference>) {
      this._content["account"] = value;
    }

    get account(): Array<Reference> {
      return this._content["account"] as Array<Reference>;
    }

    /** The appointment that scheduled this encounter. */
    set appointment(value: Array<Reference>) {
      this._content["appointment"] = value;
    }

    get appointment(): Array<Reference> {
      return this._content["appointment"] as Array<Reference>;
    }

    /**
     * The request this encounter satisfies (e.g. incoming referral or procedure
     * request).
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Concepts representing classification of patient encounter such as
     * ambulatory (outpatient), inpatient, emergency, home health or others due
     * to local variations.
     */
    set class(value: Coding) {
      this._content["class"] = value;
    }

    get class(): Coding {
      return this._content["class"] as Coding;
    }

    /**
     * The class history permits the tracking of the encounters transitions
     * without needing to go through the resource history. This would be used
     * for a case where an admission starts of as an emergency encounter, then
     * transitions into an inpatient scenario. Doing this and not restarting a
     * new encounter ensures that any lab/diagnostic results can more easily
     * follow the patient and not require re-processing and not get lost or
     * cancelled during a kind of discharge from emergency to inpatient.
     */
    set classHistory(value: Array<BackboneElement>) {
      this._content["classHistory"] = value;
    }

    get classHistory(): Array<BackboneElement> {
      return this._content["classHistory"] as Array<BackboneElement>;
    }

    /** The list of diagnosis relevant to this encounter. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /**
     * Where a specific encounter should be classified as a part of a specific
     * episode(s) of care this field should be used. This association can
     * facilitate grouping of related encounters together for a specific
     * purpose, such as government reporting, issue tracking, association via a
     * common problem. The association is recorded on the encounter as these are
     * typically created after the episode of care and grouped on entry rather
     * than editing the episode of care to append another encounter to it (the
     * episode of care could span years).
     */
    set episodeOfCare(value: Array<Reference>) {
      this._content["episodeOfCare"] = value;
    }

    get episodeOfCare(): Array<Reference> {
      return this._content["episodeOfCare"] as Array<Reference>;
    }

    /** Details about the admission to a healthcare service. */
    set hospitalization(value: BackboneElement) {
      this._content["hospitalization"] = value;
    }

    get hospitalization(): BackboneElement {
      return this._content["hospitalization"] as BackboneElement;
    }

    /** Identifier(s) by which this encounter is known. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Quantity of time the encounter lasted. This excludes the time during
     * leaves of absence.
     */
    set length(value: Duration) {
      this._content["length"] = value;
    }

    get length(): Duration {
      return this._content["length"] as Duration;
    }

    /** List of locations where the patient has been during this encounter. */
    set location(value: Array<BackboneElement>) {
      this._content["location"] = value;
    }

    get location(): Array<BackboneElement> {
      return this._content["location"] as Array<BackboneElement>;
    }

    /**
     * Another Encounter of which this encounter is a part of (administratively
     * or in time).
     */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** The list of people responsible for providing the service. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** The start and end time of the encounter. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Indicates the urgency of the encounter. */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * Reason the encounter takes place, expressed as a code. For admissions,
     * this can be used for a coded admission diagnosis.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Reason the encounter takes place, expressed as a code. For admissions,
     * this can be used for a coded admission diagnosis.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The organization that is primarily responsible for this Encounter's
     * services. This MAY be the same as the organization on the Patient record,
     * however it could be different, such as if the actor performing the
     * services was from an external organization (which may be billed
     * seperately) for an external consultation. Refer to the example bundle
     * showing an abbreviated set of Encounters for a colonoscopy.
     */
    set serviceProvider(value: Reference) {
      this._content["serviceProvider"] = value;
    }

    get serviceProvider(): Reference {
      return this._content["serviceProvider"] as Reference;
    }

    /**
     * Broad categorization of the service that is to be provided (e.g.
     * cardiology).
     */
    set serviceType(value: CodeableConcept) {
      this._content["serviceType"] = value;
    }

    get serviceType(): CodeableConcept {
      return this._content["serviceType"] as CodeableConcept;
    }

    /**
     * Planned | arrived | triaged | in-progress | onleave | finished |
     * cancelled +.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The status history permits the encounter resource to contain the status
     * history without needing to read through the historical versions of the
     * resource, or even have the server store them.
     */
    set statusHistory(value: Array<BackboneElement>) {
      this._content["statusHistory"] = value;
    }

    get statusHistory(): Array<BackboneElement> {
      return this._content["statusHistory"] as Array<BackboneElement>;
    }

    /** The patient or group present at the encounter. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care,
     * skilled nursing, rehabilitation).
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /**
   * The technical details of an endpoint that can be used for electronic
   * services, such as for web services providing XDS.b or a REST endpoint for
   * another FHIR server. This may include any security context information.
   */
  export class Endpoint extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Endpoint";

    /** The uri that describes the actual end-point to connect to. */
    set address(value: Url) {
      this._content["address"] = value;
    }

    get address(): Url {
      return this._content["address"] as Url;
    }

    /**
     * A coded value that represents the technical details of the usage of this
     * endpoint, such as what WSDLs should be used in what way. (e.g.
     * XDS.b/DICOM/cds-hook).
     */
    set connectionType(value: Coding) {
      this._content["connectionType"] = value;
    }

    get connectionType(): Coding {
      return this._content["connectionType"] as Coding;
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /** Additional headers / information to send as part of the notification. */
    set header(value: Array<String>) {
      this._content["header"] = value;
    }

    get header(): Array<String> {
      return this._content["header"] as Array<String>;
    }

    /**
     * Identifier for the organization that is used to identify the endpoint
     * across multiple disparate systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization that manages this endpoint (even if technically another
     * organization is hosting this in the cloud, it is the organization
     * associated with the data).
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** A friendly name that this endpoint can be referred to with. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The mime type to send the payload in - e.g. application/fhir+xml,
     * application/fhir+json. If the mime type is not specified, then the sender
     * could send any content (including no content depending on the
     * connectionType).
     */
    set payloadMimeType(value: Array<Code>) {
      this._content["payloadMimeType"] = value;
    }

    get payloadMimeType(): Array<Code> {
      return this._content["payloadMimeType"] as Array<Code>;
    }

    /**
     * The payload type describes the acceptable content that can be
     * communicated on the endpoint.
     */
    set payloadType(value: Array<CodeableConcept>) {
      this._content["payloadType"] = value;
    }

    get payloadType(): Array<CodeableConcept> {
      return this._content["payloadType"] as Array<CodeableConcept>;
    }

    /** The interval during which the endpoint is expected to be operational. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Active | suspended | error | off | test. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * This resource provides the insurance enrollment details to the insurer
   * regarding a specified coverage.
   */
  export class EnrollmentRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EnrollmentRequest";

    /** Patient Resource. */
    set candidate(value: Reference) {
      this._content["candidate"] = value;
    }

    get candidate(): Reference {
      return this._content["candidate"] as Reference;
    }

    /** Reference to the program or plan identification, underwriter or payor. */
    set coverage(value: Reference) {
      this._content["coverage"] = value;
    }

    get coverage(): Reference {
      return this._content["coverage"] as Reference;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The Insurer who is target of the request. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * This resource provides enrollment and plan details from the processing of
   * an EnrollmentRequest resource.
   */
  export class EnrollmentResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EnrollmentResponse";

    /** The date when the enclosed suite of services were performed or completed. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** The Response business identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The Insurer who produced this adjudicated response. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /** Processing status: error, complete. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestProvider(value: Reference) {
      this._content["requestProvider"] = value;
    }

    get requestProvider(): Reference {
      return this._content["requestProvider"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * An association between a patient and an organization / healthcare
   * provider(s) during which time encounters may occur. The managing
   * organization assumes a level of responsibility for the patient during this
   * time.
   */
  export class EpisodeOfCare extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare";

    /** The set of accounts that may be used for billing for this EpisodeOfCare. */
    set account(value: Array<Reference>) {
      this._content["account"] = value;
    }

    get account(): Array<Reference> {
      return this._content["account"] as Array<Reference>;
    }

    /**
     * The practitioner that is the care manager/care coordinator for this
     * patient.
     */
    set careManager(value: Reference) {
      this._content["careManager"] = value;
    }

    get careManager(): Reference {
      return this._content["careManager"] as Reference;
    }

    /** The list of diagnosis relevant to this episode of care. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /**
     * The EpisodeOfCare may be known by different identifiers for different
     * contexts of use, such as when an external agency is tracking the Episode
     * for funding purposes.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization that has assumed the specific responsibilities for the
     * specified duration.
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** The patient who is the focus of this episode of care. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The interval during which the managing organization assumes the defined
     * responsibility.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
     * referrals.
     */
    set referralRequest(value: Array<Reference>) {
      this._content["referralRequest"] = value;
    }

    get referralRequest(): Array<Reference> {
      return this._content["referralRequest"] as Array<Reference>;
    }

    /** Planned | waitlist | active | onhold | finished | cancelled. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The history of statuses that the EpisodeOfCare has been through (without
     * requiring processing the history of the resource).
     */
    set statusHistory(value: Array<BackboneElement>) {
      this._content["statusHistory"] = value;
    }

    get statusHistory(): Array<BackboneElement> {
      return this._content["statusHistory"] as Array<BackboneElement>;
    }

    /**
     * The list of practitioners that may be facilitating this episode of care
     * for specific purposes.
     */
    set team(value: Array<Reference>) {
      this._content["team"] = value;
    }

    get team(): Array<Reference> {
      return this._content["team"] as Array<Reference>;
    }

    /**
     * A classification of the type of episode of care; e.g. specialist
     * referral, disease management, type of funded care.
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /**
   * The EventDefinition resource provides a reusable description of when a
   * particular event can occur.
   */
  export class EventDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EventDefinition";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the event definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the event definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the event definition was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the event definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the event definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the event definition content was or is planned to
     * be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this event definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this event definition when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the event definition is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the event definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the event
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this event definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related resources such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The status of this event definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A code or group definition that describes the intended subject of the
     * event definition.
     */
    set subject(value: CodeableConcept | Reference) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * An explanatory or alternate title for the event definition giving
     * additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /** A short, descriptive, user-friendly title for the event definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the module. Topics provide a high-level
     * categorization of the module that can be useful for filtering and
     * searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * The trigger element defines when the event occurs. If more than one
     * trigger condition is specified, the event fires whenever any one of the
     * trigger conditions is met.
     */
    set trigger(value: Array<TriggerDefinition>) {
      this._content["trigger"] = value;
    }

    get trigger(): Array<TriggerDefinition> {
      return this._content["trigger"] as Array<TriggerDefinition>;
    }

    /**
     * An absolute URI that is used to identify this event definition when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this event
     * definition is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the event definition
     * is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the event definition is used from a
     * clinical perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate event definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the event
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the event definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The Evidence Resource provides a machine-interpretable expression of an
   * evidence concept including the evidence variables (eg population,
   * exposures/interventions, comparators, outcomes, measured variables,
   * confounding variables), the statistics, and the certainty of this
   * evidence.
   */
  export class Evidence extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Evidence";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /** Declarative description of the Evidence. */
    set assertion(value: Markdown) {
      this._content["assertion"] = value;
    }

    get assertion(): Markdown {
      return this._content["assertion"] as Markdown;
    }

    /**
     * An individiual, organization, or device primarily involved in the
     * creation and maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * Assessment of certainty, confidence in the estimates, or quality of the
     * evidence.
     */
    set certainty(value: Array<BackboneElement>) {
      this._content["certainty"] = value;
    }

    get certainty(): Array<BackboneElement> {
      return this._content["certainty"] as Array<BackboneElement>;
    }

    /** Citation Resource or display of suggested citation for this evidence. */
    set citeAs(value: Reference | Markdown) {
      this._content["citeAs"] = value;
    }

    get citeAsReference(): Reference {
      return this._content["citeAs"] as Reference;
    }

    get citeAsMarkdown(): Markdown {
      return this._content["citeAs"] as Markdown;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the summary was published. The date
     * must change when the business version changes and it must change if the
     * status code changes. In addition, it should change when the substantive
     * content of the summary changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the evidence from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individiual, organization, or device primarily responsible for
     * internal coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * An individiual, organization, or device responsible for officially
     * endorsing the content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A formal identifier that is used to identify this summary when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /** Footnotes and/or explanatory notes. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The name of the organization or individual that published the evidence. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /** Link or citation to artifact associated with the summary. */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individiual, organization, or device primarily responsible for review
     * of some aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /** Values and parameters for a single statistic. */
    set statistic(value: Array<BackboneElement>) {
      this._content["statistic"] = value;
    }

    get statistic(): Array<BackboneElement> {
      return this._content["statistic"] as Array<BackboneElement>;
    }

    /**
     * The status of this summary. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The type of study that produced this evidence. */
    set studyType(value: CodeableConcept) {
      this._content["studyType"] = value;
    }

    get studyType(): CodeableConcept {
      return this._content["studyType"] as CodeableConcept;
    }

    /** The method to combine studies. */
    set synthesisType(value: CodeableConcept) {
      this._content["synthesisType"] = value;
    }

    get synthesisType(): CodeableConcept {
      return this._content["synthesisType"] as CodeableConcept;
    }

    /** A short, descriptive, user-friendly title for the summary. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this evidence when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * summary is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the summary is stored
     * on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate evidence instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /** Evidence variable such as population, exposure, or outcome. */
    set variableDefinition(value: Array<BackboneElement>) {
      this._content["variableDefinition"] = value;
    }

    get variableDefinition(): Array<BackboneElement> {
      return this._content["variableDefinition"] as Array<BackboneElement>;
    }

    /**
     * The identifier that is used to identify this version of the summary when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the summary author and is not expected to
     * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
     * if a managed version is not available. There is also no expectation that
     * versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The EvidenceReport Resource is a specialized container for a collection of
   * resources and codable concepts, adapted to support compositions of
   * Evidence, EvidenceVariable, and Citation resources and related concepts.
   */
  export class EvidenceReport extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EvidenceReport";

    /**
     * An individiual, organization, or device primarily involved in the
     * creation and maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /** Citation Resource or display of suggested citation for this report. */
    set citeAs(value: Reference | Markdown) {
      this._content["citeAs"] = value;
    }

    get citeAsReference(): Reference {
      return this._content["citeAs"] as Reference;
    }

    get citeAsMarkdown(): Markdown {
      return this._content["citeAs"] as Markdown;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * An individiual, organization, or device primarily responsible for
     * internal coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * An individiual, organization, or device responsible for officially
     * endorsing the content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A formal identifier that is used to identify this EvidenceReport when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Used for footnotes and annotations. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The name of the organization or individual that published the evidence
     * report.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /** Link, description or reference to artifact associated with the report. */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * A formal identifier that is used to identify things closely related to
     * this EvidenceReport.
     */
    set relatedIdentifier(value: Array<Identifier>) {
      this._content["relatedIdentifier"] = value;
    }

    get relatedIdentifier(): Array<Identifier> {
      return this._content["relatedIdentifier"] as Array<Identifier>;
    }

    /**
     * Relationships that this composition has with other compositions or
     * documents that already exist.
     */
    set relatesTo(value: Array<BackboneElement>) {
      this._content["relatesTo"] = value;
    }

    get relatesTo(): Array<BackboneElement> {
      return this._content["relatesTo"] as Array<BackboneElement>;
    }

    /**
     * An individiual, organization, or device primarily responsible for review
     * of some aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /** The root of the sections that make up the composition. */
    set section(value: Array<BackboneElement>) {
      this._content["section"] = value;
    }

    get section(): Array<BackboneElement> {
      return this._content["section"] as Array<BackboneElement>;
    }

    /**
     * The status of this summary. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Specifies the subject or focus of the report. Answers "What is this
     * report about?".
     */
    set subject(value: BackboneElement) {
      this._content["subject"] = value;
    }

    get subject(): BackboneElement {
      return this._content["subject"] as BackboneElement;
    }

    /**
     * Specifies the kind of report, such as grouping of classifiers, search
     * results, or human-compiled expression.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * An absolute URI that is used to identify this EvidenceReport when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * summary is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the summary is stored
     * on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate evidence report instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }
  }

  /**
   * The EvidenceVariable resource describes an element that knowledge
   * (Evidence) is about.
   */
  export class EvidenceVariable extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/EvidenceVariable";

    /**
     * True if the actual variable measured, false if a conceptual
     * representation of the intended variable.
     */
    set actual(value: Boolean) {
      this._content["actual"] = value;
    }

    get actual(): Boolean {
      return this._content["actual"] as Boolean;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * A grouping (or set of values) described along with other groupings to
     * specify the set of groupings allowed for the variable.
     */
    set category(value: Array<BackboneElement>) {
      this._content["category"] = value;
    }

    get category(): Array<BackboneElement> {
      return this._content["category"] as Array<BackboneElement>;
    }

    /**
     * A characteristic that defines the members of the evidence element.
     * Multiple characteristics are applied with "and" semantics.
     */
    set characteristic(value: Array<BackboneElement>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<BackboneElement> {
      return this._content["characteristic"] as Array<BackboneElement>;
    }

    /**
     * Used to specify if two or more characteristics are combined with OR or
     * AND.
     */
    set characteristicCombination(value: Code) {
      this._content["characteristicCombination"] = value;
    }

    get characteristicCombination(): Code {
      return this._content["characteristicCombination"] as Code;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the evidence variable was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the evidence variable changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the evidence variable from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /** Used for an outcome to classify. */
    set handling(value: Code) {
      this._content["handling"] = value;
    }

    get handling(): Code {
      return this._content["handling"] as Code;
    }

    /**
     * A formal identifier that is used to identify this evidence variable when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A natural language name identifying the evidence variable. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A human-readable string to clarify or explain concepts about the
     * resource.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The name of the organization or individual that published the evidence
     * variable.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The short title provides an alternate title for use in informal
     * descriptive contexts where the full, formal title is not necessary.
     */
    set shortTitle(value: String) {
      this._content["shortTitle"] = value;
    }

    get shortTitle(): String {
      return this._content["shortTitle"] as String;
    }

    /**
     * The status of this evidence variable. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An explanatory or alternate title for the EvidenceVariable giving
     * additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /** A short, descriptive, user-friendly title for the evidence variable. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this evidence variable when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this evidence variable is (or will be) published. This URL can be the
     * target of a canonical reference. It SHALL remain the same when the
     * evidence variable is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate evidence variable instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the evidence
     * variable when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the evidence variable
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Example of workflow instance. */
  export class ExampleScenario extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ExampleScenario";

    /** Actor participating in the resource. */
    set actor(value: Array<BackboneElement>) {
      this._content["actor"] = value;
    }

    get actor(): Array<BackboneElement> {
      return this._content["actor"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the example scenario and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the example scenario.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the example scenario was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the example scenario changes. (e.g. the 'content
     * logical definition').
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A Boolean value to indicate that this example scenario is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this example scenario when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Each resource and each version that is present in the workflow. */
    set instance(value: Array<BackboneElement>) {
      this._content["instance"] = value;
    }

    get instance(): Array<BackboneElement> {
      return this._content["instance"] as Array<BackboneElement>;
    }

    /**
     * A legal or geographic region in which the example scenario is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the example scenario. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Each major process - a group of operations. */
    set process(value: Array<BackboneElement>) {
      this._content["process"] = value;
    }

    get process(): Array<BackboneElement> {
      return this._content["process"] as Array<BackboneElement>;
    }

    /**
     * The name of the organization or individual that published the example
     * scenario.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * What the example scenario resource is created for. This should not be
     * used to show the business purpose of the scenario itself, but the purpose
     * of documenting a scenario.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this example scenario. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An absolute URI that is used to identify this example scenario when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * example scenario is (or will be) published. This URL can be the target of
     * a canonical reference. It SHALL remain the same when the example scenario
     * is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate example scenario instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the example
     * scenario when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the example scenario
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /** Another nested workflow. */
    set workflow(value: Array<Canonical>) {
      this._content["workflow"] = value;
    }

    get workflow(): Array<Canonical> {
      return this._content["workflow"] as Array<Canonical>;
    }
  }

  /**
   * This resource provides: the claim details; adjudication details from the
   * processing of a Claim; and optionally account balance information, for
   * informing the subscriber of the benefits provided.
   */
  export class ExplanationOfBenefit extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit";

    /**
     * Details of a accident which resulted in injuries which required the
     * products and services listed in the claim.
     */
    set accident(value: BackboneElement) {
      this._content["accident"] = value;
    }

    get accident(): BackboneElement {
      return this._content["accident"] as BackboneElement;
    }

    /**
     * The first-tier service adjudications for payor added product or service
     * lines.
     */
    set addItem(value: Array<BackboneElement>) {
      this._content["addItem"] = value;
    }

    get addItem(): Array<BackboneElement> {
      return this._content["addItem"] as Array<BackboneElement>;
    }

    /** Balance by Benefit Category. */
    set benefitBalance(value: Array<BackboneElement>) {
      this._content["benefitBalance"] = value;
    }

    get benefitBalance(): Array<BackboneElement> {
      return this._content["benefitBalance"] as Array<BackboneElement>;
    }

    /** The term of the benefits documented in this response. */
    set benefitPeriod(value: Period) {
      this._content["benefitPeriod"] = value;
    }

    get benefitPeriod(): Period {
      return this._content["benefitPeriod"] as Period;
    }

    /** The period for which charges are being submitted. */
    set billablePeriod(value: Period) {
      this._content["billablePeriod"] = value;
    }

    get billablePeriod(): Period {
      return this._content["billablePeriod"] as Period;
    }

    /** The members of the team who provided the products and services. */
    set careTeam(value: Array<BackboneElement>) {
      this._content["careTeam"] = value;
    }

    get careTeam(): Array<BackboneElement> {
      return this._content["careTeam"] as Array<BackboneElement>;
    }

    /**
     * The business identifier for the instance of the adjudication request:
     * claim predetermination or preauthorization.
     */
    set claim(value: Reference) {
      this._content["claim"] = value;
    }

    get claim(): Reference {
      return this._content["claim"] as Reference;
    }

    /**
     * The business identifier for the instance of the adjudication response:
     * claim, predetermination or preauthorization response.
     */
    set claimResponse(value: Reference) {
      this._content["claimResponse"] = value;
    }

    get claimResponse(): Reference {
      return this._content["claimResponse"] as Reference;
    }

    /** The date this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Information about diagnoses relevant to the claim items. */
    set diagnosis(value: Array<BackboneElement>) {
      this._content["diagnosis"] = value;
    }

    get diagnosis(): Array<BackboneElement> {
      return this._content["diagnosis"] as Array<BackboneElement>;
    }

    /** A human readable description of the status of the adjudication. */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** Individual who created the claim, predetermination or preauthorization. */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /** Facility where the services were provided. */
    set facility(value: Reference) {
      this._content["facility"] = value;
    }

    get facility(): Reference {
      return this._content["facility"] as Reference;
    }

    /**
     * The actual form, by reference or inclusion, for printing the content or
     * an EOB.
     */
    set form(value: Attachment) {
      this._content["form"] = value;
    }

    get form(): Attachment {
      return this._content["form"] as Attachment;
    }

    /** A code for the form to be used for printing the content. */
    set formCode(value: CodeableConcept) {
      this._content["formCode"] = value;
    }

    get formCode(): CodeableConcept {
      return this._content["formCode"] as CodeableConcept;
    }

    /**
     * A code, used only on a response to a preauthorization, to indicate
     * whether the benefits payable have been reserved and for whom.
     */
    set fundsReserve(value: CodeableConcept) {
      this._content["fundsReserve"] = value;
    }

    get fundsReserve(): CodeableConcept {
      return this._content["fundsReserve"] as CodeableConcept;
    }

    /**
     * A code to indicate whether and for whom funds are to be reserved for
     * future claims.
     */
    set fundsReserveRequested(value: CodeableConcept) {
      this._content["fundsReserveRequested"] = value;
    }

    get fundsReserveRequested(): CodeableConcept {
      return this._content["fundsReserveRequested"] as CodeableConcept;
    }

    /** A unique identifier assigned to this explanation of benefit. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Financial instruments for reimbursement for the health care products and
     * services specified on the claim.
     */
    set insurance(value: Array<BackboneElement>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<BackboneElement> {
      return this._content["insurance"] as Array<BackboneElement>;
    }

    /** The party responsible for authorization, adjudication and reimbursement. */
    set insurer(value: Reference) {
      this._content["insurer"] = value;
    }

    get insurer(): Reference {
      return this._content["insurer"] as Reference;
    }

    /**
     * A claim line. Either a simple (a product or service) or a 'group' of
     * details which can also be a simple items or groups of sub-details.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * Original prescription which has been superseded by this prescription to
     * support the dispensing of pharmacy services, medications or products.
     */
    set originalPrescription(value: Reference) {
      this._content["originalPrescription"] = value;
    }

    get originalPrescription(): Reference {
      return this._content["originalPrescription"] as Reference;
    }

    /**
     * The outcome of the claim, predetermination, or preauthorization
     * processing.
     */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /**
     * The party to whom the professional services and/or products have been
     * supplied or are being considered and for whom actual for forecast
     * reimbursement is sought.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The party to be reimbursed for cost of the products and services
     * according to the terms of the policy.
     */
    set payee(value: BackboneElement) {
      this._content["payee"] = value;
    }

    get payee(): BackboneElement {
      return this._content["payee"] as BackboneElement;
    }

    /** Payment details for the adjudication of the claim. */
    set payment(value: BackboneElement) {
      this._content["payment"] = value;
    }

    get payment(): BackboneElement {
      return this._content["payment"] as BackboneElement;
    }

    /**
     * Reference from the Insurer which is used in later communications which
     * refers to this adjudication.
     */
    set preAuthRef(value: Array<String>) {
      this._content["preAuthRef"] = value;
    }

    get preAuthRef(): Array<String> {
      return this._content["preAuthRef"] as Array<String>;
    }

    /**
     * The timeframe during which the supplied preauthorization reference may be
     * quoted on claims to obtain the adjudication as provided.
     */
    set preAuthRefPeriod(value: Array<Period>) {
      this._content["preAuthRefPeriod"] = value;
    }

    get preAuthRefPeriod(): Array<Period> {
      return this._content["preAuthRefPeriod"] as Array<Period>;
    }

    /**
     * This indicates the relative order of a series of EOBs related to
     * different coverages for the same suite of services.
     */
    set precedence(value: PositiveInt) {
      this._content["precedence"] = value;
    }

    get precedence(): PositiveInt {
      return this._content["precedence"] as PositiveInt;
    }

    /**
     * Prescription to support the dispensing of pharmacy, device or vision
     * products.
     */
    set prescription(value: Reference) {
      this._content["prescription"] = value;
    }

    get prescription(): Reference {
      return this._content["prescription"] as Reference;
    }

    /**
     * The provider-required urgency of processing the request. Typical values
     * include: stat, routine deferred.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /**
     * Procedures performed on the patient relevant to the billing items with
     * the claim.
     */
    set procedure(value: Array<BackboneElement>) {
      this._content["procedure"] = value;
    }

    get procedure(): Array<BackboneElement> {
      return this._content["procedure"] as Array<BackboneElement>;
    }

    /**
     * A note that describes or explains adjudication results in a human
     * readable form.
     */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /**
     * The provider which is responsible for the claim, predetermination or
     * preauthorization.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** A reference to a referral resource. */
    set referral(value: Reference) {
      this._content["referral"] = value;
    }

    get referral(): Reference {
      return this._content["referral"] as Reference;
    }

    /**
     * Other claims which are related to this claim such as prior submissions or
     * claims for related services or for the same event.
     */
    set related(value: Array<BackboneElement>) {
      this._content["related"] = value;
    }

    get related(): Array<BackboneElement> {
      return this._content["related"] as Array<BackboneElement>;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A finer grained suite of claim type codes which may convey additional
     * information such as Inpatient vs Outpatient and/or a specialty service.
     */
    set subType(value: CodeableConcept) {
      this._content["subType"] = value;
    }

    get subType(): CodeableConcept {
      return this._content["subType"] as CodeableConcept;
    }

    /**
     * Additional information codes regarding exceptions, special
     * considerations, the condition, situation, prior or concurrent issues.
     */
    set supportingInfo(value: Array<BackboneElement>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<BackboneElement> {
      return this._content["supportingInfo"] as Array<BackboneElement>;
    }

    /** Categorized monetary totals for the adjudication. */
    set total(value: Array<BackboneElement>) {
      this._content["total"] = value;
    }

    get total(): Array<BackboneElement> {
      return this._content["total"] as Array<BackboneElement>;
    }

    /**
     * The category of claim, e.g. oral, pharmacy, vision, institutional,
     * professional.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * A code to indicate whether the nature of the request is: to request
     * adjudication of products and services previously rendered; or requesting
     * authorization and adjudication for provision in the future; or requesting
     * the non-binding adjudication of the listed products and services which
     * could be provided in the future.
     */
    set use(value: Code) {
      this._content["use"] = value;
    }

    get use(): Code {
      return this._content["use"] as Code;
    }
  }

  /**
   * Significant health conditions for a person related to the patient relevant
   * in the context of care for the patient.
   */
  export class FamilyMemberHistory extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory";

    /**
     * The age of the relative at the time the family member history is
     * recorded.
     */
    set age(value: Age | Range | String) {
      this._content["age"] = value;
    }

    get ageAge(): Age {
      return this._content["age"] as Age;
    }

    get ageRange(): Range {
      return this._content["age"] as Range;
    }

    get ageString(): String {
      return this._content["age"] as String;
    }

    /** The actual or approximate date of birth of the relative. */
    set born(value: Period | Date | String) {
      this._content["born"] = value;
    }

    get bornPeriod(): Period {
      return this._content["born"] as Period;
    }

    get bornDate(): Date {
      return this._content["born"] as Date;
    }

    get bornString(): String {
      return this._content["born"] as String;
    }

    /**
     * The significant Conditions (or condition) that the family member had.
     * This is a repeating section to allow a system to represent more than one
     * condition per resource, though there is nothing stopping multiple
     * resources - one per condition.
     */
    set condition(value: Array<BackboneElement>) {
      this._content["condition"] = value;
    }

    get condition(): Array<BackboneElement> {
      return this._content["condition"] as Array<BackboneElement>;
    }

    /** Describes why the family member's history is not available. */
    set dataAbsentReason(value: CodeableConcept) {
      this._content["dataAbsentReason"] = value;
    }

    get dataAbsentReason(): CodeableConcept {
      return this._content["dataAbsentReason"] as CodeableConcept;
    }

    /**
     * The date (and possibly time) when the family member history was recorded
     * or last updated.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Deceased flag or the actual or approximate age of the relative at the
     * time of death for the family member history record.
     */
    set deceased(value: Boolean | Age | Range | Date | String) {
      this._content["deceased"] = value;
    }

    get deceasedBoolean(): Boolean {
      return this._content["deceased"] as Boolean;
    }

    get deceasedAge(): Age {
      return this._content["deceased"] as Age;
    }

    get deceasedRange(): Range {
      return this._content["deceased"] as Range;
    }

    get deceasedDate(): Date {
      return this._content["deceased"] as Date;
    }

    get deceasedString(): String {
      return this._content["deceased"] as String;
    }

    /** If true, indicates that the age value specified is an estimated value. */
    set estimatedAge(value: Boolean) {
      this._content["estimatedAge"] = value;
    }

    get estimatedAge(): Boolean {
      return this._content["estimatedAge"] as Boolean;
    }

    /**
     * Business identifiers assigned to this family member history by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
     * definition that is adhered to in whole or in part by this
     * FamilyMemberHistory.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this FamilyMemberHistory.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * This will either be a name or a description; e.g. "Aunt Susan", "my
     * cousin with the red hair".
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * This property allows a non condition-specific note to the made about the
     * related person. Ideally, the note would be in the condition property, but
     * this is not always possible.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The person who this history concerns. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * Describes why the family member history occurred in coded or textual
     * form.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Indicates a Condition, Observation, AllergyIntolerance, or
     * QuestionnaireResponse that justifies this family member history event.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The type of relationship this person has to the patient (father, mother,
     * brother etc.).
     */
    set relationship(value: CodeableConcept) {
      this._content["relationship"] = value;
    }

    get relationship(): CodeableConcept {
      return this._content["relationship"] as CodeableConcept;
    }

    /** The birth sex of the family member. */
    set sex(value: CodeableConcept) {
      this._content["sex"] = value;
    }

    get sex(): CodeableConcept {
      return this._content["sex"] as CodeableConcept;
    }

    /**
     * A code specifying the status of the record of the family history of a
     * specific family member.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * Prospective warnings of potential issues when providing care to the
   * patient.
   */
  export class Flag extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Flag";

    /** The person, organization or device that created the flag. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Allows a flag to be divided into different categories like clinical,
     * administrative etc. Intended to be used as a means of filtering which
     * flags are displayed to particular user or in a given context.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** The coded value or textual component of the flag to display to the user. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** This alert is only relevant during the encounter. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Business identifiers assigned to this flag by the performer or other
     * systems which remain constant as the resource is updated and propagates
     * from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The period of time from the activation of the flag to inactivation of the
     * flag. If the flag is active, the end of the period should be
     * unspecified.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Supports basic workflow. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The patient, location, group, organization, or practitioner etc. this is
     * about record this flag is associated with.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * Describes the intended objective(s) for a patient, group or organization
   * care, for example, weight loss, restoring an activity of daily living,
   * obtaining herd immunity via immunization, meeting a process improvement
   * objective, etc.
   */
  export class Goal extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Goal";

    /**
     * Describes the progression, or lack thereof, towards the goal against the
     * target.
     */
    set achievementStatus(value: CodeableConcept) {
      this._content["achievementStatus"] = value;
    }

    get achievementStatus(): CodeableConcept {
      return this._content["achievementStatus"] as CodeableConcept;
    }

    /**
     * The identified conditions and other health record elements that are
     * intended to be addressed by the goal.
     */
    set addresses(value: Array<Reference>) {
      this._content["addresses"] = value;
    }

    get addresses(): Array<Reference> {
      return this._content["addresses"] as Array<Reference>;
    }

    /** Indicates a category the goal falls within. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Human-readable and/or coded description of a specific desired objective
     * of care, such as "control blood pressure" or "negotiate an obstacle
     * course" or "dance with child at wedding".
     */
    set description(value: CodeableConcept) {
      this._content["description"] = value;
    }

    get description(): CodeableConcept {
      return this._content["description"] as CodeableConcept;
    }

    /** Indicates whose goal this is - patient goal, practitioner goal, etc. */
    set expressedBy(value: Reference) {
      this._content["expressedBy"] = value;
    }

    get expressedBy(): Reference {
      return this._content["expressedBy"] as Reference;
    }

    /**
     * Business identifiers assigned to this goal by the performer or other
     * systems which remain constant as the resource is updated and propagates
     * from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The state of the goal throughout its lifecycle. */
    set lifecycleStatus(value: Code) {
      this._content["lifecycleStatus"] = value;
    }

    get lifecycleStatus(): Code {
      return this._content["lifecycleStatus"] as Code;
    }

    /** Any comments related to the goal. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Identifies the change (or lack of change) at the point when the status of
     * the goal is assessed.
     */
    set outcomeCode(value: Array<CodeableConcept>) {
      this._content["outcomeCode"] = value;
    }

    get outcomeCode(): Array<CodeableConcept> {
      return this._content["outcomeCode"] as Array<CodeableConcept>;
    }

    /** Details of what's changed (or not changed). */
    set outcomeReference(value: Array<Reference>) {
      this._content["outcomeReference"] = value;
    }

    get outcomeReference(): Array<Reference> {
      return this._content["outcomeReference"] as Array<Reference>;
    }

    /**
     * Identifies the mutually agreed level of importance associated with
     * reaching/sustaining the goal.
     */
    set priority(value: CodeableConcept) {
      this._content["priority"] = value;
    }

    get priority(): CodeableConcept {
      return this._content["priority"] as CodeableConcept;
    }

    /** The date or event after which the goal should begin being pursued. */
    set start(value: Date | CodeableConcept) {
      this._content["start"] = value;
    }

    get startDate(): Date {
      return this._content["start"] as Date;
    }

    get startCodeableConcept(): CodeableConcept {
      return this._content["start"] as CodeableConcept;
    }

    /**
     * Identifies when the current status. I.e. When initially created, when
     * achieved, when cancelled, etc.
     */
    set statusDate(value: Date) {
      this._content["statusDate"] = value;
    }

    get statusDate(): Date {
      return this._content["statusDate"] as Date;
    }

    /** Captures the reason for the current status. */
    set statusReason(value: String) {
      this._content["statusReason"] = value;
    }

    get statusReason(): String {
      return this._content["statusReason"] as String;
    }

    /**
     * Identifies the patient, group or organization for whom the goal is being
     * established.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Indicates what should be done by when. */
    set target(value: Array<BackboneElement>) {
      this._content["target"] = value;
    }

    get target(): Array<BackboneElement> {
      return this._content["target"] as Array<BackboneElement>;
    }
  }

  /**
   * A formal computable definition of a graph of resources - that is, a
   * coherent set of resources that form a graph by following references. The
   * Graph Definition resource defines a set and makes rules about the set.
   */
  export class GraphDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/GraphDefinition";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the graph definition was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the graph definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the graph definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this graph definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A legal or geographic region in which the graph definition is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** Links this graph makes rules about. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the graph definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The profile that describes the use of the base resource. */
    set profile(value: Canonical) {
      this._content["profile"] = value;
    }

    get profile(): Canonical {
      return this._content["profile"] as Canonical;
    }

    /**
     * The name of the organization or individual that published the graph
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this graph definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** The type of FHIR resource at which instances of this graph start. */
    set start(value: Code) {
      this._content["start"] = value;
    }

    get start(): Code {
      return this._content["start"] as Code;
    }

    /**
     * The status of this graph definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * An absolute URI that is used to identify this graph definition when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this graph
     * definition is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the graph definition
     * is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate graph definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the graph
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the graph definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Represents a defined collection of entities that may be discussed or acted
   * upon collectively but which are not expected to act collectively, and are
   * not formally or legally recognized; i.e. a collection of entities that
   * isn't an Organization.
   */
  export class Group extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Group";

    /**
     * Indicates whether the record for the group is available for use or is
     * merely being retained for historical purposes.
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * If true, indicates that the resource refers to a specific group of real
     * individuals. If false, the group defines a set of intended individuals.
     */
    set actual(value: Boolean) {
      this._content["actual"] = value;
    }

    get actual(): Boolean {
      return this._content["actual"] as Boolean;
    }

    /**
     * Identifies traits whose presence r absence is shared by members of the
     * group.
     */
    set characteristic(value: Array<BackboneElement>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<BackboneElement> {
      return this._content["characteristic"] as Array<BackboneElement>;
    }

    /**
     * Provides a specific type of resource the group includes; e.g. "cow",
     * "syringe", etc.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A unique business identifier for this group. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Entity responsible for defining and maintaining Group characteristics
     * and/or registered members.
     */
    set managingEntity(value: Reference) {
      this._content["managingEntity"] = value;
    }

    get managingEntity(): Reference {
      return this._content["managingEntity"] as Reference;
    }

    /** Identifies the resource instances that are members of the group. */
    set member(value: Array<BackboneElement>) {
      this._content["member"] = value;
    }

    get member(): Array<BackboneElement> {
      return this._content["member"] as Array<BackboneElement>;
    }

    /** A label assigned to the group for human identification and communication. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** A count of the number of resource instances that are part of the group. */
    set quantity(value: UnsignedInt) {
      this._content["quantity"] = value;
    }

    get quantity(): UnsignedInt {
      return this._content["quantity"] as UnsignedInt;
    }

    /**
     * Identifies the broad classification of the kind of resources the group
     * includes.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * A guidance response is the formal response to a guidance request, including
   * any output parameters returned by the evaluation, as well as the
   * description of any proposed actions to be taken.
   */
  export class GuidanceResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/GuidanceResponse";

    /**
     * If the evaluation could not be completed due to lack of information, or
     * additional information would potentially result in a more accurate
     * response, this element will a description of the data required in order
     * to proceed with the evaluation. A subsequent request to the service
     * should include this data.
     */
    set dataRequirement(value: Array<DataRequirement>) {
      this._content["dataRequirement"] = value;
    }

    get dataRequirement(): Array<DataRequirement> {
      return this._content["dataRequirement"] as Array<DataRequirement>;
    }

    /**
     * The encounter during which this response was created or to which the
     * creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Messages resulting from the evaluation of the artifact or artifacts. As
     * part of evaluating the request, the engine may produce informational or
     * warning messages. These messages will be provided by this element.
     */
    set evaluationMessage(value: Array<Reference>) {
      this._content["evaluationMessage"] = value;
    }

    get evaluationMessage(): Array<Reference> {
      return this._content["evaluationMessage"] as Array<Reference>;
    }

    /**
     * Allows a service to provide unique, business identifiers for the
     * response.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * An identifier, CodeableConcept or canonical reference to the guidance
     * that was requested.
     */
    set module(value: Uri | Canonical | CodeableConcept) {
      this._content["module"] = value;
    }

    get moduleUri(): Uri {
      return this._content["module"] as Uri;
    }

    get moduleCanonical(): Canonical {
      return this._content["module"] as Canonical;
    }

    get moduleCodeableConcept(): CodeableConcept {
      return this._content["module"] as CodeableConcept;
    }

    /**
     * Provides a mechanism to communicate additional information about the
     * response.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Indicates when the guidance response was processed. */
    set occurrenceDateTime(value: DateTime) {
      this._content["occurrenceDateTime"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrenceDateTime"] as DateTime;
    }

    /**
     * The output parameters of the evaluation, if any. Many modules will result
     * in the return of specific resources such as procedure or communication
     * requests that are returned as part of the operation result. However,
     * modules may define specific outputs that would be returned as the result
     * of the evaluation, and these would be returned in this element.
     */
    set outputParameters(value: Reference) {
      this._content["outputParameters"] = value;
    }

    get outputParameters(): Reference {
      return this._content["outputParameters"] as Reference;
    }

    /** Provides a reference to the device that performed the guidance. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Describes the reason for the guidance response in coded or textual form. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Indicates the reason the request was initiated. This is typically
     * provided as a parameter to the evaluation and echoed by the service,
     * although for some use cases, such as subscription- or event-based
     * scenarios, it may provide an indication of the cause for the response.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The identifier of the request associated with this response. If an
     * identifier was given as part of the request, it will be reproduced here
     * to enable the requester to more easily identify the response in a
     * multi-request scenario.
     */
    set requestIdentifier(value: Identifier) {
      this._content["requestIdentifier"] = value;
    }

    get requestIdentifier(): Identifier {
      return this._content["requestIdentifier"] as Identifier;
    }

    /** The actions, if any, produced by the evaluation of the artifact. */
    set result(value: Reference) {
      this._content["result"] = value;
    }

    get result(): Reference {
      return this._content["result"] as Reference;
    }

    /**
     * The status of the response. If the evaluation is completed successfully,
     * the status will indicate success. However, in order to complete the
     * evaluation, the engine may require more information. In this case, the
     * status will be data-required, and the response will contain a description
     * of the additional required information. If the evaluation completed
     * successfully, but the engine determines that a potentially more accurate
     * response could be provided if more data was available, the status will be
     * data-requested, and the response will contain a description of the
     * additional requested information.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient for which the request was processed. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /** The details of a healthcare service available at a location. */
  export class HealthcareService extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/HealthcareService";

    /**
     * This flag is used to mark the record to not be used. This is not used
     * when a center is closed for maintenance, or for holidays, the
     * notAvailable period is to be used for this.
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Indicates whether or not a prospective consumer will require an
     * appointment for a particular service at a site to be provided by the
     * Organization. Indicates if an appointment is required for access to this
     * service.
     */
    set appointmentRequired(value: Boolean) {
      this._content["appointmentRequired"] = value;
    }

    get appointmentRequired(): Boolean {
      return this._content["appointmentRequired"] as Boolean;
    }

    /**
     * A description of site availability exceptions, e.g. public holiday
     * availability. Succinctly describing all possible exceptions to normal
     * site availability as details in the available Times and not available
     * Times.
     */
    set availabilityExceptions(value: String) {
      this._content["availabilityExceptions"] = value;
    }

    get availabilityExceptions(): String {
      return this._content["availabilityExceptions"] as String;
    }

    /** A collection of times that the Service Site is available. */
    set availableTime(value: Array<BackboneElement>) {
      this._content["availableTime"] = value;
    }

    get availableTime(): Array<BackboneElement> {
      return this._content["availableTime"] as Array<BackboneElement>;
    }

    /** Identifies the broad category of service being performed or delivered. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** Collection of characteristics (attributes). */
    set characteristic(value: Array<CodeableConcept>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<CodeableConcept> {
      return this._content["characteristic"] as Array<CodeableConcept>;
    }

    /**
     * Any additional description of the service and/or any specific issues not
     * covered by the other attributes, which can be displayed as further detail
     * under the serviceName.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /**
     * Some services are specifically made available in multiple languages, this
     * property permits a directory to declare the languages this is offered in.
     * Typically this is only provided where a service operates in communities
     * with mixed languages used.
     */
    set communication(value: Array<CodeableConcept>) {
      this._content["communication"] = value;
    }

    get communication(): Array<CodeableConcept> {
      return this._content["communication"] as Array<CodeableConcept>;
    }

    /**
     * The location(s) that this service is available to (not where the service
     * is provided).
     */
    set coverageArea(value: Array<Reference>) {
      this._content["coverageArea"] = value;
    }

    get coverageArea(): Array<Reference> {
      return this._content["coverageArea"] as Array<Reference>;
    }

    /**
     * Does this service have specific eligibility requirements that need to be
     * met in order to use the service?
     */
    set eligibility(value: Array<BackboneElement>) {
      this._content["eligibility"] = value;
    }

    get eligibility(): Array<BackboneElement> {
      return this._content["eligibility"] as Array<BackboneElement>;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * specific healthcare services defined at this resource.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /** Extra details about the service that can't be placed in the other fields. */
    set extraDetails(value: Markdown) {
      this._content["extraDetails"] = value;
    }

    get extraDetails(): Markdown {
      return this._content["extraDetails"] as Markdown;
    }

    /** External identifiers for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The location(s) where this healthcare service may be provided. */
    set location(value: Array<Reference>) {
      this._content["location"] = value;
    }

    get location(): Array<Reference> {
      return this._content["location"] as Array<Reference>;
    }

    /**
     * Further description of the service as it would be presented to a consumer
     * while searching.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The HealthcareService is not available during this period of time due to
     * the provided reason.
     */
    set notAvailable(value: Array<BackboneElement>) {
      this._content["notAvailable"] = value;
    }

    get notAvailable(): Array<BackboneElement> {
      return this._content["notAvailable"] as Array<BackboneElement>;
    }

    /**
     * If there is a photo/symbol associated with this HealthcareService, it may
     * be included here to facilitate quick identification of the service in a
     * list.
     */
    set photo(value: Attachment) {
      this._content["photo"] = value;
    }

    get photo(): Attachment {
      return this._content["photo"] as Attachment;
    }

    /** Programs that this service is applicable to. */
    set program(value: Array<CodeableConcept>) {
      this._content["program"] = value;
    }

    get program(): Array<CodeableConcept> {
      return this._content["program"] as Array<CodeableConcept>;
    }

    /** The organization that provides this healthcare service. */
    set providedBy(value: Reference) {
      this._content["providedBy"] = value;
    }

    get providedBy(): Reference {
      return this._content["providedBy"] as Reference;
    }

    /**
     * Ways that the service accepts referrals, if this is not provided then it
     * is implied that no referral is required.
     */
    set referralMethod(value: Array<CodeableConcept>) {
      this._content["referralMethod"] = value;
    }

    get referralMethod(): Array<CodeableConcept> {
      return this._content["referralMethod"] as Array<CodeableConcept>;
    }

    /**
     * The code(s) that detail the conditions under which the healthcare service
     * is available/offered.
     */
    set serviceProvisionCode(value: Array<CodeableConcept>) {
      this._content["serviceProvisionCode"] = value;
    }

    get serviceProvisionCode(): Array<CodeableConcept> {
      return this._content["serviceProvisionCode"] as Array<CodeableConcept>;
    }

    /**
     * Collection of specialties handled by the service site. This is more of a
     * medical term.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** List of contacts related to this specific healthcare service. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** The specific type of service that may be delivered or performed. */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /**
   * Representation of the content produced in a DICOM imaging study. A study
   * comprises a set of series, each of which includes a set of Service-Object
   * Pair Instances (SOP Instances - images or other data) acquired or produced
   * in a common context. A series is of only one modality (e.g. X-ray, CT, MR,
   * ultrasound), but a study may have multiple series of different modalities.
   */
  export class ImagingStudy extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ImagingStudy";

    /**
     * A list of the diagnostic requests that resulted in this imaging study
     * being performed.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The Imaging Manager description of the study. Institution-generated
     * description or classification of the Study (component) performed.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * during which this ImagingStudy is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The network service providing access (e.g., query, view, or retrieval)
     * for the study. See implementation notes for information about using DICOM
     * endpoints. A study-level endpoint applies to each series in the study,
     * unless overridden by a series-level endpoint with the same
     * Endpoint.connectionType.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /**
     * Identifiers for the ImagingStudy such as DICOM Study Instance UID, and
     * Accession Number.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Who read the study and interpreted the images or other content. */
    set interpreter(value: Array<Reference>) {
      this._content["interpreter"] = value;
    }

    get interpreter(): Array<Reference> {
      return this._content["interpreter"] as Array<Reference>;
    }

    /** The principal physical location where the ImagingStudy was performed. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * A list of all the series.modality values that are actual acquisition
     * modalities, i.e. those in the DICOM Context Group 29 (value set OID
     * 1.2.840.10008.6.1.19).
     */
    set modality(value: Array<Coding>) {
      this._content["modality"] = value;
    }

    get modality(): Array<Coding> {
      return this._content["modality"] as Array<Coding>;
    }

    /**
     * Per the recommended DICOM mapping, this element is derived from the Study
     * Description attribute (0008,1030). Observations or findings about the
     * imaging study should be recorded in another resource, e.g. Observation,
     * and not in this element.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Number of SOP Instances in Study. This value given may be larger than the
     * number of instance elements this resource contains due to resource
     * availability, security, or other factors. This element should be present
     * if any instance elements are present.
     */
    set numberOfInstances(value: UnsignedInt) {
      this._content["numberOfInstances"] = value;
    }

    get numberOfInstances(): UnsignedInt {
      return this._content["numberOfInstances"] as UnsignedInt;
    }

    /**
     * Number of Series in the Study. This value given may be larger than the
     * number of series elements this Resource contains due to resource
     * availability, security, or other factors. This element should be present
     * if any series elements are present.
     */
    set numberOfSeries(value: UnsignedInt) {
      this._content["numberOfSeries"] = value;
    }

    get numberOfSeries(): UnsignedInt {
      return this._content["numberOfSeries"] as UnsignedInt;
    }

    /** The code for the performed procedure type. */
    set procedureCode(value: Array<CodeableConcept>) {
      this._content["procedureCode"] = value;
    }

    get procedureCode(): Array<CodeableConcept> {
      return this._content["procedureCode"] as Array<CodeableConcept>;
    }

    /** The procedure which this ImagingStudy was part of. */
    set procedureReference(value: Reference) {
      this._content["procedureReference"] = value;
    }

    get procedureReference(): Reference {
      return this._content["procedureReference"] as Reference;
    }

    /**
     * Description of clinical condition indicating why the ImagingStudy was
     * requested.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this Study. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** The requesting/referring physician. */
    set referrer(value: Reference) {
      this._content["referrer"] = value;
    }

    get referrer(): Reference {
      return this._content["referrer"] as Reference;
    }

    /** Each study has one or more series of images or other content. */
    set series(value: Array<BackboneElement>) {
      this._content["series"] = value;
    }

    get series(): Array<BackboneElement> {
      return this._content["series"] as Array<BackboneElement>;
    }

    /** Date and time the study started. */
    set started(value: DateTime) {
      this._content["started"] = value;
    }

    get started(): DateTime {
      return this._content["started"] as DateTime;
    }

    /** The current state of the ImagingStudy. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The subject, typically a patient, of the imaging study. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * Describes the event of a patient being administered a vaccine or a record
   * of an immunization as reported by a patient, a clinician or another party.
   */
  export class Immunization extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Immunization";

    /** The quantity of vaccine product that was administered. */
    set doseQuantity(value: Quantity) {
      this._content["doseQuantity"] = value;
    }

    get doseQuantity(): Quantity {
      return this._content["doseQuantity"] as Quantity;
    }

    /**
     * Educational material presented to the patient (or guardian) at the time
     * of vaccine administration.
     */
    set education(value: Array<BackboneElement>) {
      this._content["education"] = value;
    }

    get education(): Array<BackboneElement> {
      return this._content["education"] as Array<BackboneElement>;
    }

    /**
     * The visit or admission or other contact between patient and health care
     * provider the immunization was performed as part of.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Date vaccine batch expires. */
    set expirationDate(value: Date) {
      this._content["expirationDate"] = value;
    }

    get expirationDate(): Date {
      return this._content["expirationDate"] as Date;
    }

    /**
     * Indicates the source of the vaccine actually administered. This may be
     * different than the patient eligibility (e.g. the patient may be eligible
     * for a publically purchased vaccine but due to inventory issues, vaccine
     * purchased with private funds was actually administered).
     */
    set fundingSource(value: CodeableConcept) {
      this._content["fundingSource"] = value;
    }

    get fundingSource(): CodeableConcept {
      return this._content["fundingSource"] as CodeableConcept;
    }

    /** A unique identifier assigned to this immunization record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Indication if a dose is considered to be subpotent. By default, a dose
     * should be considered to be potent.
     */
    set isSubpotent(value: Boolean) {
      this._content["isSubpotent"] = value;
    }

    get isSubpotent(): Boolean {
      return this._content["isSubpotent"] as Boolean;
    }

    /** The service delivery location where the vaccine administration occurred. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Lot number of the vaccine product. */
    set lotNumber(value: String) {
      this._content["lotNumber"] = value;
    }

    get lotNumber(): String {
      return this._content["lotNumber"] as String;
    }

    /** Name of vaccine manufacturer. */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /**
     * Extra information about the immunization that is not conveyed by the
     * other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Date vaccine administered or was to be administered. */
    set occurrence(value: DateTime | String) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrenceString(): String {
      return this._content["occurrence"] as String;
    }

    /** The patient who either received or did not receive the immunization. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Indicates who performed the immunization event. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * An indication that the content of the record is based on information from
     * the person who administered the vaccine. This reflects the context under
     * which the data was originally recorded.
     */
    set primarySource(value: Boolean) {
      this._content["primarySource"] = value;
    }

    get primarySource(): Boolean {
      return this._content["primarySource"] as Boolean;
    }

    /** Indicates a patient's eligibility for a funding program. */
    set programEligibility(value: Array<CodeableConcept>) {
      this._content["programEligibility"] = value;
    }

    get programEligibility(): Array<CodeableConcept> {
      return this._content["programEligibility"] as Array<CodeableConcept>;
    }

    /**
     * The protocol (set of recommendations) being followed by the provider who
     * administered the dose.
     */
    set protocolApplied(value: Array<BackboneElement>) {
      this._content["protocolApplied"] = value;
    }

    get protocolApplied(): Array<BackboneElement> {
      return this._content["protocolApplied"] as Array<BackboneElement>;
    }

    /**
     * Categorical data indicating that an adverse event is associated in time
     * to an immunization.
     */
    set reaction(value: Array<BackboneElement>) {
      this._content["reaction"] = value;
    }

    get reaction(): Array<BackboneElement> {
      return this._content["reaction"] as Array<BackboneElement>;
    }

    /** Reasons why the vaccine was administered. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Condition, Observation or DiagnosticReport that supports why the
     * immunization was administered.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The date the occurrence of the immunization was first captured in the
     * record - potentially significantly after the occurrence of the event.
     */
    set recorded(value: DateTime) {
      this._content["recorded"] = value;
    }

    get recorded(): DateTime {
      return this._content["recorded"] as DateTime;
    }

    /**
     * The source of the data when the report of the immunization event is not
     * based on information from the person who administered the vaccine.
     */
    set reportOrigin(value: CodeableConcept) {
      this._content["reportOrigin"] = value;
    }

    get reportOrigin(): CodeableConcept {
      return this._content["reportOrigin"] as CodeableConcept;
    }

    /** The path by which the vaccine product is taken into the body. */
    set route(value: CodeableConcept) {
      this._content["route"] = value;
    }

    get route(): CodeableConcept {
      return this._content["route"] as CodeableConcept;
    }

    /** Body site where vaccine was administered. */
    set site(value: CodeableConcept) {
      this._content["site"] = value;
    }

    get site(): CodeableConcept {
      return this._content["site"] as CodeableConcept;
    }

    /** Indicates the current status of the immunization event. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Indicates the reason the immunization event was not performed. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /** Reason why a dose is considered to be subpotent. */
    set subpotentReason(value: Array<CodeableConcept>) {
      this._content["subpotentReason"] = value;
    }

    get subpotentReason(): Array<CodeableConcept> {
      return this._content["subpotentReason"] as Array<CodeableConcept>;
    }

    /** Vaccine that was administered or was to be administered. */
    set vaccineCode(value: CodeableConcept) {
      this._content["vaccineCode"] = value;
    }

    get vaccineCode(): CodeableConcept {
      return this._content["vaccineCode"] as CodeableConcept;
    }
  }

  /**
   * Describes a comparison of an immunization event against published
   * recommendations to determine if the administration is "valid" in relation
   * to those recommendations.
   */
  export class ImmunizationEvaluation extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImmunizationEvaluation";

    /** Indicates the authority who published the protocol (e.g. ACIP). */
    set authority(value: Reference) {
      this._content["authority"] = value;
    }

    get authority(): Reference {
      return this._content["authority"] as Reference;
    }

    /**
     * The date the evaluation of the vaccine administration event was
     * performed.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Additional information about the evaluation. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Nominal position in a series. */
    set doseNumber(value: PositiveInt | String) {
      this._content["doseNumber"] = value;
    }

    get doseNumberPositiveInt(): PositiveInt {
      return this._content["doseNumber"] as PositiveInt;
    }

    get doseNumberString(): String {
      return this._content["doseNumber"] as String;
    }

    /**
     * Indicates if the dose is valid or not valid with respect to the published
     * recommendations.
     */
    set doseStatus(value: CodeableConcept) {
      this._content["doseStatus"] = value;
    }

    get doseStatus(): CodeableConcept {
      return this._content["doseStatus"] as CodeableConcept;
    }

    /**
     * Provides an explanation as to why the vaccine administration event is
     * valid or not relative to the published recommendations.
     */
    set doseStatusReason(value: Array<CodeableConcept>) {
      this._content["doseStatusReason"] = value;
    }

    get doseStatusReason(): Array<CodeableConcept> {
      return this._content["doseStatusReason"] as Array<CodeableConcept>;
    }

    /** A unique identifier assigned to this immunization evaluation record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The vaccine administration event being evaluated. */
    set immunizationEvent(value: Reference) {
      this._content["immunizationEvent"] = value;
    }

    get immunizationEvent(): Reference {
      return this._content["immunizationEvent"] as Reference;
    }

    /** The individual for whom the evaluation is being done. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * One possible path to achieve presumed immunity against a disease - within
     * the context of an authority.
     */
    set series(value: String) {
      this._content["series"] = value;
    }

    get series(): String {
      return this._content["series"] as String;
    }

    /** The recommended number of doses to achieve immunity. */
    set seriesDoses(value: PositiveInt | String) {
      this._content["seriesDoses"] = value;
    }

    get seriesDosesPositiveInt(): PositiveInt {
      return this._content["seriesDoses"] as PositiveInt;
    }

    get seriesDosesString(): String {
      return this._content["seriesDoses"] as String;
    }

    /**
     * Indicates the current status of the evaluation of the vaccination
     * administration event.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The vaccine preventable disease the dose is being evaluated against. */
    set targetDisease(value: CodeableConcept) {
      this._content["targetDisease"] = value;
    }

    get targetDisease(): CodeableConcept {
      return this._content["targetDisease"] as CodeableConcept;
    }
  }

  /**
   * A patient's point-in-time set of recommendations (i.e. forecasting)
   * according to a published schedule with optional supporting justification.
   */
  export class ImmunizationRecommendation extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation";

    /** Indicates the authority who published the protocol (e.g. ACIP). */
    set authority(value: Reference) {
      this._content["authority"] = value;
    }

    get authority(): Reference {
      return this._content["authority"] as Reference;
    }

    /** The date the immunization recommendation(s) were created. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** A unique identifier assigned to this particular recommendation record. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The patient the recommendation(s) are for. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Vaccine administration recommendations. */
    set recommendation(value: Array<BackboneElement>) {
      this._content["recommendation"] = value;
    }

    get recommendation(): Array<BackboneElement> {
      return this._content["recommendation"] as Array<BackboneElement>;
    }
  }

  /**
   * A set of rules of how a particular interoperability or standards problem is
   * solved - typically through the use of FHIR resources. This resource is used
   * to gather all the parts of an implementation guide into a logical whole and
   * to publish a computable definition of all the parts.
   */
  export class ImplementationGuide extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ImplementationGuide";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the implementation guide and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the implementation guide.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the implementation guide was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the implementation guide changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * The information needed by an IG publisher tool to publish the whole
     * implementation guide.
     */
    set definition(value: BackboneElement) {
      this._content["definition"] = value;
    }

    get definition(): BackboneElement {
      return this._content["definition"] as BackboneElement;
    }

    /**
     * Another implementation guide that this implementation depends on.
     * Typically, an implementation guide uses value sets, profiles etc.defined
     * in other implementation guides.
     */
    set dependsOn(value: Array<BackboneElement>) {
      this._content["dependsOn"] = value;
    }

    get dependsOn(): Array<BackboneElement> {
      return this._content["dependsOn"] as Array<BackboneElement>;
    }

    /**
     * A free text natural language description of the implementation guide from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this implementation guide is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * The version(s) of the FHIR specification that this ImplementationGuide
     * targets - e.g. describes how to use. The value of this element is the
     * formal version of the specification, without the revision number, e.g.
     * [publication].[major].[minor], which is 4.3.0 for this version.
     */
    set fhirVersion(value: Array<Code>) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Array<Code> {
      return this._content["fhirVersion"] as Array<Code>;
    }

    /**
     * A set of profiles that all resources covered by this implementation guide
     * must conform to.
     */
    set global(value: Array<BackboneElement>) {
      this._content["global"] = value;
    }

    get global(): Array<BackboneElement> {
      return this._content["global"] as Array<BackboneElement>;
    }

    /**
     * A legal or geographic region in which the implementation guide is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The license that applies to this Implementation Guide, using an SPDX
     * license code, or 'not-open-source'.
     */
    set license(value: Code) {
      this._content["license"] = value;
    }

    get license(): Code {
      return this._content["license"] as Code;
    }

    /**
     * Information about an assembled implementation guide, created by the
     * publication tooling.
     */
    set manifest(value: BackboneElement) {
      this._content["manifest"] = value;
    }

    get manifest(): BackboneElement {
      return this._content["manifest"] as BackboneElement;
    }

    /**
     * A natural language name identifying the implementation guide. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The NPM package name for this Implementation Guide, used in the NPM
     * package distribution, which is the primary mechanism by which FHIR based
     * tooling manages IG dependencies. This value must be globally unique, and
     * should be assigned with care.
     */
    set packageId(value: Id) {
      this._content["packageId"] = value;
    }

    get packageId(): Id {
      return this._content["packageId"] as Id;
    }

    /**
     * The name of the organization or individual that published the
     * implementation guide.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * The status of this implementation guide. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the implementation guide. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this implementation guide when
     * it is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this implementation guide is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * implementation guide is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate implementation guide instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the
     * implementation guide when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the
     * implementation guide author and is not expected to be globally unique.
     * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version
     * is not available. There is also no expectation that versions can be
     * placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** An ingredient of a manufactured item or pharmaceutical product. */
  export class Ingredient extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Ingredient";

    /**
     * If the ingredient is a known or suspected allergen. Note that this is a
     * property of the substance, so if a reference to a SubstanceDefinition is
     * used to decribe that (rather than just a code), the allergen information
     * should go there, not here.
     */
    set allergenicIndicator(value: Boolean) {
      this._content["allergenicIndicator"] = value;
    }

    get allergenicIndicator(): Boolean {
      return this._content["allergenicIndicator"] as Boolean;
    }

    /** The product which this ingredient is a constituent part of. */
    set for(value: Array<Reference>) {
      this._content["for"] = value;
    }

    get for(): Array<Reference> {
      return this._content["for"] as Array<Reference>;
    }

    /**
     * A classification of the ingredient identifying its precise purpose(s) in
     * the drug product. This extends the Ingredient.role to add more detail.
     * Example: antioxidant, alkalizing agent.
     */
    set function(value: Array<CodeableConcept>) {
      this._content["function"] = value;
    }

    get function(): Array<CodeableConcept> {
      return this._content["function"] as Array<CodeableConcept>;
    }

    /**
     * The identifier(s) of this Ingredient that are assigned by business
     * processes and/or used to refer to it when a direct URL reference to the
     * resource itself is not appropriate.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * The organization(s) that manufacture this ingredient. Can be used to
     * indicate: 1) Organizations we are aware of that manufacture this
     * ingredient 2) Specific Manufacturer(s) currently being used 3) Set of
     * organisations allowed to manufacture this ingredient for this product
     * Users must be clear on the application of context relevant to their use
     * case.
     */
    set manufacturer(value: Array<BackboneElement>) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Array<BackboneElement> {
      return this._content["manufacturer"] as Array<BackboneElement>;
    }

    /**
     * A classification of the ingredient identifying its purpose within the
     * product, e.g. active, inactive.
     */
    set role(value: CodeableConcept) {
      this._content["role"] = value;
    }

    get role(): CodeableConcept {
      return this._content["role"] as CodeableConcept;
    }

    /**
     * The status of this ingredient. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The substance that comprises this ingredient. */
    set substance(value: BackboneElement) {
      this._content["substance"] = value;
    }

    get substance(): BackboneElement {
      return this._content["substance"] as BackboneElement;
    }
  }

  /** Details of a Health Insurance product/plan provided by an organization. */
  export class InsurancePlan extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/InsurancePlan";

    /**
     * An organization which administer other services such as underwriting,
     * customer service and/or claims processing on behalf of the health
     * insurance product owner.
     */
    set administeredBy(value: Reference) {
      this._content["administeredBy"] = value;
    }

    get administeredBy(): Reference {
      return this._content["administeredBy"] as Reference;
    }

    /**
     * A list of alternate names that the product is known as, or was known as
     * in the past.
     */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /** The contact for the health insurance product for a certain purpose. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /** Details about the coverage offered by the insurance product. */
    set coverage(value: Array<BackboneElement>) {
      this._content["coverage"] = value;
    }

    get coverage(): Array<BackboneElement> {
      return this._content["coverage"] as Array<BackboneElement>;
    }

    /**
     * The geographic region in which a health insurance product's benefits
     * apply.
     */
    set coverageArea(value: Array<Reference>) {
      this._content["coverageArea"] = value;
    }

    get coverageArea(): Array<Reference> {
      return this._content["coverageArea"] as Array<Reference>;
    }

    /**
     * The technical endpoints providing access to services operated for the
     * health insurance product.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /**
     * Business identifiers assigned to this health insurance product which
     * remain constant as the resource is updated and propagates from server to
     * server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Official name of the health insurance product as designated by the owner. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** Reference to the network included in the health insurance product. */
    set network(value: Array<Reference>) {
      this._content["network"] = value;
    }

    get network(): Array<Reference> {
      return this._content["network"] as Array<Reference>;
    }

    /**
     * The entity that is providing the health insurance product and
     * underwriting the risk. This is typically an insurance carriers, other
     * third-party payers, or health plan sponsors comonly referred to as
     * 'payers'.
     */
    set ownedBy(value: Reference) {
      this._content["ownedBy"] = value;
    }

    get ownedBy(): Reference {
      return this._content["ownedBy"] as Reference;
    }

    /** The period of time that the health insurance product is available. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Details about an insurance plan. */
    set plan(value: Array<BackboneElement>) {
      this._content["plan"] = value;
    }

    get plan(): Array<BackboneElement> {
      return this._content["plan"] as Array<BackboneElement>;
    }

    /** The current state of the health insurance product. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The kind of health insurance product. */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /**
   * Invoice containing collected ChargeItems from an Account with calculated
   * individual and total price for Billing purpose.
   */
  export class Invoice extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Invoice";

    /** Account which is supposed to be balanced with this Invoice. */
    set account(value: Reference) {
      this._content["account"] = value;
    }

    get account(): Reference {
      return this._content["account"] as Reference;
    }

    /**
     * In case of Invoice cancellation a reason must be given (entered in error,
     * superseded by corrected invoice etc.).
     */
    set cancelledReason(value: String) {
      this._content["cancelledReason"] = value;
    }

    get cancelledReason(): String {
      return this._content["cancelledReason"] as String;
    }

    /** Date/time(s) of when this Invoice was posted. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Identifier of this Invoice, often used for reference in correspondence
     * about this invoice or for tracking of payments.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The organizationissuing the Invoice. */
    set issuer(value: Reference) {
      this._content["issuer"] = value;
    }

    get issuer(): Reference {
      return this._content["issuer"] as Reference;
    }

    /**
     * Each line item represents one charge for goods and services rendered.
     * Details such as date, code and amount are found in the referenced
     * ChargeItem resource.
     */
    set lineItem(value: Array<BackboneElement>) {
      this._content["lineItem"] = value;
    }

    get lineItem(): Array<BackboneElement> {
      return this._content["lineItem"] as Array<BackboneElement>;
    }

    /**
     * Comments made about the invoice by the issuer, subject, or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Indicates who or what performed or participated in the charged service. */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /**
     * Payment details such as banking details, period of payment, deductibles,
     * methods of payment.
     */
    set paymentTerms(value: Markdown) {
      this._content["paymentTerms"] = value;
    }

    get paymentTerms(): Markdown {
      return this._content["paymentTerms"] as Markdown;
    }

    /** The individual or Organization responsible for balancing of this invoice. */
    set recipient(value: Reference) {
      this._content["recipient"] = value;
    }

    get recipient(): Reference {
      return this._content["recipient"] as Reference;
    }

    /** The current state of the Invoice. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The individual or set of individuals receiving the goods and services
     * billed in this invoice.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Invoice total, tax included. */
    set totalGross(value: Money) {
      this._content["totalGross"] = value;
    }

    get totalGross(): Money {
      return this._content["totalGross"] as Money;
    }

    /** Invoice total , taxes excluded. */
    set totalNet(value: Money) {
      this._content["totalNet"] = value;
    }

    get totalNet(): Money {
      return this._content["totalNet"] as Money;
    }

    /**
     * Type of Invoice depending on domain, realm an usage (e.g.
     * internal/external, dental, preliminary).
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * The Library resource is a general-purpose container for knowledge asset
   * definitions. It can be used to describe and expose existing knowledge
   * assets such as logic libraries and information model descriptions, as well
   * as to describe a collection of knowledge assets.
   */
  export class Library extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Library";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The content of the library as an Attachment. The content may be a
     * reference to a url, or may be directly embedded as a base-64 string.
     * Either way, the contentType of the attachment determines how to interpret
     * the content.
     */
    set content(value: Array<Attachment>) {
      this._content["content"] = value;
    }

    get content(): Array<Attachment> {
      return this._content["content"] as Array<Attachment>;
    }

    /**
     * A copyright statement relating to the library and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the library.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * Describes a set of data that must be provided in order to be able to
     * successfully perform the computations defined by the library.
     */
    set dataRequirement(value: Array<DataRequirement>) {
      this._content["dataRequirement"] = value;
    }

    get dataRequirement(): Array<DataRequirement> {
      return this._content["dataRequirement"] as Array<DataRequirement>;
    }

    /**
     * The date (and optionally time) when the library was published. The date
     * must change when the business version changes and it must change if the
     * status code changes. In addition, it should change when the substantive
     * content of the library changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the library from a consumer's
     * perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the library content was or is planned to be in
     * active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this library is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this library when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance. e.g. CMS or NQF identifiers for a measure
     * artifact. Note that at least one identifier is required for
     * non-experimental active artifacts.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A legal or geographic region in which the library is intended to be used. */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the library. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The parameter element defines parameters used by the library. */
    set parameter(value: Array<ParameterDefinition>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<ParameterDefinition> {
      return this._content["parameter"] as Array<ParameterDefinition>;
    }

    /** The name of the organization or individual that published the library. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this library is needed and why it has been designed as
     * it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The status of this library. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A code or group definition that describes the intended subject of the
     * contents of the library.
     */
    set subject(value: CodeableConcept | Reference) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * An explanatory or alternate title for the library giving additional
     * information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /** A short, descriptive, user-friendly title for the library. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the library. Topics provide
     * a high-level categorization of the library that can be useful for
     * filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * Identifies the type of library such as a Logic Library, Model Definition,
     * Asset Collection, or Module Definition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * An absolute URI that is used to identify this library when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * library is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the library is stored
     * on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the library is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate library instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the library when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the library author and is not expected to
     * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
     * if a managed version is not available. There is also no expectation that
     * versions can be placed in a lexicographical sequence. To provide a
     * version consistent with the Decision Support Service specification, use
     * the format Major.Minor.Revision (e.g. 1.0.0). For more information on
     * versioning knowledge assets, refer to the Decision Support Service
     * specification. Note that a version is required for non-experimental
     * active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Identifies two or more records (resource instances) that refer to the same
   * real-world "occurrence".
   */
  export class Linkage extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Linkage";

    /**
     * Indicates whether the asserted set of linkages are considered to be "in
     * effect".
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Identifies the user or organization responsible for asserting the
     * linkages as well as the user or organization who establishes the context
     * in which the nature of each linkage is evaluated.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /**
     * Identifies which record considered as the reference to the same
     * real-world occurrence as well as how the items should be evaluated within
     * the collection of linked items.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }
  }

  /** A list is a curated collection of resources. */
  export class List extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/List";

    /** This code defines the purpose of the list - why it was created. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** The date that the list was prepared. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** If the list is empty, why the list is empty. */
    set emptyReason(value: CodeableConcept) {
      this._content["emptyReason"] = value;
    }

    get emptyReason(): CodeableConcept {
      return this._content["emptyReason"] as CodeableConcept;
    }

    /** The encounter that is the context in which this list was created. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Entries in this list. */
    set entry(value: Array<BackboneElement>) {
      this._content["entry"] = value;
    }

    get entry(): Array<BackboneElement> {
      return this._content["entry"] as Array<BackboneElement>;
    }

    /**
     * Identifier for the List assigned for business purposes outside the
     * context of FHIR.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * How this list was prepared - whether it is a working list that is
     * suitable for being maintained on an ongoing basis, or if it represents a
     * snapshot of a list of items from another source, or whether it is a
     * prepared list where items may be marked as added, modified or deleted.
     */
    set mode(value: Code) {
      this._content["mode"] = value;
    }

    get mode(): Code {
      return this._content["mode"] as Code;
    }

    /** Comments that apply to the overall list. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** What order applies to the items in the list. */
    set orderedBy(value: CodeableConcept) {
      this._content["orderedBy"] = value;
    }

    get orderedBy(): CodeableConcept {
      return this._content["orderedBy"] as CodeableConcept;
    }

    /**
     * The entity responsible for deciding what the contents of the list were.
     * Where the list was created by a human, this is the same as the author of
     * the list.
     */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /** Indicates the current state of this list. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The common subject (or patient) of the resources that are in the list if
     * there is one.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** A label for the list assigned by the author. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }
  }

  /**
   * Details and position information for a physical place where services are
   * provided and resources and participants may be stored, found, contained, or
   * accommodated.
   */
  export class Location extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Location";

    /** Physical location. */
    set address(value: Address) {
      this._content["address"] = value;
    }

    get address(): Address {
      return this._content["address"] as Address;
    }

    /**
     * A list of alternate names that the location is known as, or was known as,
     * in the past.
     */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /**
     * A description of when the locations opening ours are different to normal,
     * e.g. public holiday availability. Succinctly describing all possible
     * exceptions to normal site availability as detailed in the opening hours
     * Times.
     */
    set availabilityExceptions(value: String) {
      this._content["availabilityExceptions"] = value;
    }

    get availabilityExceptions(): String {
      return this._content["availabilityExceptions"] as String;
    }

    /**
     * Description of the Location, which helps in finding or referencing the
     * place.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * location.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /** What days/times during a week is this location usually open. */
    set hoursOfOperation(value: Array<BackboneElement>) {
      this._content["hoursOfOperation"] = value;
    }

    get hoursOfOperation(): Array<BackboneElement> {
      return this._content["hoursOfOperation"] as Array<BackboneElement>;
    }

    /** Unique code or number identifying the location to its users. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The organization responsible for the provisioning and upkeep of the
     * location.
     */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /**
     * Indicates whether a resource instance represents a specific location or a
     * class of locations.
     */
    set mode(value: Code) {
      this._content["mode"] = value;
    }

    get mode(): Code {
      return this._content["mode"] as Code;
    }

    /** Name of the location as used by humans. Does not need to be unique. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The operational status covers operation values most relevant to beds (but
     * can also apply to rooms/units/chairs/etc. such as an isolation
     * unit/dialysis chair). This typically covers concepts such as
     * contamination, housekeeping, and other activities like maintenance.
     */
    set operationalStatus(value: Coding) {
      this._content["operationalStatus"] = value;
    }

    get operationalStatus(): Coding {
      return this._content["operationalStatus"] as Coding;
    }

    /** Another Location of which this Location is physically a part of. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** Physical form of the location, e.g. building, room, vehicle, road. */
    set physicalType(value: CodeableConcept) {
      this._content["physicalType"] = value;
    }

    get physicalType(): CodeableConcept {
      return this._content["physicalType"] as CodeableConcept;
    }

    /**
     * The absolute geographic location of the Location, expressed using the
     * WGS84 datum (This is the same co-ordinate system used in KML).
     */
    set position(value: BackboneElement) {
      this._content["position"] = value;
    }

    get position(): BackboneElement {
      return this._content["position"] as BackboneElement;
    }

    /**
     * The status property covers the general availability of the resource, not
     * the current value which may be covered by the operationStatus, or by a
     * schedule/slots if they are configured for the location.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The contact details of communication devices available at the location.
     * This can include phone numbers, fax numbers, mobile numbers, email
     * addresses and web sites.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** Indicates the type of function performed at the location. */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /**
   * The definition and characteristics of a medicinal manufactured item, such
   * as a tablet or capsule, as contained in a packaged medicinal product.
   */
  export class ManufacturedItemDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ManufacturedItemDefinition";

    /** Unique identifier. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The ingredients of this manufactured item. This is only needed if the
     * ingredients are not specified by incoming references from the Ingredient
     * resource.
     */
    set ingredient(value: Array<CodeableConcept>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<CodeableConcept> {
      return this._content["ingredient"] as Array<CodeableConcept>;
    }

    /**
     * Dose form as manufactured and before any transformation into the
     * pharmaceutical product.
     */
    set manufacturedDoseForm(value: CodeableConcept) {
      this._content["manufacturedDoseForm"] = value;
    }

    get manufacturedDoseForm(): CodeableConcept {
      return this._content["manufacturedDoseForm"] as CodeableConcept;
    }

    /**
     * Manufacturer of the item (Note that this should be named "manufacturer"
     * but it currently causes technical issues).
     */
    set manufacturer(value: Array<Reference>) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Array<Reference> {
      return this._content["manufacturer"] as Array<Reference>;
    }

    /** General characteristics of this item. */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /** The status of this item. Enables tracking the life-cycle of the content. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The “real world” units in which the quantity of the manufactured item is
     * described.
     */
    set unitOfPresentation(value: CodeableConcept) {
      this._content["unitOfPresentation"] = value;
    }

    get unitOfPresentation(): CodeableConcept {
      return this._content["unitOfPresentation"] as CodeableConcept;
    }
  }

  /** The Measure resource provides the definition of a quality measure. */
  export class Measure extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Measure";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * Provides a summary of relevant clinical guidelines or other clinical
     * recommendations supporting the measure.
     */
    set clinicalRecommendationStatement(value: Markdown) {
      this._content["clinicalRecommendationStatement"] = value;
    }

    get clinicalRecommendationStatement(): Markdown {
      return this._content["clinicalRecommendationStatement"] as Markdown;
    }

    /**
     * If this is a composite measure, the scoring method used to combine the
     * component measures to determine the composite score.
     */
    set compositeScoring(value: CodeableConcept) {
      this._content["compositeScoring"] = value;
    }

    get compositeScoring(): CodeableConcept {
      return this._content["compositeScoring"] as CodeableConcept;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the measure and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the measure.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the measure was published. The date
     * must change when the business version changes and it must change if the
     * status code changes. In addition, it should change when the substantive
     * content of the measure changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** Provides a description of an individual term used within the measure. */
    set definition(value: Array<Markdown>) {
      this._content["definition"] = value;
    }

    get definition(): Array<Markdown> {
      return this._content["definition"] as Array<Markdown>;
    }

    /**
     * A free text natural language description of the measure from a consumer's
     * perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Notices and disclaimers regarding the use of the measure or related to
     * intellectual property (such as code systems) referenced by the measure.
     */
    set disclaimer(value: Markdown) {
      this._content["disclaimer"] = value;
    }

    get disclaimer(): Markdown {
      return this._content["disclaimer"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the measure content was or is planned to be in
     * active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this measure is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /** A group of population criteria for the measure. */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * Additional guidance for the measure including how it can be used in a
     * clinical context, and the intent of the measure.
     */
    set guidance(value: Markdown) {
      this._content["guidance"] = value;
    }

    get guidance(): Markdown {
      return this._content["guidance"] as Markdown;
    }

    /**
     * A formal identifier that is used to identify this measure when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Information on whether an increase or decrease in score is the preferred
     * result (e.g., a higher score indicates better quality OR a lower score
     * indicates better quality OR quality is within a range).
     */
    set improvementNotation(value: CodeableConcept) {
      this._content["improvementNotation"] = value;
    }

    get improvementNotation(): CodeableConcept {
      return this._content["improvementNotation"] as CodeableConcept;
    }

    /** A legal or geographic region in which the measure is intended to be used. */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing the formal logic used by the
     * measure.
     */
    set library(value: Array<Canonical>) {
      this._content["library"] = value;
    }

    get library(): Array<Canonical> {
      return this._content["library"] as Array<Canonical>;
    }

    /**
     * A natural language name identifying the measure. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The name of the organization or individual that published the measure. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this measure is needed and why it has been designed as
     * it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Describes how to combine the information calculated, based on logic in
     * each of several populations, into one summarized result.
     */
    set rateAggregation(value: String) {
      this._content["rateAggregation"] = value;
    }

    get rateAggregation(): String {
      return this._content["rateAggregation"] as String;
    }

    /**
     * Provides a succinct statement of the need for the measure. Usually
     * includes statements pertaining to importance criterion: impact, gap in
     * care, and evidence.
     */
    set rationale(value: Markdown) {
      this._content["rationale"] = value;
    }

    get rationale(): Markdown {
      return this._content["rationale"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * A description of the risk adjustment factors that may impact the
     * resulting score for the measure and how they may be accounted for when
     * computing and reporting measure results.
     */
    set riskAdjustment(value: String) {
      this._content["riskAdjustment"] = value;
    }

    get riskAdjustment(): String {
      return this._content["riskAdjustment"] as String;
    }

    /**
     * Indicates how the calculation is performed for the measure, including
     * proportion, ratio, continuous-variable, and cohort. The value set is
     * extensible, allowing additional measure scoring types to be represented.
     */
    set scoring(value: CodeableConcept) {
      this._content["scoring"] = value;
    }

    get scoring(): CodeableConcept {
      return this._content["scoring"] as CodeableConcept;
    }

    /**
     * The status of this measure. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The intended subjects for the measure. If this element is not provided, a
     * Patient subject is assumed, but the subject of the measure can be
     * anything.
     */
    set subject(value: CodeableConcept | Reference) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * An explanatory or alternate title for the measure giving additional
     * information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /**
     * The supplemental data criteria for the measure report, specified as
     * either the name of a valid CQL expression within a referenced library, or
     * a valid FHIR Resource Path.
     */
    set supplementalData(value: Array<BackboneElement>) {
      this._content["supplementalData"] = value;
    }

    get supplementalData(): Array<BackboneElement> {
      return this._content["supplementalData"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the measure. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the measure. Topics provide
     * a high-level categorization grouping types of measures that can be useful
     * for filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * Indicates whether the measure is used to examine a process, an outcome
     * over time, a patient-reported outcome, or a structure measure such as
     * utilization.
     */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }

    /**
     * An absolute URI that is used to identify this measure when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * measure is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the measure is stored
     * on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description, from a clinical perspective, of how the measure
     * is used.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate measure instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the measure when
     * it is referenced in a specification, model, design or instance. This is
     * an arbitrary value managed by the measure author and is not expected to
     * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
     * if a managed version is not available. There is also no expectation that
     * versions can be placed in a lexicographical sequence. To provide a
     * version consistent with the Decision Support Service specification, use
     * the format Major.Minor.Revision (e.g. 1.0.0). For more information on
     * versioning knowledge assets, refer to the Decision Support Service
     * specification. Note that a version is required for non-experimental
     * active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The MeasureReport resource contains the results of the calculation of a
   * measure; and optionally a reference to the resources involved in that
   * calculation.
   */
  export class MeasureReport extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MeasureReport";

    /** The date this measure report was generated. */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A reference to a Bundle containing the Resources that were used in the
     * calculation of this measure.
     */
    set evaluatedResource(value: Array<Reference>) {
      this._content["evaluatedResource"] = value;
    }

    get evaluatedResource(): Array<Reference> {
      return this._content["evaluatedResource"] as Array<Reference>;
    }

    /**
     * The results of the calculation, one for each population group in the
     * measure.
     */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this MeasureReport when it
     * is represented in other formats or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Whether improvement in the measure is noted by an increase or decrease in
     * the measure score.
     */
    set improvementNotation(value: CodeableConcept) {
      this._content["improvementNotation"] = value;
    }

    get improvementNotation(): CodeableConcept {
      return this._content["improvementNotation"] as CodeableConcept;
    }

    /** A reference to the Measure that was calculated to produce this report. */
    set measure(value: Canonical) {
      this._content["measure"] = value;
    }

    get measure(): Canonical {
      return this._content["measure"] as Canonical;
    }

    /** The reporting period for which the report was calculated. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The individual, location, or organization that is reporting the data. */
    set reporter(value: Reference) {
      this._content["reporter"] = value;
    }

    get reporter(): Reference {
      return this._content["reporter"] as Reference;
    }

    /**
     * The MeasureReport status. No data will be available until the
     * MeasureReport status is complete.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Optional subject identifying the individual or individuals the report is
     * for.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The type of measure report. This may be an individual report, which
     * provides the score for the measure for an individual member of the
     * population; a subject-listing, which returns the list of members that
     * meet the various criteria in the measure; a summary report, which returns
     * a population count for each of the criteria in the measure; or a
     * data-collection, which enables the MeasureReport to be used to exchange
     * the data-of-interest for a quality measure.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * A photo, video, or audio recording acquired or used in healthcare. The
   * actual content may be inline or provided by direct reference.
   */
  export class Media extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Media";

    /**
     * A procedure that is fulfilled in whole or in part by the creation of this
     * media.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the site on the subject's body where the observation was made
     * (i.e. the target site).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /**
     * The actual content of the media - inline or by direct reference to the
     * media source file.
     */
    set content(value: Attachment) {
      this._content["content"] = value;
    }

    get content(): Attachment {
      return this._content["content"] as Attachment;
    }

    /** The date and time(s) at which the media was collected. */
    set created(value: DateTime | Period) {
      this._content["created"] = value;
    }

    get createdDateTime(): DateTime {
      return this._content["created"] as DateTime;
    }

    get createdPeriod(): Period {
      return this._content["created"] as Period;
    }

    /** The device used to collect the media. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /**
     * The name of the device / manufacturer of the device that was used to make
     * the recording.
     */
    set deviceName(value: String) {
      this._content["deviceName"] = value;
    }

    get deviceName(): String {
      return this._content["deviceName"] as String;
    }

    /** The duration of the recording in seconds - for audio and video. */
    set duration(value: Decimal) {
      this._content["duration"] = value;
    }

    get duration(): Decimal {
      return this._content["duration"] as Decimal;
    }

    /** The encounter that establishes the context for this media. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The number of frames in a photo. This is used with a multi-page fax, or
     * an imaging acquisition context that takes multiple slices in a single
     * image, or an animated gif. If there is more than one frame, this SHALL
     * have a value in order to alert interface software that a multi-frame
     * capable rendering widget is required.
     */
    set frames(value: PositiveInt) {
      this._content["frames"] = value;
    }

    get frames(): PositiveInt {
      return this._content["frames"] as PositiveInt;
    }

    /** Height of the image in pixels (photo/video). */
    set height(value: PositiveInt) {
      this._content["height"] = value;
    }

    get height(): PositiveInt {
      return this._content["height"] as PositiveInt;
    }

    /**
     * Identifiers associated with the image - these may include identifiers for
     * the image itself, identifiers for the context of its collection (e.g.
     * series ids) and context ids such as accession numbers or other workflow
     * identifiers.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The date and time this version of the media was made available to
     * providers, typically after having been reviewed.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /**
     * Details of the type of the media - usually, how it was acquired (what
     * type of device). If images sourced from a DICOM system, are wrapped in a
     * Media resource, then this is the modality.
     */
    set modality(value: CodeableConcept) {
      this._content["modality"] = value;
    }

    get modality(): CodeableConcept {
      return this._content["modality"] as CodeableConcept;
    }

    /**
     * Comments made about the media by the performer, subject or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The person who administered the collection of the image. */
    set operator(value: Reference) {
      this._content["operator"] = value;
    }

    get operator(): Reference {
      return this._content["operator"] as Reference;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Describes why the event occurred in coded or textual form. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** The current state of the Media. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Who/What this Media is a record of. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * A code that classifies whether the media is an image, video or audio
     * recording or some other media category.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /** The name of the imaging view e.g. Lateral or Antero-posterior (AP). */
    set view(value: CodeableConcept) {
      this._content["view"] = value;
    }

    get view(): CodeableConcept {
      return this._content["view"] as CodeableConcept;
    }

    /** Width of the image in pixels (photo/video). */
    set width(value: PositiveInt) {
      this._content["width"] = value;
    }

    get width(): PositiveInt {
      return this._content["width"] as PositiveInt;
    }
  }

  /**
   * This resource is primarily used for the identification and definition of a
   * medication for the purposes of prescribing, dispensing, and administering a
   * medication as well as for making statements about medication use.
   */
  export class Medication extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Medication";

    /**
     * Specific amount of the drug in the packaged product. For example, when
     * specifying a product that has the same strength (For example, Insulin
     * glargine 100 unit per mL solution for injection), this attribute provides
     * additional clarification of the package amount (For example, 3 mL, 10mL,
     * etc.).
     */
    set amount(value: Ratio) {
      this._content["amount"] = value;
    }

    get amount(): Ratio {
      return this._content["amount"] as Ratio;
    }

    /** Information that only applies to packages (not products). */
    set batch(value: BackboneElement) {
      this._content["batch"] = value;
    }

    get batch(): BackboneElement {
      return this._content["batch"] as BackboneElement;
    }

    /**
     * A code (or set of codes) that specify this medication, or a textual
     * description if no code is available. Usage note: This could be a standard
     * medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could
     * also be a national or local formulary code, optionally with translations
     * to other code systems.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Describes the form of the item. Powder; tablets; capsule. */
    set form(value: CodeableConcept) {
      this._content["form"] = value;
    }

    get form(): CodeableConcept {
      return this._content["form"] as CodeableConcept;
    }

    /** Business identifier for this medication. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Identifies a particular constituent of interest in the product. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /**
     * Describes the details of the manufacturer of the medication product. This
     * is not intended to represent the distributor of a medication product.
     */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /** A code to indicate if the medication is in active use. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * Describes the event of a patient consuming or otherwise being administered
   * a medication. This may be as simple as swallowing a tablet or it may be a
   * long running infusion. Related resources tie this event to the authorizing
   * prescription, and the specific encounter between patient and health care
   * practitioner.
   */
  export class MedicationAdministration extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationAdministration";

    /**
     * Indicates where the medication is expected to be consumed or
     * administered.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The visit, admission, or other contact between patient and health care
     * provider during which the medication administration was performed.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * The device used in administering the medication to the patient. For
     * example, a particular infusion pump.
     */
    set device(value: Array<Reference>) {
      this._content["device"] = value;
    }

    get device(): Array<Reference> {
      return this._content["device"] as Array<Reference>;
    }

    /**
     * Describes the medication dosage information details e.g. dose, rate,
     * site, route, etc.
     */
    set dosage(value: BackboneElement) {
      this._content["dosage"] = value;
    }

    get dosage(): BackboneElement {
      return this._content["dosage"] as BackboneElement;
    }

    /**
     * A specific date/time or interval of time during which the administration
     * took place (or did not take place, when the 'notGiven' attribute is
     * true). For many administrations, such as swallowing a tablet the use of
     * dateTime is more appropriate.
     */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /**
     * A summary of the events of interest that have occurred, such as when the
     * administration was verified.
     */
    set eventHistory(value: Array<Reference>) {
      this._content["eventHistory"] = value;
    }

    get eventHistory(): Array<Reference> {
      return this._content["eventHistory"] as Array<Reference>;
    }

    /**
     * Identifiers associated with this Medication Administration that are
     * defined by business processes and/or used to refer to it when a direct
     * URL reference to the resource itself is not appropriate. They are
     * business identifiers assigned to this resource by the performer or other
     * systems and remain constant as the resource is updated and propagates
     * from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A protocol, guideline, orderset, or other definition that was adhered to
     * in whole or in part by this event.
     */
    set instantiates(value: Array<Uri>) {
      this._content["instantiates"] = value;
    }

    get instantiates(): Array<Uri> {
      return this._content["instantiates"] as Array<Uri>;
    }

    /**
     * Identifies the medication that was administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * Extra information about the medication administration that is not
     * conveyed by the other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Indicates who or what performed the medication administration and how
     * they were involved.
     */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /** A code indicating why the medication was given. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Condition or observation that supports why the medication was
     * administered.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The original request, instruction or authority to perform the
     * administration.
     */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * Will generally be set to show that the administration has been completed.
     * For some long running administrations such as infusions, it is possible
     * for an administration to be started but not completed or it may be paused
     * while some other process is under way.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A code indicating why the administration was not performed. */
    set statusReason(value: Array<CodeableConcept>) {
      this._content["statusReason"] = value;
    }

    get statusReason(): Array<CodeableConcept> {
      return this._content["statusReason"] as Array<CodeableConcept>;
    }

    /** The person or animal or group receiving the medication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Additional information (for example, patient height and weight) that
     * supports the administration of the medication.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /**
   * Indicates that a medication product is to be or has been dispensed for a
   * named person/patient. This includes a description of the medication product
   * (supply) provided and the instructions for administering the medication.
   * The medication dispense is the result of a pharmacy system responding to a
   * medication order.
   */
  export class MedicationDispense extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationDispense";

    /** Indicates the medication order that is being dispensed against. */
    set authorizingPrescription(value: Array<Reference>) {
      this._content["authorizingPrescription"] = value;
    }

    get authorizingPrescription(): Array<Reference> {
      return this._content["authorizingPrescription"] as Array<Reference>;
    }

    /**
     * Indicates the type of medication dispense (for example, where the
     * medication is expected to be consumed or administered (i.e. inpatient or
     * outpatient)).
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * event.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /** The amount of medication expressed as a timing amount. */
    set daysSupply(value: Quantity) {
      this._content["daysSupply"] = value;
    }

    get daysSupply(): Quantity {
      return this._content["daysSupply"] as Quantity;
    }

    /**
     * Identification of the facility/location where the medication was shipped
     * to, as part of the dispense event.
     */
    set destination(value: Reference) {
      this._content["destination"] = value;
    }

    get destination(): Reference {
      return this._content["destination"] as Reference;
    }

    /**
     * Indicates an actual or potential clinical issue with or between one or
     * more active or proposed clinical actions for a patient; e.g. drug-drug
     * interaction, duplicate therapy, dosage alert etc.
     */
    set detectedIssue(value: Array<Reference>) {
      this._content["detectedIssue"] = value;
    }

    get detectedIssue(): Array<Reference> {
      return this._content["detectedIssue"] as Array<Reference>;
    }

    /** Indicates how the medication is to be used by the patient. */
    set dosageInstruction(value: Array<Dosage>) {
      this._content["dosageInstruction"] = value;
    }

    get dosageInstruction(): Array<Dosage> {
      return this._content["dosageInstruction"] as Array<Dosage>;
    }

    /**
     * A summary of the events of interest that have occurred, such as when the
     * dispense was verified.
     */
    set eventHistory(value: Array<Reference>) {
      this._content["eventHistory"] = value;
    }

    get eventHistory(): Array<Reference> {
      return this._content["eventHistory"] as Array<Reference>;
    }

    /**
     * Identifiers associated with this Medication Dispense that are defined by
     * business processes and/or used to refer to it when a direct URL reference
     * to the resource itself is not appropriate. They are business identifiers
     * assigned to this resource by the performer or other systems and remain
     * constant as the resource is updated and propagates from server to
     * server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The principal physical location where the dispense was performed. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /**
     * Identifies the medication being administered. This is either a link to a
     * resource representing the details of the medication or a simple attribute
     * carrying a code that identifies the medication from a known list of
     * medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * Extra information about the dispense that could not be conveyed in the
     * other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The procedure that trigger the dispense. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Indicates who or what performed the event. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * The amount of medication that has been dispensed. Includes unit of
     * measure.
     */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Identifies the person who picked up the medication. This will usually be
     * a patient or their caregiver, but some cases exist where it can be a
     * healthcare professional.
     */
    set receiver(value: Array<Reference>) {
      this._content["receiver"] = value;
    }

    get receiver(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    /** A code specifying the state of the set of dispense events. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Indicates the reason why a dispense was not performed. */
    set statusReason(value: CodeableConcept | Reference) {
      this._content["statusReason"] = value;
    }

    get statusReasonCodeableConcept(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    get statusReasonReference(): Reference {
      return this._content["statusReason"] as Reference;
    }

    /**
     * A link to a resource representing the person or the group to whom the
     * medication will be given.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Indicates whether or not substitution was made as part of the dispense.
     * In some cases, substitution will be expected but does not happen, in
     * other cases substitution is not expected but does happen. This block
     * explains what substitution did or did not happen and why. If nothing is
     * specified, substitution was not done.
     */
    set substitution(value: BackboneElement) {
      this._content["substitution"] = value;
    }

    get substitution(): BackboneElement {
      return this._content["substitution"] as BackboneElement;
    }

    /** Additional information that supports the medication being dispensed. */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }

    /**
     * Indicates the type of dispensing event that is performed. For example,
     * Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples,
     * etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The time the dispensed product was provided to the patient or their
     * representative.
     */
    set whenHandedOver(value: DateTime) {
      this._content["whenHandedOver"] = value;
    }

    get whenHandedOver(): DateTime {
      return this._content["whenHandedOver"] as DateTime;
    }

    /** The time when the dispensed product was packaged and reviewed. */
    set whenPrepared(value: DateTime) {
      this._content["whenPrepared"] = value;
    }

    get whenPrepared(): DateTime {
      return this._content["whenPrepared"] as DateTime;
    }
  }

  /** Information about a medication that is used to support knowledge. */
  export class MedicationKnowledge extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge";

    /** Guidelines for the administration of the medication. */
    set administrationGuidelines(value: Array<BackboneElement>) {
      this._content["administrationGuidelines"] = value;
    }

    get administrationGuidelines(): Array<BackboneElement> {
      return this._content[
        "administrationGuidelines"
      ] as Array<BackboneElement>;
    }

    /**
     * Specific amount of the drug in the packaged product. For example, when
     * specifying a product that has the same strength (For example, Insulin
     * glargine 100 unit per mL solution for injection), this attribute provides
     * additional clarification of the package amount (For example, 3 mL, 10mL,
     * etc.).
     */
    set amount(value: Quantity) {
      this._content["amount"] = value;
    }

    get amount(): Quantity {
      return this._content["amount"] as Quantity;
    }

    /**
     * Associated or related medications. For example, if the medication is a
     * branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g.
     * Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin),
     * this would link to a branded product (e.g. Crestor).
     */
    set associatedMedication(value: Array<Reference>) {
      this._content["associatedMedication"] = value;
    }

    get associatedMedication(): Array<Reference> {
      return this._content["associatedMedication"] as Array<Reference>;
    }

    /**
     * A code that specifies this medication, or a textual description if no
     * code is available. Usage note: This could be a standard medication code
     * such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a
     * national or local formulary code, optionally with translations to other
     * code systems.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Potential clinical issue with or between medication(s) (for example,
     * drug-drug interaction, drug-disease contraindication, drug-allergy
     * interaction, etc.).
     */
    set contraindication(value: Array<Reference>) {
      this._content["contraindication"] = value;
    }

    get contraindication(): Array<Reference> {
      return this._content["contraindication"] as Array<Reference>;
    }

    /** The price of the medication. */
    set cost(value: Array<BackboneElement>) {
      this._content["cost"] = value;
    }

    get cost(): Array<BackboneElement> {
      return this._content["cost"] as Array<BackboneElement>;
    }

    /** Describes the form of the item. Powder; tablets; capsule. */
    set doseForm(value: CodeableConcept) {
      this._content["doseForm"] = value;
    }

    get doseForm(): CodeableConcept {
      return this._content["doseForm"] as CodeableConcept;
    }

    /**
     * Specifies descriptive properties of the medicine, such as color, shape,
     * imprints, etc.
     */
    set drugCharacteristic(value: Array<BackboneElement>) {
      this._content["drugCharacteristic"] = value;
    }

    get drugCharacteristic(): Array<BackboneElement> {
      return this._content["drugCharacteristic"] as Array<BackboneElement>;
    }

    /** Identifies a particular constituent of interest in the product. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /** The intended or approved route of administration. */
    set intendedRoute(value: Array<CodeableConcept>) {
      this._content["intendedRoute"] = value;
    }

    get intendedRoute(): Array<CodeableConcept> {
      return this._content["intendedRoute"] as Array<CodeableConcept>;
    }

    /**
     * The time course of drug absorption, distribution, metabolism and
     * excretion of a medication from the body.
     */
    set kinetics(value: Array<BackboneElement>) {
      this._content["kinetics"] = value;
    }

    get kinetics(): Array<BackboneElement> {
      return this._content["kinetics"] as Array<BackboneElement>;
    }

    /**
     * Describes the details of the manufacturer of the medication product. This
     * is not intended to represent the distributor of a medication product.
     */
    set manufacturer(value: Reference) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Reference {
      return this._content["manufacturer"] as Reference;
    }

    /**
     * Categorization of the medication within a formulary or classification
     * system.
     */
    set medicineClassification(value: Array<BackboneElement>) {
      this._content["medicineClassification"] = value;
    }

    get medicineClassification(): Array<BackboneElement> {
      return this._content["medicineClassification"] as Array<BackboneElement>;
    }

    /** The program under which the medication is reviewed. */
    set monitoringProgram(value: Array<BackboneElement>) {
      this._content["monitoringProgram"] = value;
    }

    get monitoringProgram(): Array<BackboneElement> {
      return this._content["monitoringProgram"] as Array<BackboneElement>;
    }

    /** Associated documentation about the medication. */
    set monograph(value: Array<BackboneElement>) {
      this._content["monograph"] = value;
    }

    get monograph(): Array<BackboneElement> {
      return this._content["monograph"] as Array<BackboneElement>;
    }

    /** Information that only applies to packages (not products). */
    set packaging(value: BackboneElement) {
      this._content["packaging"] = value;
    }

    get packaging(): BackboneElement {
      return this._content["packaging"] as BackboneElement;
    }

    /** The instructions for preparing the medication. */
    set preparationInstruction(value: Markdown) {
      this._content["preparationInstruction"] = value;
    }

    get preparationInstruction(): Markdown {
      return this._content["preparationInstruction"] as Markdown;
    }

    /**
     * Category of the medication or product (e.g. branded product, therapeutic
     * moeity, generic product, innovator product, etc.).
     */
    set productType(value: Array<CodeableConcept>) {
      this._content["productType"] = value;
    }

    get productType(): Array<CodeableConcept> {
      return this._content["productType"] as Array<CodeableConcept>;
    }

    /** Regulatory information about a medication. */
    set regulatory(value: Array<BackboneElement>) {
      this._content["regulatory"] = value;
    }

    get regulatory(): Array<BackboneElement> {
      return this._content["regulatory"] as Array<BackboneElement>;
    }

    /** Associated or related knowledge about a medication. */
    set relatedMedicationKnowledge(value: Array<BackboneElement>) {
      this._content["relatedMedicationKnowledge"] = value;
    }

    get relatedMedicationKnowledge(): Array<BackboneElement> {
      return this._content[
        "relatedMedicationKnowledge"
      ] as Array<BackboneElement>;
    }

    /**
     * A code to indicate if the medication is in active use. The status refers
     * to the validity about the information of the medication and not to its
     * medicinal properties.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Additional names for a medication, for example, the name(s) given to a
     * medication in different countries. For example, acetaminophen and
     * paracetamol or salbutamol and albuterol.
     */
    set synonym(value: Array<String>) {
      this._content["synonym"] = value;
    }

    get synonym(): Array<String> {
      return this._content["synonym"] as Array<String>;
    }
  }

  /**
   * An order or request for both supply of the medication and the instructions
   * for administration of the medication to a patient. The resource is called
   * "MedicationRequest" rather than "MedicationPrescription" or
   * "MedicationOrder" to generalize the use across inpatient and outpatient
   * settings, including care plans, etc., and to harmonize with workflow
   * patterns.
   */
  export class MedicationRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationRequest";

    /**
     * The date (and perhaps time) when the prescription was initially written
     * or authored on.
     */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * A plan or request that is fulfilled in whole or in part by this
     * medication request.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the type of medication request (for example, where the
     * medication is expected to be consumed or administered (i.e. inpatient or
     * outpatient)).
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The description of the overall patte3rn of the administration of the
     * medication to the patient.
     */
    set courseOfTherapyType(value: CodeableConcept) {
      this._content["courseOfTherapyType"] = value;
    }

    get courseOfTherapyType(): CodeableConcept {
      return this._content["courseOfTherapyType"] as CodeableConcept;
    }

    /**
     * Indicates an actual or potential clinical issue with or between one or
     * more active or proposed clinical actions for a patient; e.g. Drug-drug
     * interaction, duplicate therapy, dosage alert etc.
     */
    set detectedIssue(value: Array<Reference>) {
      this._content["detectedIssue"] = value;
    }

    get detectedIssue(): Array<Reference> {
      return this._content["detectedIssue"] as Array<Reference>;
    }

    /**
     * Indicates the specific details for the dispense or medication supply part
     * of a medication request (also known as a Medication Prescription or
     * Medication Order). Note that this information is not always sent with the
     * order. There may be in some settings (e.g. hospitals) institutional or
     * system support for completing the dispense details in the pharmacy
     * department.
     */
    set dispenseRequest(value: BackboneElement) {
      this._content["dispenseRequest"] = value;
    }

    get dispenseRequest(): BackboneElement {
      return this._content["dispenseRequest"] as BackboneElement;
    }

    /**
     * If true indicates that the provider is asking for the medication request
     * not to occur.
     */
    set doNotPerform(value: Boolean) {
      this._content["doNotPerform"] = value;
    }

    get doNotPerform(): Boolean {
      return this._content["doNotPerform"] as Boolean;
    }

    /** Indicates how the medication is to be used by the patient. */
    set dosageInstruction(value: Array<Dosage>) {
      this._content["dosageInstruction"] = value;
    }

    get dosageInstruction(): Array<Dosage> {
      return this._content["dosageInstruction"] as Array<Dosage>;
    }

    /**
     * The Encounter during which this [x] was created or to which the creation
     * of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Links to Provenance records for past versions of this resource or
     * fulfilling request or event resources that identify key state transitions
     * or updates that are likely to be relevant to a user looking at the
     * current version of the resource.
     */
    set eventHistory(value: Array<Reference>) {
      this._content["eventHistory"] = value;
    }

    get eventHistory(): Array<Reference> {
      return this._content["eventHistory"] as Array<Reference>;
    }

    /**
     * A shared identifier common to all requests that were authorized more or
     * less simultaneously by a single author, representing the identifier of
     * the requisition or prescription.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * Identifiers associated with this medication request that are defined by
     * business processes and/or used to refer to it when a direct URL reference
     * to the resource itself is not appropriate. They are business identifiers
     * assigned to this resource by the performer or other systems and remain
     * constant as the resource is updated and propagates from server to
     * server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a protocol, guideline, orderset, or other definition
     * that is adhered to in whole or in part by this MedicationRequest.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this MedicationRequest.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be required for delivering the requested
     * service.
     */
    set insurance(value: Array<Reference>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<Reference> {
      return this._content["insurance"] as Array<Reference>;
    }

    /** Whether the request is a proposal, plan, or an original order. */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Identifies the medication being requested. This is a link to a resource
     * that represents the medication which may be the details of the medication
     * or simply an attribute carrying a code that identifies the medication
     * from a known list of medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * Extra information about the prescription that could not be conveyed by
     * the other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The specified desired performer of the medication treatment (e.g. the
     * performer of the medication administration).
     */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Indicates the type of performer of the administration of the medication. */
    set performerType(value: CodeableConcept) {
      this._content["performerType"] = value;
    }

    get performerType(): CodeableConcept {
      return this._content["performerType"] as CodeableConcept;
    }

    /**
     * A link to a resource representing an earlier order related order or
     * prescription.
     */
    set priorPrescription(value: Reference) {
      this._content["priorPrescription"] = value;
    }

    get priorPrescription(): Reference {
      return this._content["priorPrescription"] as Reference;
    }

    /**
     * Indicates how quickly the Medication Request should be addressed with
     * respect to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** The reason or the indication for ordering or not ordering the medication. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Condition or observation that supports why the medication was ordered. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The person who entered the order on behalf of another individual for
     * example in the case of a verbal or a telephone order.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /**
     * Indicates if this record was captured as a secondary 'reported' record
     * rather than as an original primary source-of-truth record. It may also
     * indicate the source of the report.
     */
    set reported(value: Boolean | Reference) {
      this._content["reported"] = value;
    }

    get reportedBoolean(): Boolean {
      return this._content["reported"] as Boolean;
    }

    get reportedReference(): Reference {
      return this._content["reported"] as Reference;
    }

    /**
     * The individual, organization, or device that initiated the request and
     * has responsibility for its activation.
     */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /**
     * A code specifying the current state of the order. Generally, this will be
     * active or completed state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Captures the reason for the current state of the MedicationRequest. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /**
     * A link to a resource representing the person or set of individuals to
     * whom the medication will be given.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Indicates whether or not substitution can or should be part of the
     * dispense. In some cases, substitution must happen, in other cases
     * substitution must not happen. This block explains the prescriber's
     * intent. If nothing is specified substitution may be done.
     */
    set substitution(value: BackboneElement) {
      this._content["substitution"] = value;
    }

    get substitution(): BackboneElement {
      return this._content["substitution"] as BackboneElement;
    }

    /**
     * Include additional information (for example, patient height and weight)
     * that supports the ordering of the medication.
     */
    set supportingInformation(value: Array<Reference>) {
      this._content["supportingInformation"] = value;
    }

    get supportingInformation(): Array<Reference> {
      return this._content["supportingInformation"] as Array<Reference>;
    }
  }

  /**
   * A record of a medication that is being consumed by a patient. A
   * MedicationStatement may indicate that the patient may be taking the
   * medication now or has taken the medication in the past or will be taking
   * the medication in the future. The source of this information can be the
   * patient, significant other (such as a family member or spouse), or a
   * clinician. A common scenario where this information is captured is during
   * the history taking process during a patient visit or stay. The medication
   * information may come from sources such as the patient's memory, from a
   * prescription bottle, or from a list of medications the patient, clinician
   * or other party maintains.
   *
   * The primary difference between a medication statement and a medication
   * administration is that the medication administration has complete
   * administration information and is based on actual administration
   * information from the person who administered the medication. A medication
   * statement is often, if not always, less specific. There is no required
   * date/time when the medication was administered, in fact we only know that a
   * source has reported the patient is taking this medication, where details
   * such as time, quantity, or rate or even medication product may be
   * incomplete or missing or less precise. As stated earlier, the medication
   * statement information may come from the patient's memory, from a
   * prescription bottle or from a list of medications the patient, clinician or
   * other party maintains. Medication administration is more formal and is not
   * missing detailed information.
   */
  export class MedicationStatement extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicationStatement";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * event.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates where the medication is expected to be consumed or
     * administered.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * MedicationStatement.
     */
    set context(value: Reference) {
      this._content["context"] = value;
    }

    get context(): Reference {
      return this._content["context"] as Reference;
    }

    /**
     * The date when the medication statement was asserted by the information
     * source.
     */
    set dateAsserted(value: DateTime) {
      this._content["dateAsserted"] = value;
    }

    get dateAsserted(): DateTime {
      return this._content["dateAsserted"] as DateTime;
    }

    /**
     * Allows linking the MedicationStatement to the underlying
     * MedicationRequest, or to other information that supports or is used to
     * derive the MedicationStatement.
     */
    set derivedFrom(value: Array<Reference>) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Array<Reference> {
      return this._content["derivedFrom"] as Array<Reference>;
    }

    /** Indicates how the medication is/was or should be taken by the patient. */
    set dosage(value: Array<Dosage>) {
      this._content["dosage"] = value;
    }

    get dosage(): Array<Dosage> {
      return this._content["dosage"] as Array<Dosage>;
    }

    /**
     * The interval of time during which it is being asserted that the patient
     * is/was/will be taking the medication (or was not taking, when the
     * MedicationStatement.taken element is No).
     */
    set effective(value: DateTime | Period) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    /**
     * Identifiers associated with this Medication Statement that are defined by
     * business processes and/or used to refer to it when a direct URL reference
     * to the resource itself is not appropriate. They are business identifiers
     * assigned to this resource by the performer or other systems and remain
     * constant as the resource is updated and propagates from server to
     * server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The person or organization that provided the information about the taking
     * of this medication. Note: Use derivedFrom when a MedicationStatement is
     * derived from other resources, e.g. Claim or MedicationRequest.
     */
    set informationSource(value: Reference) {
      this._content["informationSource"] = value;
    }

    get informationSource(): Reference {
      return this._content["informationSource"] as Reference;
    }

    /**
     * Identifies the medication being administered. This is either a link to a
     * resource representing the details of the medication or a simple attribute
     * carrying a code that identifies the medication from a known list of
     * medications.
     */
    set medication(value: CodeableConcept | Reference) {
      this._content["medication"] = value;
    }

    get medicationCodeableConcept(): CodeableConcept {
      return this._content["medication"] as CodeableConcept;
    }

    get medicationReference(): Reference {
      return this._content["medication"] as Reference;
    }

    /**
     * Provides extra information about the medication statement that is not
     * conveyed by the other attributes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** A reason for why the medication is being/was taken. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Condition or observation that supports why the medication is being/was
     * taken.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the medication used that this statement is about. Generally,
     * this will be active or completed.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Captures the reason for the current state of the MedicationStatement. */
    set statusReason(value: Array<CodeableConcept>) {
      this._content["statusReason"] = value;
    }

    get statusReason(): Array<CodeableConcept> {
      return this._content["statusReason"] as Array<CodeableConcept>;
    }

    /** The person, animal or group who is/was taking the medication. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * Detailed definition of a medicinal product, typically for uses other than
   * direct patient care (e.g. regulatory use, drug catalogs, to support
   * prescribing, adverse events management etc.).
   */
  export class MedicinalProductDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MedicinalProductDefinition";

    /**
     * Whether the Medicinal Product is subject to additional monitoring for
     * regulatory reasons, such as heightened reporting requirements.
     */
    set additionalMonitoringIndicator(value: CodeableConcept) {
      this._content["additionalMonitoringIndicator"] = value;
    }

    get additionalMonitoringIndicator(): CodeableConcept {
      return this._content["additionalMonitoringIndicator"] as CodeableConcept;
    }

    /**
     * Additional information or supporting documentation about the medicinal
     * product.
     */
    set attachedDocument(value: Array<Reference>) {
      this._content["attachedDocument"] = value;
    }

    get attachedDocument(): Array<Reference> {
      return this._content["attachedDocument"] as Array<Reference>;
    }

    /**
     * Allows the key product features to be recorded, such as "sugar free",
     * "modified release", "parallel import".
     */
    set characteristic(value: Array<BackboneElement>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<BackboneElement> {
      return this._content["characteristic"] as Array<BackboneElement>;
    }

    /** Allows the product to be classified by various systems, commonly WHO ATC. */
    set classification(value: Array<CodeableConcept>) {
      this._content["classification"] = value;
    }

    get classification(): Array<CodeableConcept> {
      return this._content["classification"] as Array<CodeableConcept>;
    }

    /** Clinical trials or studies that this product is involved in. */
    set clinicalTrial(value: Array<Reference>) {
      this._content["clinicalTrial"] = value;
    }

    get clinicalTrial(): Array<Reference> {
      return this._content["clinicalTrial"] as Array<Reference>;
    }

    /**
     * A code that this product is known by, usually within some formal
     * terminology, perhaps assigned by a third party (i.e. not the manufacturer
     * or regulator). Products (types of medications) tend to be known by
     * identifiers during development and within regulatory process. However
     * when they are prescribed they tend to be identified by codes. The same
     * product may be have multiple codes, applied to it by multiple
     * organizations.
     */
    set code(value: Array<Coding>) {
      this._content["code"] = value;
    }

    get code(): Array<Coding> {
      return this._content["code"] as Array<Coding>;
    }

    /**
     * The dose form for a single part product, or combined form of a multiple
     * part product. This is one concept that describes all the components. It
     * does not represent the form with components physically mixed, if that
     * might be necessary, for which see
     * (AdministrableProductDefinition.administrableDoseForm).
     */
    set combinedPharmaceuticalDoseForm(value: CodeableConcept) {
      this._content["combinedPharmaceuticalDoseForm"] = value;
    }

    get combinedPharmaceuticalDoseForm(): CodeableConcept {
      return this._content["combinedPharmaceuticalDoseForm"] as CodeableConcept;
    }

    /** A product specific contact, person (in a role), or an organization. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * Reference to another product, e.g. for linking authorised to
     * investigational product, or a virtual product.
     */
    set crossReference(value: Array<BackboneElement>) {
      this._content["crossReference"] = value;
    }

    get crossReference(): Array<BackboneElement> {
      return this._content["crossReference"] as Array<BackboneElement>;
    }

    /** General description of this product. */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** If this medicine applies to human or veterinary uses. */
    set domain(value: CodeableConcept) {
      this._content["domain"] = value;
    }

    get domain(): CodeableConcept {
      return this._content["domain"] as CodeableConcept;
    }

    /**
     * Business identifier for this product. Could be an MPID. When in
     * development or being regulated, products are typically referenced by
     * official identifiers, assigned by a manufacturer or regulator, and unique
     * to a product (which, when compared to a product instance being
     * prescribed, is actually a product type). See also
     * MedicinalProductDefinition.code.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Any component of the drug product which is not the chemical entity
     * defined as the drug substance, or an excipient in the drug product. This
     * includes process-related impurities and contaminants, product-related
     * impurities including degradation products.
     */
    set impurity(value: Array<CodeableReference>) {
      this._content["impurity"] = value;
    }

    get impurity(): Array<CodeableReference> {
      return this._content["impurity"] as Array<CodeableReference>;
    }

    /**
     * Description of indication(s) for this product, used when structured
     * indications are not required. In cases where structured indications are
     * required, they are captured using the ClinicalUseDefinition resource. An
     * indication is a medical situation for which using the product is
     * appropriate.
     */
    set indication(value: Markdown) {
      this._content["indication"] = value;
    }

    get indication(): Markdown {
      return this._content["indication"] as Markdown;
    }

    /**
     * The ingredients of this medicinal product - when not detailed in other
     * resources. This is only needed if the ingredients are not specified by
     * incoming references from the Ingredient resource, or indirectly via
     * incoming AdministrableProductDefinition, PackagedProductDefinition or
     * ManufacturedItemDefinition references. In cases where those levels of
     * detail are not used, the ingredients may be specified directly here as
     * codes.
     */
    set ingredient(value: Array<CodeableConcept>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<CodeableConcept> {
      return this._content["ingredient"] as Array<CodeableConcept>;
    }

    /**
     * The legal status of supply of the medicinal product as classified by the
     * regulator.
     */
    set legalStatusOfSupply(value: CodeableConcept) {
      this._content["legalStatusOfSupply"] = value;
    }

    get legalStatusOfSupply(): CodeableConcept {
      return this._content["legalStatusOfSupply"] as CodeableConcept;
    }

    /**
     * Marketing status of the medicinal product, in contrast to marketing
     * authorization. This refers to the product being actually 'on the market'
     * as opposed to being allowed to be on the market (which is an
     * authorization).
     */
    set marketingStatus(value: Array<MarketingStatus>) {
      this._content["marketingStatus"] = value;
    }

    get marketingStatus(): Array<MarketingStatus> {
      return this._content["marketingStatus"] as Array<MarketingStatus>;
    }

    /**
     * A master file for the medicinal product (e.g. Pharmacovigilance System
     * Master File). Drug master files (DMFs) are documents submitted to
     * regulatory agencies to provide confidential detailed information about
     * facilities, processes or articles used in the manufacturing, processing,
     * packaging and storing of drug products.
     */
    set masterFile(value: Array<Reference>) {
      this._content["masterFile"] = value;
    }

    get masterFile(): Array<Reference> {
      return this._content["masterFile"] as Array<Reference>;
    }

    /** The product's name, including full name and possibly coded parts. */
    set name(value: Array<BackboneElement>) {
      this._content["name"] = value;
    }

    get name(): Array<BackboneElement> {
      return this._content["name"] as Array<BackboneElement>;
    }

    /**
     * A manufacturing or administrative process or step associated with (or
     * performed on) the medicinal product.
     */
    set operation(value: Array<BackboneElement>) {
      this._content["operation"] = value;
    }

    get operation(): Array<BackboneElement> {
      return this._content["operation"] as Array<BackboneElement>;
    }

    /**
     * Package type for the product. See also the PackagedProductDefinition
     * resource.
     */
    set packagedMedicinalProduct(value: Array<CodeableConcept>) {
      this._content["packagedMedicinalProduct"] = value;
    }

    get packagedMedicinalProduct(): Array<CodeableConcept> {
      return this._content[
        "packagedMedicinalProduct"
      ] as Array<CodeableConcept>;
    }

    /** If authorised for use in children, or infants, neonates etc. */
    set pediatricUseIndicator(value: CodeableConcept) {
      this._content["pediatricUseIndicator"] = value;
    }

    get pediatricUseIndicator(): CodeableConcept {
      return this._content["pediatricUseIndicator"] as CodeableConcept;
    }

    /**
     * The path by which the product is taken into or makes contact with the
     * body. In some regions this is referred to as the licenced or approved
     * route. See also AdministrableProductDefinition resource.
     * MedicinalProductDefinition.route is the same concept as
     * AdministrableProductDefinition.routeOfAdministration.code, and they
     * cannot be used together.
     */
    set route(value: Array<CodeableConcept>) {
      this._content["route"] = value;
    }

    get route(): Array<CodeableConcept> {
      return this._content["route"] as Array<CodeableConcept>;
    }

    /**
     * Whether the Medicinal Product is subject to special measures for
     * regulatory reasons, such as a requirement to conduct post-authorisation
     * studies.
     */
    set specialMeasures(value: Array<CodeableConcept>) {
      this._content["specialMeasures"] = value;
    }

    get specialMeasures(): Array<CodeableConcept> {
      return this._content["specialMeasures"] as Array<CodeableConcept>;
    }

    /**
     * The status within the lifecycle of this product record. A high-level
     * status, this is not intended to duplicate details carried elsewhere such
     * as legal status, or authorization status.
     */
    set status(value: CodeableConcept) {
      this._content["status"] = value;
    }

    get status(): CodeableConcept {
      return this._content["status"] as CodeableConcept;
    }

    /** The date at which the given status became applicable. */
    set statusDate(value: DateTime) {
      this._content["statusDate"] = value;
    }

    get statusDate(): DateTime {
      return this._content["statusDate"] as DateTime;
    }

    /** Regulatory type, e.g. Investigational or Authorized. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * A business identifier relating to a specific version of the product, this
     * is commonly used to support revisions to an existing product.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Defines the characteristics of a message that can be shared between
   * systems, including the type of event that initiates the message, the
   * content to be transmitted and what response(s), if any, are permitted.
   */
  export class MessageDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MessageDefinition";

    /**
     * Indicates what types of messages may be sent as an application-level
     * response to this message.
     */
    set allowedResponse(value: Array<BackboneElement>) {
      this._content["allowedResponse"] = value;
    }

    get allowedResponse(): Array<BackboneElement> {
      return this._content["allowedResponse"] as Array<BackboneElement>;
    }

    /**
     * The MessageDefinition that is the basis for the contents of this
     * resource.
     */
    set base(value: Canonical) {
      this._content["base"] = value;
    }

    get base(): Canonical {
      return this._content["base"] as Canonical;
    }

    /** The impact of the content of the message. */
    set category(value: Code) {
      this._content["category"] = value;
    }

    get category(): Code {
      return this._content["category"] as Code;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the message definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the message definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the message definition was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the message definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the message definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** Event code or link to the EventDefinition. */
    set event(value: Coding | Uri) {
      this._content["event"] = value;
    }

    get eventCoding(): Coding {
      return this._content["event"] as Coding;
    }

    get eventUri(): Uri {
      return this._content["event"] as Uri;
    }

    /**
     * A Boolean value to indicate that this message definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Identifies the resource (or resources) that are being addressed by the
     * event. For example, the Encounter for an admit message or two Account
     * records for a merge.
     */
    set focus(value: Array<BackboneElement>) {
      this._content["focus"] = value;
    }

    get focus(): Array<BackboneElement> {
      return this._content["focus"] as Array<BackboneElement>;
    }

    /**
     * Canonical reference to a GraphDefinition. If a URL is provided, it is the
     * canonical reference to a [GraphDefinition](graphdefinition.html) that it
     * controls what resources are to be added to the bundle when building the
     * document. The GraphDefinition can also specify profiles that apply to the
     * various resources.
     */
    set graph(value: Array<Canonical>) {
      this._content["graph"] = value;
    }

    get graph(): Array<Canonical> {
      return this._content["graph"] as Array<Canonical>;
    }

    /**
     * A formal identifier that is used to identify this message definition when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the message definition is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the message definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Identifies a protocol or workflow that this MessageDefinition represents
     * a step in.
     */
    set parent(value: Array<Canonical>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Canonical> {
      return this._content["parent"] as Array<Canonical>;
    }

    /**
     * The name of the organization or individual that published the message
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this message definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** A MessageDefinition that is superseded by this definition. */
    set replaces(value: Array<Canonical>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Canonical> {
      return this._content["replaces"] as Array<Canonical>;
    }

    /**
     * Declare at a message definition level whether a response is required or
     * only upon error or success, or never.
     */
    set responseRequired(value: Code) {
      this._content["responseRequired"] = value;
    }

    get responseRequired(): Code {
      return this._content["responseRequired"] as Code;
    }

    /**
     * The status of this message definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the message definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * The business identifier that is used to reference the MessageDefinition
     * and _is_ expected to be consistent from server to server.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate message definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the message
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the message definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The header for a message exchange that is either requesting or responding
   * to an action. The reference(s) that are the subject of the action as well
   * as other information related to the action are typically transmitted in a
   * bundle in which the MessageHeader resource instance is the first resource
   * in the bundle.
   */
  export class MessageHeader extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MessageHeader";

    /**
     * The logical author of the message - the person or device that decided the
     * described event should happen. When there is more than one candidate,
     * pick the most proximal to the MessageHeader. Can provide other authors in
     * extensions.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** Permanent link to the MessageDefinition for this message. */
    set definition(value: Canonical) {
      this._content["definition"] = value;
    }

    get definition(): Canonical {
      return this._content["definition"] as Canonical;
    }

    /** The destination application which the message is intended for. */
    set destination(value: Array<BackboneElement>) {
      this._content["destination"] = value;
    }

    get destination(): Array<BackboneElement> {
      return this._content["destination"] as Array<BackboneElement>;
    }

    /**
     * The person or device that performed the data entry leading to this
     * message. When there is more than one candidate, pick the most proximal to
     * the message. Can provide other enterers in extensions.
     */
    set enterer(value: Reference) {
      this._content["enterer"] = value;
    }

    get enterer(): Reference {
      return this._content["enterer"] as Reference;
    }

    /**
     * Code that identifies the event this message represents and connects it
     * with its definition. Events defined as part of the FHIR specification
     * have the system value
     * "http://terminology.hl7.org/CodeSystem/message-events". Alternatively uri
     * to the EventDefinition.
     */
    set event(value: Coding | Uri) {
      this._content["event"] = value;
    }

    get eventCoding(): Coding {
      return this._content["event"] as Coding;
    }

    get eventUri(): Uri {
      return this._content["event"] as Uri;
    }

    /**
     * The actual data of the message - a reference to the root/focus class of
     * the event.
     */
    set focus(value: Array<Reference>) {
      this._content["focus"] = value;
    }

    get focus(): Array<Reference> {
      return this._content["focus"] as Array<Reference>;
    }

    /**
     * Coded indication of the cause for the event - indicates a reason for the
     * occurrence of the event that is a focus of this message.
     */
    set reason(value: CodeableConcept) {
      this._content["reason"] = value;
    }

    get reason(): CodeableConcept {
      return this._content["reason"] as CodeableConcept;
    }

    /**
     * Information about the message that this message is a response to. Only
     * present if this message is a response.
     */
    set response(value: BackboneElement) {
      this._content["response"] = value;
    }

    get response(): BackboneElement {
      return this._content["response"] as BackboneElement;
    }

    /**
     * The person or organization that accepts overall responsibility for the
     * contents of the message. The implication is that the message event
     * happened under the policies of the responsible party.
     */
    set responsible(value: Reference) {
      this._content["responsible"] = value;
    }

    get responsible(): Reference {
      return this._content["responsible"] as Reference;
    }

    /** Identifies the sending system to allow the use of a trust relationship. */
    set sender(value: Reference) {
      this._content["sender"] = value;
    }

    get sender(): Reference {
      return this._content["sender"] as Reference;
    }

    /** The source application from which this message originated. */
    set source(value: BackboneElement) {
      this._content["source"] = value;
    }

    get source(): BackboneElement {
      return this._content["source"] as BackboneElement;
    }
  }

  /** Raw data describing a biological sequence. */
  export class MolecularSequence extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/MolecularSequence";

    /**
     * Whether the sequence is numbered starting at 0 (0-based numbering or
     * coordinates, inclusive start, exclusive end) or starting at 1 (1-based
     * numbering, inclusive start and inclusive end).
     */
    set coordinateSystem(value: Integer) {
      this._content["coordinateSystem"] = value;
    }

    get coordinateSystem(): Integer {
      return this._content["coordinateSystem"] as Integer;
    }

    /** The method for sequencing, for example, chip information. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /**
     * A unique identifier for this particular sequence instance. This is a
     * FHIR-defined id.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Sequence that was observed. It is the result marked by referenceSeq along
     * with variant records on referenceSeq. This shall start from
     * referenceSeq.windowStart and end by referenceSeq.windowEnd.
     */
    set observedSeq(value: String) {
      this._content["observedSeq"] = value;
    }

    get observedSeq(): String {
      return this._content["observedSeq"] as String;
    }

    /** The patient whose sequencing results are described by this resource. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The organization or lab that should be responsible for this result. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Pointer to next atomic sequence which at most contains one variant. */
    set pointer(value: Array<Reference>) {
      this._content["pointer"] = value;
    }

    get pointer(): Array<Reference> {
      return this._content["pointer"] as Array<Reference>;
    }

    /**
     * An experimental feature attribute that defines the quality of the feature
     * in a quantitative way, such as a phred quality score
     * ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
     */
    set quality(value: Array<BackboneElement>) {
      this._content["quality"] = value;
    }

    get quality(): Array<BackboneElement> {
      return this._content["quality"] as Array<BackboneElement>;
    }

    /** The number of copies of the sequence of interest. (RNASeq). */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /**
     * Coverage (read depth or depth) is the average number of reads
     * representing a given nucleotide in the reconstructed sequence.
     */
    set readCoverage(value: Integer) {
      this._content["readCoverage"] = value;
    }

    get readCoverage(): Integer {
      return this._content["readCoverage"] as Integer;
    }

    /**
     * A sequence that is used as a reference to describe variants that are
     * present in a sequence analyzed.
     */
    set referenceSeq(value: BackboneElement) {
      this._content["referenceSeq"] = value;
    }

    get referenceSeq(): BackboneElement {
      return this._content["referenceSeq"] as BackboneElement;
    }

    /**
     * Configurations of the external repository. The repository shall store
     * target's observedSeq or records related with target's observedSeq.
     */
    set repository(value: Array<BackboneElement>) {
      this._content["repository"] = value;
    }

    get repository(): Array<BackboneElement> {
      return this._content["repository"] as Array<BackboneElement>;
    }

    /** Specimen used for sequencing. */
    set specimen(value: Reference) {
      this._content["specimen"] = value;
    }

    get specimen(): Reference {
      return this._content["specimen"] as Reference;
    }

    /** Information about chromosome structure variation. */
    set structureVariant(value: Array<BackboneElement>) {
      this._content["structureVariant"] = value;
    }

    get structureVariant(): Array<BackboneElement> {
      return this._content["structureVariant"] as Array<BackboneElement>;
    }

    /** Amino Acid Sequence/ DNA Sequence / RNA Sequence. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * The definition of variant here originates from Sequence ontology
     * ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)).
     * This element can represent amino acid or nucleic sequence
     * change(including insertion,deletion,SNP,etc.) It can represent some
     * complex mutation or segment variation with the assist of CIGAR string.
     */
    set variant(value: Array<BackboneElement>) {
      this._content["variant"] = value;
    }

    get variant(): Array<BackboneElement> {
      return this._content["variant"] as Array<BackboneElement>;
    }
  }

  /**
   * A curated namespace that issues unique symbols within that namespace for
   * the identification of concepts, people, devices, etc. Represents a "System"
   * used within the Identifier and Coding data types.
   */
  export class NamingSystem extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/NamingSystem";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the naming system was published. The
     * date must change when the business version changes and it must change if
     * the status code changes. In addition, it should change when the
     * substantive content of the naming system changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the naming system from a
     * consumer's perspective. Details about what the namespace identifies
     * including scope, granularity, version labeling, etc.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A legal or geographic region in which the naming system is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * Indicates the purpose for the naming system - what kinds of things does
     * it make unique?
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * A natural language name identifying the naming system. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the naming
     * system.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * The name of the organization that is responsible for issuing identifiers
     * or codes for this namespace and ensuring their non-collision.
     */
    set responsible(value: String) {
      this._content["responsible"] = value;
    }

    get responsible(): String {
      return this._content["responsible"] as String;
    }

    /**
     * The status of this naming system. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Categorizes a naming system for easier search by grouping related naming
     * systems.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * Indicates how the system may be identified when referenced in electronic
     * exchange.
     */
    set uniqueId(value: Array<BackboneElement>) {
      this._content["uniqueId"] = value;
    }

    get uniqueId(): Array<BackboneElement> {
      return this._content["uniqueId"] as Array<BackboneElement>;
    }

    /**
     * Provides guidance on the use of the namespace, including the handling of
     * formatting characters, use of upper vs. lower case, etc.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate naming system instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }
  }

  /**
   * A request to supply a diet, formula feeding (enteral) or oral nutritional
   * supplement to a patient/resident.
   */
  export class NutritionOrder extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/NutritionOrder";

    /**
     * A link to a record of allergies or intolerances which should be included
     * in the nutrition order.
     */
    set allergyIntolerance(value: Array<Reference>) {
      this._content["allergyIntolerance"] = value;
    }

    get allergyIntolerance(): Array<Reference> {
      return this._content["allergyIntolerance"] as Array<Reference>;
    }

    /** The date and time that this nutrition order was requested. */
    set dateTime(value: DateTime) {
      this._content["dateTime"] = value;
    }

    get dateTime(): DateTime {
      return this._content["dateTime"] as DateTime;
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Feeding provided through the gastrointestinal tract via a tube, catheter,
     * or stoma that delivers nutrition distal to the oral cavity.
     */
    set enteralFormula(value: BackboneElement) {
      this._content["enteralFormula"] = value;
    }

    get enteralFormula(): BackboneElement {
      return this._content["enteralFormula"] as BackboneElement;
    }

    /**
     * This modifier is used to convey Order-specific modifier about the type of
     * oral food or oral fluids that should not be given. These can be derived
     * from patient allergies, intolerances, or preferences such as No Red Meat,
     * No Soy or No Wheat or Gluten-Free. While it should not be necessary to
     * repeat allergy or intolerance information captured in the referenced
     * AllergyIntolerance resource in the excludeFoodModifier, this element may
     * be used to convey additional specificity related to foods that should be
     * eliminated from the patient’s diet for any reason. This modifier applies
     * to the entire nutrition order inclusive of the oral diet, nutritional
     * supplements and enteral formula feedings.
     */
    set excludeFoodModifier(value: Array<CodeableConcept>) {
      this._content["excludeFoodModifier"] = value;
    }

    get excludeFoodModifier(): Array<CodeableConcept> {
      return this._content["excludeFoodModifier"] as Array<CodeableConcept>;
    }

    /**
     * This modifier is used to convey order-specific modifiers about the type
     * of food that should be given. These can be derived from patient
     * allergies, intolerances, or preferences such as Halal, Vegan or Kosher.
     * This modifier applies to the entire nutrition order inclusive of the oral
     * diet, nutritional supplements and enteral formula feedings.
     */
    set foodPreferenceModifier(value: Array<CodeableConcept>) {
      this._content["foodPreferenceModifier"] = value;
    }

    get foodPreferenceModifier(): Array<CodeableConcept> {
      return this._content["foodPreferenceModifier"] as Array<CodeableConcept>;
    }

    /**
     * Identifiers assigned to this order by the order sender or by the order
     * receiver.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a protocol, guideline, orderset or other definition
     * that is adhered to in whole or in part by this NutritionOrder.
     */
    set instantiates(value: Array<Uri>) {
      this._content["instantiates"] = value;
    }

    get instantiates(): Array<Uri> {
      return this._content["instantiates"] as Array<Uri>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
     * definition that is adhered to in whole or in part by this
     * NutritionOrder.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this NutritionOrder.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * Indicates the level of authority/intentionality associated with the
     * NutrionOrder and where the request fits into the workflow chain.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Comments made about the NutritionOrder by the requester, performer,
     * subject or other participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Diet given orally in contrast to enteral (tube) feeding. */
    set oralDiet(value: BackboneElement) {
      this._content["oralDiet"] = value;
    }

    get oralDiet(): BackboneElement {
      return this._content["oralDiet"] as BackboneElement;
    }

    /**
     * The practitioner that holds legal responsibility for ordering the diet,
     * nutritional supplement, or formula feedings.
     */
    set orderer(value: Reference) {
      this._content["orderer"] = value;
    }

    get orderer(): Reference {
      return this._content["orderer"] as Reference;
    }

    /**
     * The person (patient) who needs the nutrition order for an oral diet,
     * nutritional supplement and/or enteral or formula feeding.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The workflow status of the nutrition order/request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Oral nutritional products given in order to add further nutritional value
     * to the patient's diet.
     */
    set supplement(value: Array<BackboneElement>) {
      this._content["supplement"] = value;
    }

    get supplement(): Array<BackboneElement> {
      return this._content["supplement"] as Array<BackboneElement>;
    }
  }

  /** A food or fluid product that is consumed by patients. */
  export class NutritionProduct extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/NutritionProduct";

    /**
     * Nutrition products can have different classifications - according to its
     * nutritional properties, preparation methods, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The code assigned to the product, for example a manufacturer number or
     * other terminology.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Ingredients contained in this product. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /**
     * Conveys instance-level information about this product item. One or
     * several physical, countable instances or occurrences of the product.
     */
    set instance(value: BackboneElement) {
      this._content["instance"] = value;
    }

    get instance(): BackboneElement {
      return this._content["instance"] as BackboneElement;
    }

    /**
     * Allergens that are known or suspected to be a part of this nutrition
     * product.
     */
    set knownAllergen(value: Array<CodeableReference>) {
      this._content["knownAllergen"] = value;
    }

    get knownAllergen(): Array<CodeableReference> {
      return this._content["knownAllergen"] as Array<CodeableReference>;
    }

    /**
     * The organisation (manufacturer, representative or legal authorisation
     * holder) that is responsible for the device.
     */
    set manufacturer(value: Array<Reference>) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Array<Reference> {
      return this._content["manufacturer"] as Array<Reference>;
    }

    /** Comments made about the product. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The product's nutritional information expressed by the nutrients. */
    set nutrient(value: Array<BackboneElement>) {
      this._content["nutrient"] = value;
    }

    get nutrient(): Array<BackboneElement> {
      return this._content["nutrient"] as Array<BackboneElement>;
    }

    /** Specifies descriptive properties of the nutrition product. */
    set productCharacteristic(value: Array<BackboneElement>) {
      this._content["productCharacteristic"] = value;
    }

    get productCharacteristic(): Array<BackboneElement> {
      return this._content["productCharacteristic"] as Array<BackboneElement>;
    }

    /** The current state of the product. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * Measurements and simple assertions made about a patient, device or other
   * subject.
   */
  export class Observation extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Observation";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * event. For example, a MedicationRequest may require a patient to have
     * laboratory test performed before it is dispensed.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Indicates the site on the subject's body where the observation was made
     * (i.e. the target site).
     */
    set bodySite(value: CodeableConcept) {
      this._content["bodySite"] = value;
    }

    get bodySite(): CodeableConcept {
      return this._content["bodySite"] as CodeableConcept;
    }

    /** A code that classifies the general type of observation being made. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Describes what was observed. Sometimes this is called the observation
     * "name".
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Some observations have multiple component observations. These component
     * observations are expressed as separate code value pairs that share the
     * same attributes. Examples include systolic and diastolic component
     * observations for blood pressure measurement and multiple component
     * observations for genetics observations.
     */
    set component(value: Array<BackboneElement>) {
      this._content["component"] = value;
    }

    get component(): Array<BackboneElement> {
      return this._content["component"] as Array<BackboneElement>;
    }

    /**
     * Provides a reason why the expected value in the element
     * Observation.value[x] is missing.
     */
    set dataAbsentReason(value: CodeableConcept) {
      this._content["dataAbsentReason"] = value;
    }

    get dataAbsentReason(): CodeableConcept {
      return this._content["dataAbsentReason"] as CodeableConcept;
    }

    /**
     * The target resource that represents a measurement from which this
     * observation value is derived. For example, a calculated anion gap or a
     * fetal measurement based on an ultrasound image.
     */
    set derivedFrom(value: Array<Reference>) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Array<Reference> {
      return this._content["derivedFrom"] as Array<Reference>;
    }

    /** The device used to generate the observation data. */
    set device(value: Reference) {
      this._content["device"] = value;
    }

    get device(): Reference {
      return this._content["device"] as Reference;
    }

    /**
     * The time or time-period the observed value is asserted as being true. For
     * biological subjects - e.g. human patients - this is usually called the
     * "physiologically relevant time". This is usually either the time of the
     * procedure or of specimen collection, but very often the source of the
     * date/time is not known, only the date/time itself.
     */
    set effective(value: DateTime | Period | Timing | Instant) {
      this._content["effective"] = value;
    }

    get effectiveDateTime(): DateTime {
      return this._content["effective"] as DateTime;
    }

    get effectivePeriod(): Period {
      return this._content["effective"] as Period;
    }

    get effectiveTiming(): Timing {
      return this._content["effective"] as Timing;
    }

    get effectiveInstant(): Instant {
      return this._content["effective"] as Instant;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * during which this observation is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * The actual focus of an observation when it is not the patient of record
     * representing something or someone associated with the patient such as a
     * spouse, parent, fetus, or donor. For example, fetus observations in a
     * mother's record. The focus of an observation could also be an existing
     * condition, an intervention, the subject's diet, another observation of
     * the subject, or a body structure such as tumor or implanted device. An
     * example use case would be using the Observation resource to capture
     * whether the mother is trained to change her child's tracheostomy tube. In
     * this example, the child is the patient of record and the mother is the
     * focus.
     */
    set focus(value: Array<Reference>) {
      this._content["focus"] = value;
    }

    get focus(): Array<Reference> {
      return this._content["focus"] as Array<Reference>;
    }

    /**
     * This observation is a group observation (e.g. a battery, a panel of
     * tests, a set of vital sign measurements) that includes the target as a
     * member of the group.
     */
    set hasMember(value: Array<Reference>) {
      this._content["hasMember"] = value;
    }

    get hasMember(): Array<Reference> {
      return this._content["hasMember"] as Array<Reference>;
    }

    /** A unique identifier assigned to this observation. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A categorical assessment of an observation value. For example, high, low,
     * normal.
     */
    set interpretation(value: Array<CodeableConcept>) {
      this._content["interpretation"] = value;
    }

    get interpretation(): Array<CodeableConcept> {
      return this._content["interpretation"] as Array<CodeableConcept>;
    }

    /**
     * The date and time this version of the observation was made available to
     * providers, typically after the results have been reviewed and verified.
     */
    set issued(value: Instant) {
      this._content["issued"] = value;
    }

    get issued(): Instant {
      return this._content["issued"] as Instant;
    }

    /** Indicates the mechanism used to perform the observation. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /** Comments about the observation or the results. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A larger event of which this particular Observation is a component or
     * step. For example, an observation as part of a procedure.
     */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** Who was responsible for asserting the observed value as "true". */
    set performer(value: Array<Reference>) {
      this._content["performer"] = value;
    }

    get performer(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    /**
     * Guidance on how to interpret the value by comparison to a normal or
     * recommended range. Multiple reference ranges are interpreted as an "OR".
     * In other words, to represent two distinct target populations, two
     * `referenceRange` elements would be used.
     */
    set referenceRange(value: Array<BackboneElement>) {
      this._content["referenceRange"] = value;
    }

    get referenceRange(): Array<BackboneElement> {
      return this._content["referenceRange"] as Array<BackboneElement>;
    }

    /** The specimen that was used when this observation was made. */
    set specimen(value: Reference) {
      this._content["specimen"] = value;
    }

    get specimen(): Reference {
      return this._content["specimen"] as Reference;
    }

    /** The status of the result value. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The patient, or group of patients, location, or device this observation
     * is about and into whose record the observation is placed. If the actual
     * focus of the observation is different from the subject (or a sample of,
     * part, or region of the subject), the `focus` element or the `code` itself
     * specifies the actual focus of the observation.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * The information determined as a result of making the observation, if the
     * information has a simple value.
     */
    set value(
      value:
        | Quantity
        | CodeableConcept
        | String
        | Boolean
        | Integer
        | Range
        | Ratio
        | SampledData
        | Time
        | DateTime
        | Period,
    ) {
      this._content["value"] = value;
    }

    get valueQuantity(): Quantity {
      return this._content["value"] as Quantity;
    }

    get valueCodeableConcept(): CodeableConcept {
      return this._content["value"] as CodeableConcept;
    }

    get valueString(): String {
      return this._content["value"] as String;
    }

    get valueBoolean(): Boolean {
      return this._content["value"] as Boolean;
    }

    get valueInteger(): Integer {
      return this._content["value"] as Integer;
    }

    get valueRange(): Range {
      return this._content["value"] as Range;
    }

    get valueRatio(): Ratio {
      return this._content["value"] as Ratio;
    }

    get valueSampledData(): SampledData {
      return this._content["value"] as SampledData;
    }

    get valueTime(): Time {
      return this._content["value"] as Time;
    }

    get valueDateTime(): DateTime {
      return this._content["value"] as DateTime;
    }

    get valuePeriod(): Period {
      return this._content["value"] as Period;
    }
  }

  /**
   * Set of definitional characteristics for a kind of observation or
   * measurement produced or consumed by an orderable health care service.
   */
  export class ObservationDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ObservationDefinition";

    /**
     * The set of abnormal coded results for the observation conforming to this
     * ObservationDefinition.
     */
    set abnormalCodedValueSet(value: Reference) {
      this._content["abnormalCodedValueSet"] = value;
    }

    get abnormalCodedValueSet(): Reference {
      return this._content["abnormalCodedValueSet"] as Reference;
    }

    /** A code that classifies the general type of observation. */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * Describes what will be observed. Sometimes this is called the observation
     * "name".
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * The set of critical coded results for the observation conforming to this
     * ObservationDefinition.
     */
    set criticalCodedValueSet(value: Reference) {
      this._content["criticalCodedValueSet"] = value;
    }

    get criticalCodedValueSet(): Reference {
      return this._content["criticalCodedValueSet"] as Reference;
    }

    /** A unique identifier assigned to this ObservationDefinition artifact. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The method or technique used to perform the observation. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /**
     * Multiple results allowed for observations conforming to this
     * ObservationDefinition.
     */
    set multipleResultsAllowed(value: Boolean) {
      this._content["multipleResultsAllowed"] = value;
    }

    get multipleResultsAllowed(): Boolean {
      return this._content["multipleResultsAllowed"] as Boolean;
    }

    /**
     * The set of normal coded results for the observations conforming to this
     * ObservationDefinition.
     */
    set normalCodedValueSet(value: Reference) {
      this._content["normalCodedValueSet"] = value;
    }

    get normalCodedValueSet(): Reference {
      return this._content["normalCodedValueSet"] as Reference;
    }

    /**
     * The data types allowed for the value element of the instance observations
     * conforming to this ObservationDefinition.
     */
    set permittedDataType(value: Array<Code>) {
      this._content["permittedDataType"] = value;
    }

    get permittedDataType(): Array<Code> {
      return this._content["permittedDataType"] as Array<Code>;
    }

    /**
     * The preferred name to be used when reporting the results of observations
     * conforming to this ObservationDefinition.
     */
    set preferredReportName(value: String) {
      this._content["preferredReportName"] = value;
    }

    get preferredReportName(): String {
      return this._content["preferredReportName"] as String;
    }

    /**
     * Multiple ranges of results qualified by different contexts for ordinal or
     * continuous observations conforming to this ObservationDefinition.
     */
    set qualifiedInterval(value: Array<BackboneElement>) {
      this._content["qualifiedInterval"] = value;
    }

    get qualifiedInterval(): Array<BackboneElement> {
      return this._content["qualifiedInterval"] as Array<BackboneElement>;
    }

    /** Characteristics for quantitative results of this observation. */
    set quantitativeDetails(value: BackboneElement) {
      this._content["quantitativeDetails"] = value;
    }

    get quantitativeDetails(): BackboneElement {
      return this._content["quantitativeDetails"] as BackboneElement;
    }

    /**
     * The set of valid coded results for the observations conforming to this
     * ObservationDefinition.
     */
    set validCodedValueSet(value: Reference) {
      this._content["validCodedValueSet"] = value;
    }

    get validCodedValueSet(): Reference {
      return this._content["validCodedValueSet"] as Reference;
    }
  }

  /**
   * A formal computable definition of an operation (on the RESTful interface)
   * or a named query (using the search interaction).
   */
  export class OperationDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OperationDefinition";

    /**
     * Whether the operation affects state. Side effects such as producing audit
     * trail entries do not count as 'affecting state'.
     */
    set affectsState(value: Boolean) {
      this._content["affectsState"] = value;
    }

    get affectsState(): Boolean {
      return this._content["affectsState"] as Boolean;
    }

    /**
     * Indicates that this operation definition is a constraining profile on the
     * base.
     */
    set base(value: Canonical) {
      this._content["base"] = value;
    }

    get base(): Canonical {
      return this._content["base"] as Canonical;
    }

    /** The name used to invoke the operation. */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /** Additional information about how to use this operation or named query. */
    set comment(value: Markdown) {
      this._content["comment"] = value;
    }

    get comment(): Markdown {
      return this._content["comment"] as Markdown;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the operation definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the operation definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the operation definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this operation definition is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Additional validation information for the in parameters - a single
     * profile that covers all the parameters. The profile is a constraint on
     * the parameters resource as a whole.
     */
    set inputProfile(value: Canonical) {
      this._content["inputProfile"] = value;
    }

    get inputProfile(): Canonical {
      return this._content["inputProfile"] as Canonical;
    }

    /**
     * Indicates whether this operation can be invoked on a particular instance
     * of one of the given types.
     */
    set instance(value: Boolean) {
      this._content["instance"] = value;
    }

    get instance(): Boolean {
      return this._content["instance"] as Boolean;
    }

    /**
     * A legal or geographic region in which the operation definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** Whether this is an operation or a named query. */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /**
     * A natural language name identifying the operation definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * Additional validation information for the out parameters - a single
     * profile that covers all the parameters. The profile is a constraint on
     * the parameters resource.
     */
    set outputProfile(value: Canonical) {
      this._content["outputProfile"] = value;
    }

    get outputProfile(): Canonical {
      return this._content["outputProfile"] as Canonical;
    }

    /**
     * Defines an appropriate combination of parameters to use when invoking
     * this operation, to help code generators when generating overloaded
     * parameter sets for this operation.
     */
    set overload(value: Array<BackboneElement>) {
      this._content["overload"] = value;
    }

    get overload(): Array<BackboneElement> {
      return this._content["overload"] as Array<BackboneElement>;
    }

    /** The parameters for the operation/query. */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }

    /**
     * The name of the organization or individual that published the operation
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this operation definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** The types on which this operation can be executed. */
    set resource(value: Array<Code>) {
      this._content["resource"] = value;
    }

    get resource(): Array<Code> {
      return this._content["resource"] as Array<Code>;
    }

    /**
     * The status of this operation definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * system level (e.g. without needing to choose a resource type for the
     * context).
     */
    set system(value: Boolean) {
      this._content["system"] = value;
    }

    get system(): Boolean {
      return this._content["system"] as Boolean;
    }

    /** A short, descriptive, user-friendly title for the operation definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * resource type level for any given resource type level (e.g. without
     * needing to choose a specific resource id for the context).
     */
    set type(value: Boolean) {
      this._content["type"] = value;
    }

    get type(): Boolean {
      return this._content["type"] as Boolean;
    }

    /**
     * An absolute URI that is used to identify this operation definition when
     * it is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this operation definition is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * operation definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate operation definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the operation
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the operation definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A collection of error, warning, or information messages that result from a
   * system action.
   */
  export class OperationOutcome extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OperationOutcome";

    /**
     * An error, warning, or information message that results from a system
     * action.
     */
    set issue(value: Array<BackboneElement>) {
      this._content["issue"] = value;
    }

    get issue(): Array<BackboneElement> {
      return this._content["issue"] as Array<BackboneElement>;
    }
  }

  /**
   * A formally or informally recognized grouping of people or organizations
   * formed for the purpose of achieving some form of collective action.
   * Includes companies, institutions, corporations, departments, community
   * groups, healthcare practice groups, payer/insurer, etc.
   */
  export class Organization extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Organization";

    /** Whether the organization's record is still in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** An address for the organization. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /**
     * A list of alternate names that the organization is known as, or was known
     * as in the past.
     */
    set alias(value: Array<String>) {
      this._content["alias"] = value;
    }

    get alias(): Array<String> {
      return this._content["alias"] as Array<String>;
    }

    /** Contact for the organization for a certain purpose. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * organization.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /**
     * Identifier for the organization that is used to identify the organization
     * across multiple disparate systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A name associated with the organization. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The organization of which this organization forms a part. */
    set partOf(value: Reference) {
      this._content["partOf"] = value;
    }

    get partOf(): Reference {
      return this._content["partOf"] as Reference;
    }

    /** A contact detail for the organization. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }

    /** The kind(s) of organization that this is. */
    set type(value: Array<CodeableConcept>) {
      this._content["type"] = value;
    }

    get type(): Array<CodeableConcept> {
      return this._content["type"] as Array<CodeableConcept>;
    }
  }

  /**
   * Defines an affiliation/assotiation/relationship between 2 distinct
   * oganizations, that is not a part-of relationship/sub-division
   * relationship.
   */
  export class OrganizationAffiliation extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/OrganizationAffiliation";

    /** Whether this organization affiliation record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Definition of the role the participatingOrganization plays in the
     * association.
     */
    set code(value: Array<CodeableConcept>) {
      this._content["code"] = value;
    }

    get code(): Array<CodeableConcept> {
      return this._content["code"] as Array<CodeableConcept>;
    }

    /** Technical endpoints providing access to services operated for this role. */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /** Healthcare services provided through the role. */
    set healthcareService(value: Array<Reference>) {
      this._content["healthcareService"] = value;
    }

    get healthcareService(): Array<Reference> {
      return this._content["healthcareService"] as Array<Reference>;
    }

    /** Business identifiers that are specific to this role. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The location(s) at which the role occurs. */
    set location(value: Array<Reference>) {
      this._content["location"] = value;
    }

    get location(): Array<Reference> {
      return this._content["location"] as Array<Reference>;
    }

    /**
     * Health insurance provider network in which the participatingOrganization
     * provides the role's services (if defined) at the indicated locations (if
     * defined).
     */
    set network(value: Array<Reference>) {
      this._content["network"] = value;
    }

    get network(): Array<Reference> {
      return this._content["network"] as Array<Reference>;
    }

    /**
     * Organization where the role is available (primary organization/has
     * members).
     */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The Participating Organization provides/performs the role(s) defined by
     * the code to the Primary Organization (e.g. providing services or is a
     * member of).
     */
    set participatingOrganization(value: Reference) {
      this._content["participatingOrganization"] = value;
    }

    get participatingOrganization(): Reference {
      return this._content["participatingOrganization"] as Reference;
    }

    /**
     * The period during which the participatingOrganization is affiliated with
     * the primary organization.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Specific specialty of the participatingOrganization in the context of the
     * role.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /**
     * Contact details at the participatingOrganization relevant to this
     * Affiliation.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /** A medically related item or items, in a container or package. */
  export class PackagedProductDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PackagedProductDefinition";

    /**
     * Allows the key features to be recorded, such as "hospital pack", "nurse
     * prescribable", "calendar pack".
     */
    set characteristic(value: Array<CodeableConcept>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<CodeableConcept> {
      return this._content["characteristic"] as Array<CodeableConcept>;
    }

    /**
     * A total of the complete count of contained items of a particular
     * type/form, independent of sub-packaging or organization. This can be
     * considered as the pack size. This attribute differs from
     * containedItem.amount in that it can give a single aggregated count of all
     * tablet types in a pack, even when these are different manufactured items.
     * For example a pill pack of 21 tablets plus 7 sugar tablets, can be
     * denoted here as '28 tablets'. This attribute is repeatable so that the
     * different item types in one pack type can be counted (e.g. a count of
     * vials and count of syringes). Each repeat must have different units, so
     * that it is clear what the different sets of counted items are, and it is
     * not intended to allow different counts of similar items (e.g. not '2
     * tubes and 3 tubes'). Repeats are not to be used to represent different
     * pack sizes (e.g. 20 pack vs. 50 pack) - which would be different
     * instances of this resource.
     */
    set containedItemQuantity(value: Array<Quantity>) {
      this._content["containedItemQuantity"] = value;
    }

    get containedItemQuantity(): Array<Quantity> {
      return this._content["containedItemQuantity"] as Array<Quantity>;
    }

    /**
     * States whether a drug product is supplied with another item such as a
     * diluent or adjuvant.
     */
    set copackagedIndicator(value: Boolean) {
      this._content["copackagedIndicator"] = value;
    }

    get copackagedIndicator(): Boolean {
      return this._content["copackagedIndicator"] as Boolean;
    }

    /**
     * Textual description. Note that this is not the name of the package or
     * product.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A unique identifier for this package as whole. Unique instance
     * identifiers assigned to a package by manufacturers, regulators, drug
     * catalogue custodians or other organizations.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The legal status of supply of the packaged item as classified by the
     * regulator.
     */
    set legalStatusOfSupply(value: Array<BackboneElement>) {
      this._content["legalStatusOfSupply"] = value;
    }

    get legalStatusOfSupply(): Array<BackboneElement> {
      return this._content["legalStatusOfSupply"] as Array<BackboneElement>;
    }

    /**
     * Manufacturer of this package type. When there are multiple it means these
     * are all possible manufacturers.
     */
    set manufacturer(value: Array<Reference>) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Array<Reference> {
      return this._content["manufacturer"] as Array<Reference>;
    }

    /**
     * Allows specifying that an item is on the market for sale, or that it is
     * not available, and the dates and locations associated.
     */
    set marketingStatus(value: Array<MarketingStatus>) {
      this._content["marketingStatus"] = value;
    }

    get marketingStatus(): Array<MarketingStatus> {
      return this._content["marketingStatus"] as Array<MarketingStatus>;
    }

    /**
     * A name for this package. Typically what it would be listed as in a drug
     * formulary or catalogue, inventory etc.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A packaging item, as a container for medically related items, possibly
     * with other packaging items within, or a packaging component, such as
     * bottle cap (which is not a device or a medication manufactured item).
     */
    set package(value: BackboneElement) {
      this._content["package"] = value;
    }

    get package(): BackboneElement {
      return this._content["package"] as BackboneElement;
    }

    /** The product that this is a pack for. */
    set packageFor(value: Array<Reference>) {
      this._content["packageFor"] = value;
    }

    get packageFor(): Array<Reference> {
      return this._content["packageFor"] as Array<Reference>;
    }

    /**
     * The status within the lifecycle of this item. A high level status, this
     * is not intended to duplicate details carried elsewhere such as legal
     * status, or authorization or marketing status.
     */
    set status(value: CodeableConcept) {
      this._content["status"] = value;
    }

    get status(): CodeableConcept {
      return this._content["status"] as CodeableConcept;
    }

    /** The date at which the given status became applicable. */
    set statusDate(value: DateTime) {
      this._content["statusDate"] = value;
    }

    get statusDate(): DateTime {
      return this._content["statusDate"] as DateTime;
    }

    /**
     * A high level category e.g. medicinal product, raw material,
     * shipping/transport container, etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * This resource is a non-persisted resource used to pass information into and
   * back from an [operation](operations.html). It has no other use, and there
   * is no RESTful endpoint associated with it.
   */
  export class Parameters extends Resource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Parameters";

    /** A parameter passed to or received from the operation. */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }
  }

  /**
   * Demographics and other administrative information about an individual or
   * animal receiving care or other health-related services.
   */
  export class Patient extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Patient";

    /**
     * Whether this patient record is in active use. Many systems use this
     * property to mark as non-current patients, such as those that have not
     * been seen for a period of time based on an organization's business
     * rules.
     *
     * It is often used to filter patient lists to exclude inactive patients
     *
     * Deceased patients may also be marked as inactive for the same reasons,
     * but may be active for some time after death.
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** An address for the individual. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The date of birth for the individual. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * A language which may be used to communicate with the patient about his or
     * her health.
     */
    set communication(value: Array<BackboneElement>) {
      this._content["communication"] = value;
    }

    get communication(): Array<BackboneElement> {
      return this._content["communication"] as Array<BackboneElement>;
    }

    /** A contact party (e.g. guardian, partner, friend) for the patient. */
    set contact(value: Array<BackboneElement>) {
      this._content["contact"] = value;
    }

    get contact(): Array<BackboneElement> {
      return this._content["contact"] as Array<BackboneElement>;
    }

    /** Indicates if the individual is deceased or not. */
    set deceased(value: Boolean | DateTime) {
      this._content["deceased"] = value;
    }

    get deceasedBoolean(): Boolean {
      return this._content["deceased"] as Boolean;
    }

    get deceasedDateTime(): DateTime {
      return this._content["deceased"] as DateTime;
    }

    /**
     * Administrative Gender - the gender that the patient is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** Patient's nominated care provider. */
    set generalPractitioner(value: Array<Reference>) {
      this._content["generalPractitioner"] = value;
    }

    get generalPractitioner(): Array<Reference> {
      return this._content["generalPractitioner"] as Array<Reference>;
    }

    /** An identifier for this patient. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Link to another patient resource that concerns the same actual patient. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** Organization that is the custodian of the patient record. */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** This field contains a patient's most recent marital (civil) status. */
    set maritalStatus(value: CodeableConcept) {
      this._content["maritalStatus"] = value;
    }

    get maritalStatus(): CodeableConcept {
      return this._content["maritalStatus"] as CodeableConcept;
    }

    /**
     * Indicates whether the patient is part of a multiple (boolean) or
     * indicates the actual birth order (integer).
     */
    set multipleBirth(value: Boolean | Integer) {
      this._content["multipleBirth"] = value;
    }

    get multipleBirthBoolean(): Boolean {
      return this._content["multipleBirth"] as Boolean;
    }

    get multipleBirthInteger(): Integer {
      return this._content["multipleBirth"] as Integer;
    }

    /** A name associated with the individual. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** Image of the patient. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /**
     * A contact detail (e.g. a telephone number or an email address) by which
     * the individual may be contacted.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * This resource provides the status of the payment for goods and services
   * rendered, and the request and response resource references.
   */
  export class PaymentNotice extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PaymentNotice";

    /** The amount sent to the payee. */
    set amount(value: Money) {
      this._content["amount"] = value;
    }

    get amount(): Money {
      return this._content["amount"] as Money;
    }

    /** The date when this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** A unique identifier assigned to this payment notice. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The party who will receive or has received payment that is the subject of
     * this notification.
     */
    set payee(value: Reference) {
      this._content["payee"] = value;
    }

    get payee(): Reference {
      return this._content["payee"] as Reference;
    }

    /** A reference to the payment which is the subject of this notice. */
    set payment(value: Reference) {
      this._content["payment"] = value;
    }

    get payment(): Reference {
      return this._content["payment"] as Reference;
    }

    /** The date when the above payment action occurred. */
    set paymentDate(value: Date) {
      this._content["paymentDate"] = value;
    }

    get paymentDate(): Date {
      return this._content["paymentDate"] as Date;
    }

    /** A code indicating whether payment has been sent or cleared. */
    set paymentStatus(value: CodeableConcept) {
      this._content["paymentStatus"] = value;
    }

    get paymentStatus(): CodeableConcept {
      return this._content["paymentStatus"] as CodeableConcept;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set provider(value: Reference) {
      this._content["provider"] = value;
    }

    get provider(): Reference {
      return this._content["provider"] as Reference;
    }

    /** The party who is notified of the payment status. */
    set recipient(value: Reference) {
      this._content["recipient"] = value;
    }

    get recipient(): Reference {
      return this._content["recipient"] as Reference;
    }

    /** Reference of resource for which payment is being made. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /** Reference of response to resource for which payment is being made. */
    set response(value: Reference) {
      this._content["response"] = value;
    }

    get response(): Reference {
      return this._content["response"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * This resource provides the details including amount of a payment and
   * allocates the payment items being paid.
   */
  export class PaymentReconciliation extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation";

    /** The date when the resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** Distribution of the payment amount for a previously acknowledged payable. */
    set detail(value: Array<BackboneElement>) {
      this._content["detail"] = value;
    }

    get detail(): Array<BackboneElement> {
      return this._content["detail"] as Array<BackboneElement>;
    }

    /**
     * A human readable description of the status of the request for the
     * reconciliation.
     */
    set disposition(value: String) {
      this._content["disposition"] = value;
    }

    get disposition(): String {
      return this._content["disposition"] as String;
    }

    /** A code for the form to be used for printing the content. */
    set formCode(value: CodeableConcept) {
      this._content["formCode"] = value;
    }

    get formCode(): CodeableConcept {
      return this._content["formCode"] as CodeableConcept;
    }

    /** A unique identifier assigned to this payment reconciliation. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The outcome of a request for a reconciliation. */
    set outcome(value: Code) {
      this._content["outcome"] = value;
    }

    get outcome(): Code {
      return this._content["outcome"] as Code;
    }

    /** Total payment amount as indicated on the financial instrument. */
    set paymentAmount(value: Money) {
      this._content["paymentAmount"] = value;
    }

    get paymentAmount(): Money {
      return this._content["paymentAmount"] as Money;
    }

    /** The date of payment as indicated on the financial instrument. */
    set paymentDate(value: Date) {
      this._content["paymentDate"] = value;
    }

    get paymentDate(): Date {
      return this._content["paymentDate"] as Date;
    }

    /** Issuer's unique identifier for the payment instrument. */
    set paymentIdentifier(value: Identifier) {
      this._content["paymentIdentifier"] = value;
    }

    get paymentIdentifier(): Identifier {
      return this._content["paymentIdentifier"] as Identifier;
    }

    /** The party who generated the payment. */
    set paymentIssuer(value: Reference) {
      this._content["paymentIssuer"] = value;
    }

    get paymentIssuer(): Reference {
      return this._content["paymentIssuer"] as Reference;
    }

    /**
     * The period of time for which payments have been gathered into this bulk
     * payment for settlement.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * A note that describes or explains the processing in a human readable
     * form.
     */
    set processNote(value: Array<BackboneElement>) {
      this._content["processNote"] = value;
    }

    get processNote(): Array<BackboneElement> {
      return this._content["processNote"] as Array<BackboneElement>;
    }

    /** Original request resource reference. */
    set request(value: Reference) {
      this._content["request"] = value;
    }

    get request(): Reference {
      return this._content["request"] as Reference;
    }

    /**
     * The practitioner who is responsible for the services rendered to the
     * patient.
     */
    set requestor(value: Reference) {
      this._content["requestor"] = value;
    }

    get requestor(): Reference {
      return this._content["requestor"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * Demographics and administrative information about a person independent of a
   * specific health-related context.
   */
  export class Person extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Person";

    /** Whether this person's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** One or more addresses for the person. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The birth date for the person. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /** Administrative Gender. */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** Identifier for a person within a particular scope. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Link to a resource that concerns the same actual person. */
    set link(value: Array<BackboneElement>) {
      this._content["link"] = value;
    }

    get link(): Array<BackboneElement> {
      return this._content["link"] as Array<BackboneElement>;
    }

    /** The organization that is the custodian of the person record. */
    set managingOrganization(value: Reference) {
      this._content["managingOrganization"] = value;
    }

    get managingOrganization(): Reference {
      return this._content["managingOrganization"] as Reference;
    }

    /** A name associated with the person. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /**
     * An image that can be displayed as a thumbnail of the person to enhance
     * the identification of the individual.
     */
    set photo(value: Attachment) {
      this._content["photo"] = value;
    }

    get photo(): Attachment {
      return this._content["photo"] as Attachment;
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * This resource allows for the definition of various types of plans as a
   * sharable, consumable, and executable artifact. The resource is general
   * enough to support the description of a broad range of clinical and
   * non-clinical artifacts such as clinical decision support rules, order sets,
   * protocols, and drug quality specifications.
   */
  export class PlanDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PlanDefinition";

    /**
     * An action or group of actions to be taken as part of the plan. For
     * example, in clinical care, an action would be to prescribe a particular
     * indicated medication, or perform a particular test as appropriate. In
     * pharmaceutical quality, an action would be the test that needs to be
     * performed on a drug product as defined in the quality specification.
     */
    set action(value: Array<BackboneElement>) {
      this._content["action"] = value;
    }

    get action(): Array<BackboneElement> {
      return this._content["action"] as Array<BackboneElement>;
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the plan definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the plan definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the plan definition was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the plan definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the plan definition from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the plan definition content was or is planned to
     * be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this plan definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A goal describes an expected outcome that activities within the plan are
     * intended to achieve. For example, weight loss, restoring an activity of
     * daily living, obtaining herd immunity via immunization, meeting a process
     * improvement objective, meeting the acceptance criteria for a test as
     * specified by a quality specification, etc.
     */
    set goal(value: Array<BackboneElement>) {
      this._content["goal"] = value;
    }

    get goal(): Array<BackboneElement> {
      return this._content["goal"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this plan definition when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the plan definition is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing any formal logic used by the
     * plan definition.
     */
    set library(value: Array<Canonical>) {
      this._content["library"] = value;
    }

    get library(): Array<Canonical> {
      return this._content["library"] as Array<Canonical>;
    }

    /**
     * A natural language name identifying the plan definition. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the plan
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this plan definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The status of this plan definition. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A code, group definition, or canonical reference that describes or
     * identifies the intended subject of the plan definition. Canonical
     * references are allowed to support the definition of protocols for drug
     * and substance quality specifications, and is allowed to reference a
     * MedicinalProductDefinition, SubstanceDefinition,
     * AdministrableProductDefinition, ManufacturedItemDefinition, or
     * PackagedProductDefinition resource.
     */
    set subject(value: CodeableConcept | Reference | Canonical) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    get subjectCanonical(): Canonical {
      return this._content["subject"] as Canonical;
    }

    /**
     * An explanatory or alternate title for the plan definition giving
     * additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /** A short, descriptive, user-friendly title for the plan definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the plan definition. Topics
     * provide a high-level categorization of the definition that can be useful
     * for filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * A high-level category for the plan definition that distinguishes the
     * kinds of systems that would be interested in the plan definition.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * An absolute URI that is used to identify this plan definition when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this plan
     * definition is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the plan definition is
     * stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description of how the plan definition is used from a clinical
     * perspective.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate plan definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the plan
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the plan definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A person who is directly or indirectly involved in the provisioning of
   * healthcare.
   */
  export class Practitioner extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Practitioner";

    /** Whether this practitioner's record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Address(es) of the practitioner that are not role specific (typically
     * home address). Work addresses are not typically entered in this property
     * as they are usually role dependent.
     */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The date of birth for the practitioner. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /** A language the practitioner can use in patient communication. */
    set communication(value: Array<CodeableConcept>) {
      this._content["communication"] = value;
    }

    get communication(): Array<CodeableConcept> {
      return this._content["communication"] as Array<CodeableConcept>;
    }

    /**
     * Administrative Gender - the gender that the person is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** An identifier that applies to this person in this role. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The name(s) associated with the practitioner. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** Image of the person. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /**
     * The official certifications, training, and licenses that authorize or
     * otherwise pertain to the provision of care by the practitioner. For
     * example, a medical license issued by a medical board authorizing the
     * practitioner to practice medicine within a certian locality.
     */
    set qualification(value: Array<BackboneElement>) {
      this._content["qualification"] = value;
    }

    get qualification(): Array<BackboneElement> {
      return this._content["qualification"] as Array<BackboneElement>;
    }

    /**
     * A contact detail for the practitioner, e.g. a telephone number or an
     * email address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * A specific set of Roles/Locations/specialties/services that a practitioner
   * may perform at an organization for a period of time.
   */
  export class PractitionerRole extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/PractitionerRole";

    /** Whether this practitioner role record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * A description of site availability exceptions, e.g. public holiday
     * availability. Succinctly describing all possible exceptions to normal
     * site availability as details in the available Times and not available
     * Times.
     */
    set availabilityExceptions(value: String) {
      this._content["availabilityExceptions"] = value;
    }

    get availabilityExceptions(): String {
      return this._content["availabilityExceptions"] as String;
    }

    /**
     * A collection of times the practitioner is available or performing this
     * role at the location and/or healthcareservice.
     */
    set availableTime(value: Array<BackboneElement>) {
      this._content["availableTime"] = value;
    }

    get availableTime(): Array<BackboneElement> {
      return this._content["availableTime"] as Array<BackboneElement>;
    }

    /**
     * Roles which this practitioner is authorized to perform for the
     * organization.
     */
    set code(value: Array<CodeableConcept>) {
      this._content["code"] = value;
    }

    get code(): Array<CodeableConcept> {
      return this._content["code"] as Array<CodeableConcept>;
    }

    /**
     * Technical endpoints providing access to services operated for the
     * practitioner with this role.
     */
    set endpoint(value: Array<Reference>) {
      this._content["endpoint"] = value;
    }

    get endpoint(): Array<Reference> {
      return this._content["endpoint"] as Array<Reference>;
    }

    /**
     * The list of healthcare services that this worker provides for this role's
     * Organization/Location(s).
     */
    set healthcareService(value: Array<Reference>) {
      this._content["healthcareService"] = value;
    }

    get healthcareService(): Array<Reference> {
      return this._content["healthcareService"] as Array<Reference>;
    }

    /** Business Identifiers that are specific to a role/location. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The location(s) at which this practitioner provides care. */
    set location(value: Array<Reference>) {
      this._content["location"] = value;
    }

    get location(): Array<Reference> {
      return this._content["location"] as Array<Reference>;
    }

    /**
     * The practitioner is not available or performing this role during this
     * period of time due to the provided reason.
     */
    set notAvailable(value: Array<BackboneElement>) {
      this._content["notAvailable"] = value;
    }

    get notAvailable(): Array<BackboneElement> {
      return this._content["notAvailable"] as Array<BackboneElement>;
    }

    /** The organization where the Practitioner performs the roles associated. */
    set organization(value: Reference) {
      this._content["organization"] = value;
    }

    get organization(): Reference {
      return this._content["organization"] as Reference;
    }

    /**
     * The period during which the person is authorized to act as a practitioner
     * in these role(s) for the organization.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * Practitioner that is able to provide the defined services for the
     * organization.
     */
    set practitioner(value: Reference) {
      this._content["practitioner"] = value;
    }

    get practitioner(): Reference {
      return this._content["practitioner"] as Reference;
    }

    /** Specific specialty of the practitioner. */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** Contact details that are specific to the role/location/service. */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * An action that is or was performed on or for a patient. This can be a
   * physical intervention like an operation, or less invasive like long term
   * services, counseling, or hypnotherapy.
   */
  export class Procedure extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Procedure";

    /** Individual who is making the procedure statement. */
    set asserter(value: Reference) {
      this._content["asserter"] = value;
    }

    get asserter(): Reference {
      return this._content["asserter"] as Reference;
    }

    /**
     * A reference to a resource that contains details of the request for this
     * procedure.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Detailed and structured anatomical location information. Multiple
     * locations are allowed - e.g. multiple punch biopsies of a lesion.
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * A code that classifies the procedure for searching, sorting and display
     * purposes (e.g. "Surgical Procedure").
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /**
     * The specific procedure that is performed. Use text if the exact nature of
     * the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Any complications that occurred during the procedure, or in the immediate
     * post-performance period. These are generally tracked separately from the
     * notes, which will typically describe the procedure itself rather than any
     * 'post procedure' issues.
     */
    set complication(value: Array<CodeableConcept>) {
      this._content["complication"] = value;
    }

    get complication(): Array<CodeableConcept> {
      return this._content["complication"] as Array<CodeableConcept>;
    }

    /**
     * Any complications that occurred during the procedure, or in the immediate
     * post-performance period.
     */
    set complicationDetail(value: Array<Reference>) {
      this._content["complicationDetail"] = value;
    }

    get complicationDetail(): Array<Reference> {
      return this._content["complicationDetail"] as Array<Reference>;
    }

    /**
     * The Encounter during which this Procedure was created or performed or to
     * which the creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * A device that is implanted, removed or otherwise manipulated
     * (calibration, battery replacement, fitting a prosthesis, attaching a
     * wound-vac, etc.) as a focal portion of the Procedure.
     */
    set focalDevice(value: Array<BackboneElement>) {
      this._content["focalDevice"] = value;
    }

    get focalDevice(): Array<BackboneElement> {
      return this._content["focalDevice"] as Array<BackboneElement>;
    }

    /**
     * If the procedure required specific follow up - e.g. removal of sutures.
     * The follow up may be represented as a simple note or could potentially be
     * more complex, in which case the CarePlan resource can be used.
     */
    set followUp(value: Array<CodeableConcept>) {
      this._content["followUp"] = value;
    }

    get followUp(): Array<CodeableConcept> {
      return this._content["followUp"] as Array<CodeableConcept>;
    }

    /**
     * Business identifiers assigned to this procedure by the performer or other
     * systems which remain constant as the resource is updated and is
     * propagated from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, order set or
     * other definition that is adhered to in whole or in part by this
     * Procedure.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline, order
     * set or other definition that is adhered to in whole or in part by this
     * Procedure.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * The location where the procedure actually happened. E.g. a newborn at
     * home, a tracheostomy at a restaurant.
     */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Any other notes and comments about the procedure. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * The outcome of the procedure - did it resolve the reasons for the
     * procedure being performed?
     */
    set outcome(value: CodeableConcept) {
      this._content["outcome"] = value;
    }

    get outcome(): CodeableConcept {
      return this._content["outcome"] as CodeableConcept;
    }

    /** A larger event of which this particular procedure is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Estimated or actual date, date-time, period, or age when the procedure
     * was performed. Allows a period to support complex procedures that span
     * more than one date, and also allows for the length of the procedure to be
     * captured.
     */
    set performed(value: DateTime | Period | String | Age | Range) {
      this._content["performed"] = value;
    }

    get performedDateTime(): DateTime {
      return this._content["performed"] as DateTime;
    }

    get performedPeriod(): Period {
      return this._content["performed"] as Period;
    }

    get performedString(): String {
      return this._content["performed"] as String;
    }

    get performedAge(): Age {
      return this._content["performed"] as Age;
    }

    get performedRange(): Range {
      return this._content["performed"] as Range;
    }

    /** Limited to "real" people rather than equipment. */
    set performer(value: Array<BackboneElement>) {
      this._content["performer"] = value;
    }

    get performer(): Array<BackboneElement> {
      return this._content["performer"] as Array<BackboneElement>;
    }

    /**
     * The coded reason why the procedure was performed. This may be a coded
     * entity of some type, or may simply be present as text.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** The justification of why the procedure was performed. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * content.
     */
    set recorder(value: Reference) {
      this._content["recorder"] = value;
    }

    get recorder(): Reference {
      return this._content["recorder"] as Reference;
    }

    /** This could be a histology result, pathology report, surgical report, etc. */
    set report(value: Array<Reference>) {
      this._content["report"] = value;
    }

    get report(): Array<Reference> {
      return this._content["report"] as Array<Reference>;
    }

    /**
     * A code specifying the state of the procedure. Generally, this will be the
     * in-progress or completed state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Captures the reason for the current state of the procedure. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }

    /** The person, animal or group on which the procedure was performed. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** Identifies coded items that were used as part of the procedure. */
    set usedCode(value: Array<CodeableConcept>) {
      this._content["usedCode"] = value;
    }

    get usedCode(): Array<CodeableConcept> {
      return this._content["usedCode"] as Array<CodeableConcept>;
    }

    /**
     * Identifies medications, devices and any other substance used as part of
     * the procedure.
     */
    set usedReference(value: Array<Reference>) {
      this._content["usedReference"] = value;
    }

    get usedReference(): Array<Reference> {
      return this._content["usedReference"] as Array<Reference>;
    }
  }

  /**
   * Provenance of a resource is a record that describes entities and processes
   * involved in producing and delivering or otherwise influencing that
   * resource. Provenance provides a critical foundation for assessing
   * authenticity, enabling trust, and allowing reproducibility. Provenance
   * assertions are a form of contextual metadata and can themselves become
   * important records with their own provenance. Provenance statement indicates
   * clinical significance in terms of confidence in authenticity, reliability,
   * and trustworthiness, integrity, and stage in lifecycle (e.g. Document
   * Completion - has the artifact been legally authenticated), all of which may
   * impact security, privacy, and trust policies.
   */
  export class Provenance extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Provenance";

    /**
     * An activity is something that occurs over a period of time and acts upon
     * or with entities; it may include consuming, processing, transforming,
     * modifying, relocating, using, or generating entities.
     */
    set activity(value: CodeableConcept) {
      this._content["activity"] = value;
    }

    get activity(): CodeableConcept {
      return this._content["activity"] as CodeableConcept;
    }

    /**
     * An actor taking a role in an activity for which it can be assigned some
     * degree of responsibility for the activity taking place.
     */
    set agent(value: Array<BackboneElement>) {
      this._content["agent"] = value;
    }

    get agent(): Array<BackboneElement> {
      return this._content["agent"] as Array<BackboneElement>;
    }

    /** An entity used in this activity. */
    set entity(value: Array<BackboneElement>) {
      this._content["entity"] = value;
    }

    get entity(): Array<BackboneElement> {
      return this._content["entity"] as Array<BackboneElement>;
    }

    /** Where the activity occurred, if relevant. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** The period during which the activity occurred. */
    set occurred(value: Period | DateTime) {
      this._content["occurred"] = value;
    }

    get occurredPeriod(): Period {
      return this._content["occurred"] as Period;
    }

    get occurredDateTime(): DateTime {
      return this._content["occurred"] as DateTime;
    }

    /**
     * Policy or plan the activity was defined by. Typically, a single activity
     * may have multiple applicable policy documents, such as patient consent,
     * guarantor funding, etc.
     */
    set policy(value: Array<Uri>) {
      this._content["policy"] = value;
    }

    get policy(): Array<Uri> {
      return this._content["policy"] as Array<Uri>;
    }

    /** The reason that the activity was taking place. */
    set reason(value: Array<CodeableConcept>) {
      this._content["reason"] = value;
    }

    get reason(): Array<CodeableConcept> {
      return this._content["reason"] as Array<CodeableConcept>;
    }

    /** The instant of time at which the activity was recorded. */
    set recorded(value: Instant) {
      this._content["recorded"] = value;
    }

    get recorded(): Instant {
      return this._content["recorded"] as Instant;
    }

    /**
     * A digital signature on the target Reference(s). The signer should match a
     * Provenance.agent. The purpose of the signature is indicated.
     */
    set signature(value: Array<Signature>) {
      this._content["signature"] = value;
    }

    get signature(): Array<Signature> {
      return this._content["signature"] as Array<Signature>;
    }

    /**
     * The Reference(s) that were generated or updated by the activity described
     * in this resource. A provenance can point to more than one target if
     * multiple resources were created/updated by the same activity.
     */
    set target(value: Array<Reference>) {
      this._content["target"] = value;
    }

    get target(): Array<Reference> {
      return this._content["target"] as Array<Reference>;
    }
  }

  /**
   * A structured set of questions intended to guide the collection of answers
   * from end-users. Questionnaires provide detailed control over order,
   * presentation, phraseology and grouping to allow coherent, consistent data
   * collection.
   */
  export class Questionnaire extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/Questionnaire";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An identifier for this question or group of questions in a particular
     * terminology such as LOINC.
     */
    set code(value: Array<Coding>) {
      this._content["code"] = value;
    }

    get code(): Array<Coding> {
      return this._content["code"] as Array<Coding>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the questionnaire and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the questionnaire.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the questionnaire was published. The
     * date must change when the business version changes and it must change if
     * the status code changes. In addition, it should change when the
     * substantive content of the questionnaire changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** The URL of a Questionnaire that this Questionnaire is based on. */
    set derivedFrom(value: Array<Canonical>) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Array<Canonical> {
      return this._content["derivedFrom"] as Array<Canonical>;
    }

    /**
     * A free text natural language description of the questionnaire from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the questionnaire content was or is planned to be
     * in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * A Boolean value to indicate that this questionnaire is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this questionnaire when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A particular question, question grouping or display text that is part of
     * the questionnaire.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * A legal or geographic region in which the questionnaire is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A natural language name identifying the questionnaire. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the
     * questionnaire.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this questionnaire is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this questionnaire. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The types of subjects that can be the subject of responses created for
     * the questionnaire.
     */
    set subjectType(value: Array<Code>) {
      this._content["subjectType"] = value;
    }

    get subjectType(): Array<Code> {
      return this._content["subjectType"] as Array<Code>;
    }

    /** A short, descriptive, user-friendly title for the questionnaire. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this questionnaire when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * questionnaire is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the questionnaire is
     * stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate questionnaire instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the questionnaire
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the questionnaire author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A structured set of questions and their answers. The questions are ordered
   * and grouped into coherent subsets, corresponding to the structure of the
   * grouping of the questionnaire being responded to.
   */
  export class QuestionnaireResponse extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse";

    /**
     * Person who received the answers to the questions in the
     * QuestionnaireResponse and recorded them in the system.
     */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** The date and/or time that this set of answers were last changed. */
    set authored(value: DateTime) {
      this._content["authored"] = value;
    }

    get authored(): DateTime {
      return this._content["authored"] as DateTime;
    }

    /**
     * The order, proposal or plan that is fulfilled in whole or in part by this
     * QuestionnaireResponse. For example, a ServiceRequest seeking an intake
     * assessment or a decision support recommendation to assess for post-partum
     * depression.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * The Encounter during which this questionnaire response was created or to
     * which the creation of this record is tightly associated.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * A business identifier assigned to a particular completed (or partially
     * completed) questionnaire.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A group or question item from the original questionnaire for which
     * answers are provided.
     */
    set item(value: Array<BackboneElement>) {
      this._content["item"] = value;
    }

    get item(): Array<BackboneElement> {
      return this._content["item"] as Array<BackboneElement>;
    }

    /**
     * A procedure or observation that this questionnaire was performed as part
     * of the execution of. For example, the surgery a checklist was executed as
     * part of.
     */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * The Questionnaire that defines and organizes the questions for which
     * answers are being provided.
     */
    set questionnaire(value: Canonical) {
      this._content["questionnaire"] = value;
    }

    get questionnaire(): Canonical {
      return this._content["questionnaire"] as Canonical;
    }

    /** The person who answered the questions about the subject. */
    set source(value: Reference) {
      this._content["source"] = value;
    }

    get source(): Reference {
      return this._content["source"] as Reference;
    }

    /** The position of the questionnaire response within its overall lifecycle. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The subject of the questionnaire response. This could be a patient,
     * organization, practitioner, device, etc. This is who/what the answers
     * apply to, but is not necessarily the source of information.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * Regulatory approval, clearance or licencing related to a regulated product,
   * treatment, facility or activity that is cited in a guidance, regulation,
   * rule or legislative act. An example is Market Authorization relating to a
   * Medicinal Product.
   */
  export class RegulatedAuthorization extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RegulatedAuthorization";

    /**
     * The legal or regulatory framework against which this authorization is
     * granted, or other reasons for it.
     */
    set basis(value: Array<CodeableConcept>) {
      this._content["basis"] = value;
    }

    get basis(): Array<CodeableConcept> {
      return this._content["basis"] as Array<CodeableConcept>;
    }

    /**
     * The case or regulatory procedure for granting or amending a regulated
     * authorization. An authorization is granted in response to
     * submissions/applications by those seeking authorization. A case is the
     * administrative process that deals with the application(s) that relate to
     * this and assesses them. Note: This area is subject to ongoing review and
     * the workgroup is seeking implementer feedback on its use (see link at
     * bottom of page).
     */
    set case(value: BackboneElement) {
      this._content["case"] = value;
    }

    get case(): BackboneElement {
      return this._content["case"] as BackboneElement;
    }

    /** General textual supporting information. */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The organization that has been granted this authorization, by some
     * authoritative body (the 'regulator').
     */
    set holder(value: Reference) {
      this._content["holder"] = value;
    }

    get holder(): Reference {
      return this._content["holder"] as Reference;
    }

    /**
     * Business identifier for the authorization, typically assigned by the
     * authorizing body.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Condition for which the use of the regulated product applies. */
    set indication(value: CodeableReference) {
      this._content["indication"] = value;
    }

    get indication(): CodeableReference {
      return this._content["indication"] as CodeableReference;
    }

    /** The intended use of the product, e.g. prevention, treatment, diagnosis. */
    set intendedUse(value: CodeableConcept) {
      this._content["intendedUse"] = value;
    }

    get intendedUse(): CodeableConcept {
      return this._content["intendedUse"] as CodeableConcept;
    }

    /**
     * The territory (e.g., country, jurisdiction etc.) in which the
     * authorization has been granted.
     */
    set region(value: Array<CodeableConcept>) {
      this._content["region"] = value;
    }

    get region(): Array<CodeableConcept> {
      return this._content["region"] as Array<CodeableConcept>;
    }

    /**
     * The regulatory authority or authorizing body granting the authorization.
     * For example, European Medicines Agency (EMA), Food and Drug
     * Administration (FDA), Health Canada (HC), etc.
     */
    set regulator(value: Reference) {
      this._content["regulator"] = value;
    }

    get regulator(): Reference {
      return this._content["regulator"] as Reference;
    }

    /**
     * The status that is authorised e.g. approved. Intermediate states and
     * actions can be tracked with cases and applications.
     */
    set status(value: CodeableConcept) {
      this._content["status"] = value;
    }

    get status(): CodeableConcept {
      return this._content["status"] as CodeableConcept;
    }

    /** The date at which the current status was assigned. */
    set statusDate(value: DateTime) {
      this._content["statusDate"] = value;
    }

    get statusDate(): DateTime {
      return this._content["statusDate"] as DateTime;
    }

    /**
     * The product type, treatment, facility or activity that is being
     * authorized.
     */
    set subject(value: Array<Reference>) {
      this._content["subject"] = value;
    }

    get subject(): Array<Reference> {
      return this._content["subject"] as Array<Reference>;
    }

    /**
     * Overall type of this authorization, for example drug marketing approval,
     * orphan drug designation.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }

    /**
     * The time period in which the regulatory approval, clearance or licencing
     * is in effect. As an example, a Marketing Authorization includes the date
     * of authorization and/or an expiration date.
     */
    set validityPeriod(value: Period) {
      this._content["validityPeriod"] = value;
    }

    get validityPeriod(): Period {
      return this._content["validityPeriod"] as Period;
    }
  }

  /**
   * Information about a person that is involved in the care for a patient, but
   * who is not the target of healthcare, nor has a formal responsibility in the
   * care process.
   */
  export class RelatedPerson extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RelatedPerson";

    /** Whether this related person record is in active use. */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /** Address where the related person can be contacted or visited. */
    set address(value: Array<Address>) {
      this._content["address"] = value;
    }

    get address(): Array<Address> {
      return this._content["address"] as Array<Address>;
    }

    /** The date on which the related person was born. */
    set birthDate(value: Date) {
      this._content["birthDate"] = value;
    }

    get birthDate(): Date {
      return this._content["birthDate"] as Date;
    }

    /**
     * A language which may be used to communicate with about the patient's
     * health.
     */
    set communication(value: Array<BackboneElement>) {
      this._content["communication"] = value;
    }

    get communication(): Array<BackboneElement> {
      return this._content["communication"] as Array<BackboneElement>;
    }

    /**
     * Administrative Gender - the gender that the person is considered to have
     * for administration and record keeping purposes.
     */
    set gender(value: Code) {
      this._content["gender"] = value;
    }

    get gender(): Code {
      return this._content["gender"] as Code;
    }

    /** Identifier for a person within a particular scope. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A name associated with the person. */
    set name(value: Array<HumanName>) {
      this._content["name"] = value;
    }

    get name(): Array<HumanName> {
      return this._content["name"] as Array<HumanName>;
    }

    /** The patient this person is related to. */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /**
     * The period of time during which this relationship is or was active. If
     * there are no dates defined, then the interval is unknown.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** Image of the person. */
    set photo(value: Array<Attachment>) {
      this._content["photo"] = value;
    }

    get photo(): Array<Attachment> {
      return this._content["photo"] as Array<Attachment>;
    }

    /** The nature of the relationship between a patient and the related person. */
    set relationship(value: Array<CodeableConcept>) {
      this._content["relationship"] = value;
    }

    get relationship(): Array<CodeableConcept> {
      return this._content["relationship"] as Array<CodeableConcept>;
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    set telecom(value: Array<ContactPoint>) {
      this._content["telecom"] = value;
    }

    get telecom(): Array<ContactPoint> {
      return this._content["telecom"] as Array<ContactPoint>;
    }
  }

  /**
   * A group of related requests that can be used to capture intended activities
   * that have inter-dependencies such as "give this medication after that
   * one".
   */
  export class RequestGroup extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/RequestGroup";

    /** The actions, if any, produced by the evaluation of the artifact. */
    set action(value: Array<BackboneElement>) {
      this._content["action"] = value;
    }

    get action(): Array<BackboneElement> {
      return this._content["action"] as Array<BackboneElement>;
    }

    /** Provides a reference to the author of the request group. */
    set author(value: Reference) {
      this._content["author"] = value;
    }

    get author(): Reference {
      return this._content["author"] as Reference;
    }

    /** Indicates when the request group was created. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * request.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** A code that identifies what the overall request group is. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** Describes the context of the request group, if any. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * A shared identifier common to all requests that were authorized more or
     * less simultaneously by a single author, representing the identifier of
     * the requisition, prescription or similar form.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /**
     * Allows a service to provide a unique, business identifier for the
     * request.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A canonical URL referencing a FHIR-defined protocol, guideline, orderset
     * or other definition that is adhered to in whole or in part by this
     * request.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * A URL referencing an externally defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this request.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * Indicates the level of authority/intentionality associated with the
     * request and where the request fits into the workflow chain.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * Provides a mechanism to communicate additional information about the
     * response.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Indicates how quickly the request should be addressed with respect to
     * other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** Describes the reason for the request group in coded or textual form. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Indicates another resource whose existence justifies this request group. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * Completed or terminated request(s) whose function is taken by this new
     * request.
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The current state of the request. For request groups, the status reflects
     * the status of all the requests in the group.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The subject for which the request group was created. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * The ResearchDefinition resource describes the conditional state (population
   * and any exposures being compared within the population) and outcome (if
   * specified) that the knowledge (evidence, assertion, recommendation) is
   * about.
   */
  export class ResearchDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ResearchDefinition";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * A human-readable string to clarify or explain concepts about the
     * resource.
     */
    set comment(value: Array<String>) {
      this._content["comment"] = value;
    }

    get comment(): Array<String> {
      return this._content["comment"] as Array<String>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the research definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the research definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the research definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the research definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the research definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the research definition content was or is planned
     * to be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this research definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A reference to a ResearchElementDefinition resource that defines the
     * exposure for the research.
     */
    set exposure(value: Reference) {
      this._content["exposure"] = value;
    }

    get exposure(): Reference {
      return this._content["exposure"] as Reference;
    }

    /**
     * A reference to a ResearchElementDefinition resource that defines the
     * exposureAlternative for the research.
     */
    set exposureAlternative(value: Reference) {
      this._content["exposureAlternative"] = value;
    }

    get exposureAlternative(): Reference {
      return this._content["exposureAlternative"] as Reference;
    }

    /**
     * A formal identifier that is used to identify this research definition
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the research definition is intended
     * to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing the formal logic used by the
     * ResearchDefinition.
     */
    set library(value: Array<Canonical>) {
      this._content["library"] = value;
    }

    get library(): Array<Canonical> {
      return this._content["library"] as Array<Canonical>;
    }

    /**
     * A natural language name identifying the research definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A reference to a ResearchElementDefinition resomece that defines the
     * outcome for the research.
     */
    set outcome(value: Reference) {
      this._content["outcome"] = value;
    }

    get outcome(): Reference {
      return this._content["outcome"] as Reference;
    }

    /**
     * A reference to a ResearchElementDefinition resource that defines the
     * population for the research.
     */
    set population(value: Reference) {
      this._content["population"] = value;
    }

    get population(): Reference {
      return this._content["population"] as Reference;
    }

    /**
     * The name of the organization or individual that published the research
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this research definition is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The short title provides an alternate title for use in informal
     * descriptive contexts where the full, formal title is not necessary.
     */
    set shortTitle(value: String) {
      this._content["shortTitle"] = value;
    }

    get shortTitle(): String {
      return this._content["shortTitle"] as String;
    }

    /**
     * The status of this research definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The intended subjects for the ResearchDefinition. If this element is not
     * provided, a Patient subject is assumed, but the subject of the
     * ResearchDefinition can be anything.
     */
    set subject(value: CodeableConcept | Reference) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * An explanatory or alternate title for the ResearchDefinition giving
     * additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /** A short, descriptive, user-friendly title for the research definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the ResearchDefinition.
     * Topics provide a high-level categorization grouping types of
     * ResearchDefinitions that can be useful for filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /**
     * An absolute URI that is used to identify this research definition when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this research definition is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * research definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description, from a clinical perspective, of how the
     * ResearchDefinition is used.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate research definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the research
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the research definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The ResearchElementDefinition resource describes a "PICO" element that
   * knowledge (evidence, assertion, recommendation) is about.
   */
  export class ResearchElementDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ResearchElementDefinition";

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    set author(value: Array<ContactDetail>) {
      this._content["author"] = value;
    }

    get author(): Array<ContactDetail> {
      return this._content["author"] as Array<ContactDetail>;
    }

    /**
     * A characteristic that defines the members of the research element.
     * Multiple characteristics are applied with "and" semantics.
     */
    set characteristic(value: Array<BackboneElement>) {
      this._content["characteristic"] = value;
    }

    get characteristic(): Array<BackboneElement> {
      return this._content["characteristic"] as Array<BackboneElement>;
    }

    /**
     * A human-readable string to clarify or explain concepts about the
     * resource.
     */
    set comment(value: Array<String>) {
      this._content["comment"] = value;
    }

    get comment(): Array<String> {
      return this._content["comment"] as Array<String>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the research element definition and/or
     * its contents. Copyright statements are generally legal restrictions on
     * the use and publishing of the research element definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the research element definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the research element definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the research element
     * definition from a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    set editor(value: Array<ContactDetail>) {
      this._content["editor"] = value;
    }

    get editor(): Array<ContactDetail> {
      return this._content["editor"] as Array<ContactDetail>;
    }

    /**
     * The period during which the research element definition content was or is
     * planned to be in active use.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    set endorser(value: Array<ContactDetail>) {
      this._content["endorser"] = value;
    }

    get endorser(): Array<ContactDetail> {
      return this._content["endorser"] as Array<ContactDetail>;
    }

    /**
     * A Boolean value to indicate that this research element definition is
     * authored for testing purposes (or education/evaluation/marketing) and is
     * not intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this research element
     * definition when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the research element definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the resource content was last reviewed. Review happens
     * periodically after approval but does not change the original approval
     * date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * A reference to a Library resource containing the formal logic used by the
     * ResearchElementDefinition.
     */
    set library(value: Array<Canonical>) {
      this._content["library"] = value;
    }

    get library(): Array<Canonical> {
      return this._content["library"] as Array<Canonical>;
    }

    /**
     * A natural language name identifying the research element definition. This
     * name should be usable as an identifier for the module by machine
     * processing applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the research
     * element definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this research element definition is needed and why it
     * has been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    set reviewer(value: Array<ContactDetail>) {
      this._content["reviewer"] = value;
    }

    get reviewer(): Array<ContactDetail> {
      return this._content["reviewer"] as Array<ContactDetail>;
    }

    /**
     * The short title provides an alternate title for use in informal
     * descriptive contexts where the full, formal title is not necessary.
     */
    set shortTitle(value: String) {
      this._content["shortTitle"] = value;
    }

    get shortTitle(): String {
      return this._content["shortTitle"] as String;
    }

    /**
     * The status of this research element definition. Enables tracking the
     * life-cycle of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The intended subjects for the ResearchElementDefinition. If this element
     * is not provided, a Patient subject is assumed, but the subject of the
     * ResearchElementDefinition can be anything.
     */
    set subject(value: CodeableConcept | Reference) {
      this._content["subject"] = value;
    }

    get subjectCodeableConcept(): CodeableConcept {
      return this._content["subject"] as CodeableConcept;
    }

    get subjectReference(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * An explanatory or alternate title for the ResearchElementDefinition
     * giving additional information about its content.
     */
    set subtitle(value: String) {
      this._content["subtitle"] = value;
    }

    get subtitle(): String {
      return this._content["subtitle"] as String;
    }

    /**
     * A short, descriptive, user-friendly title for the research element
     * definition.
     */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Descriptive topics related to the content of the
     * ResearchElementDefinition. Topics provide a high-level categorization
     * grouping types of ResearchElementDefinitions that can be useful for
     * filtering and searching.
     */
    set topic(value: Array<CodeableConcept>) {
      this._content["topic"] = value;
    }

    get topic(): Array<CodeableConcept> {
      return this._content["topic"] as Array<CodeableConcept>;
    }

    /** The type of research element, a population, an exposure, or an outcome. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * An absolute URI that is used to identify this research element definition
     * when it is referenced in a specification, model, design or an instance;
     * also called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this research element definition is (or will be) published. This URL
     * can be the target of a canonical reference. It SHALL remain the same when
     * the research element definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * A detailed description, from a clinical perspective, of how the
     * ResearchElementDefinition is used.
     */
    set usage(value: String) {
      this._content["usage"] = value;
    }

    get usage(): String {
      return this._content["usage"] as String;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate research element definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /** The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive). */
    set variableType(value: Code) {
      this._content["variableType"] = value;
    }

    get variableType(): Code {
      return this._content["variableType"] as Code;
    }

    /**
     * The identifier that is used to identify this version of the research
     * element definition when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the research
     * element definition author and is not expected to be globally unique. For
     * example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
     * not available. There is also no expectation that versions can be placed
     * in a lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active artifacts.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A process where a researcher or organization plans and then executes a
   * series of steps intended to increase the field of healthcare-related
   * knowledge. This includes studies of safety, efficacy, comparative
   * effectiveness and other information about medications, devices, therapies
   * and other interventional and investigative techniques. A ResearchStudy
   * involves the gathering of information about human or animal subjects.
   */
  export class ResearchStudy extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ResearchStudy";

    /**
     * Describes an expected sequence of events for one of the participants of a
     * study. E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out,
     * follow-up.
     */
    set arm(value: Array<BackboneElement>) {
      this._content["arm"] = value;
    }

    get arm(): Array<BackboneElement> {
      return this._content["arm"] as Array<BackboneElement>;
    }

    /**
     * Codes categorizing the type of study such as investigational vs.
     * observational, type of blinding, type of randomization, safety vs.
     * efficacy, etc.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * The condition that is the focus of the study. For example, In a study to
     * examine risk factors for Lupus, might have as an inclusion criterion
     * "healthy volunteer", but the target condition code would be a Lupus
     * SNOMED code.
     */
    set condition(value: Array<CodeableConcept>) {
      this._content["condition"] = value;
    }

    get condition(): Array<CodeableConcept> {
      return this._content["condition"] as Array<CodeableConcept>;
    }

    /**
     * Contact details to assist a user in learning more about or engaging with
     * the study.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /** A full description of how the study is being conducted. */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Reference to a Group that defines the criteria for and quantity of
     * subjects participating in the study. E.g. " 200 female Europeans between
     * the ages of 20 and 45 with early onset diabetes".
     */
    set enrollment(value: Array<Reference>) {
      this._content["enrollment"] = value;
    }

    get enrollment(): Array<Reference> {
      return this._content["enrollment"] as Array<Reference>;
    }

    /**
     * The medication(s), food(s), therapy(ies), device(s) or other concerns or
     * interventions that the study is seeking to gain more information about.
     */
    set focus(value: Array<CodeableConcept>) {
      this._content["focus"] = value;
    }

    get focus(): Array<CodeableConcept> {
      return this._content["focus"] as Array<CodeableConcept>;
    }

    /**
     * Identifiers assigned to this research study by the sponsor or other
     * systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Key terms to aid in searching for or filtering the study. */
    set keyword(value: Array<CodeableConcept>) {
      this._content["keyword"] = value;
    }

    get keyword(): Array<CodeableConcept> {
      return this._content["keyword"] as Array<CodeableConcept>;
    }

    /**
     * Indicates a country, state or other region where the study is taking
     * place.
     */
    set location(value: Array<CodeableConcept>) {
      this._content["location"] = value;
    }

    get location(): Array<CodeableConcept> {
      return this._content["location"] as Array<CodeableConcept>;
    }

    /**
     * Comments made about the study by the performer, subject or other
     * participants.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * A goal that the study is aiming to achieve in terms of a scientific
     * question to be answered by the analysis of data collected during the
     * study.
     */
    set objective(value: Array<BackboneElement>) {
      this._content["objective"] = value;
    }

    get objective(): Array<BackboneElement> {
      return this._content["objective"] as Array<BackboneElement>;
    }

    /**
     * A larger research study of which this particular study is a component or
     * step.
     */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * Identifies the start date and the expected (or actual, depending on
     * status) end date for the study.
     */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /**
     * The stage in the progression of a therapy from initial experimental use
     * in humans in clinical trials to post-market evaluation.
     */
    set phase(value: CodeableConcept) {
      this._content["phase"] = value;
    }

    get phase(): CodeableConcept {
      return this._content["phase"] as CodeableConcept;
    }

    /**
     * The type of study based upon the intent of the study's activities. A
     * classification of the intent of the study.
     */
    set primaryPurposeType(value: CodeableConcept) {
      this._content["primaryPurposeType"] = value;
    }

    get primaryPurposeType(): CodeableConcept {
      return this._content["primaryPurposeType"] as CodeableConcept;
    }

    /**
     * A researcher in a study who oversees multiple aspects of the study, such
     * as concept development, protocol writing, protocol submission for IRB
     * approval, participant recruitment, informed consent, data collection,
     * analysis, interpretation and presentation.
     */
    set principalInvestigator(value: Reference) {
      this._content["principalInvestigator"] = value;
    }

    get principalInvestigator(): Reference {
      return this._content["principalInvestigator"] as Reference;
    }

    /**
     * The set of steps expected to be performed as part of the execution of the
     * study.
     */
    set protocol(value: Array<Reference>) {
      this._content["protocol"] = value;
    }

    get protocol(): Array<Reference> {
      return this._content["protocol"] as Array<Reference>;
    }

    /**
     * A description and/or code explaining the premature termination of the
     * study.
     */
    set reasonStopped(value: CodeableConcept) {
      this._content["reasonStopped"] = value;
    }

    get reasonStopped(): CodeableConcept {
      return this._content["reasonStopped"] as CodeableConcept;
    }

    /** Citations, references and other related documents. */
    set relatedArtifact(value: Array<RelatedArtifact>) {
      this._content["relatedArtifact"] = value;
    }

    get relatedArtifact(): Array<RelatedArtifact> {
      return this._content["relatedArtifact"] as Array<RelatedArtifact>;
    }

    /** A facility in which study activities are conducted. */
    set site(value: Array<Reference>) {
      this._content["site"] = value;
    }

    get site(): Array<Reference> {
      return this._content["site"] as Array<Reference>;
    }

    /**
     * An organization that initiates the investigation and is legally
     * responsible for the study.
     */
    set sponsor(value: Reference) {
      this._content["sponsor"] = value;
    }

    get sponsor(): Reference {
      return this._content["sponsor"] as Reference;
    }

    /** The current state of the study. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive user-friendly label for the study. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }
  }

  /**
   * A physical entity which is the primary unit of operational and/or
   * administrative interest in a study.
   */
  export class ResearchSubject extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ResearchSubject";

    /**
     * The name of the arm in the study the subject actually followed as part of
     * this study.
     */
    set actualArm(value: String) {
      this._content["actualArm"] = value;
    }

    get actualArm(): String {
      return this._content["actualArm"] as String;
    }

    /**
     * The name of the arm in the study the subject is expected to follow as
     * part of this study.
     */
    set assignedArm(value: String) {
      this._content["assignedArm"] = value;
    }

    get assignedArm(): String {
      return this._content["assignedArm"] as String;
    }

    /** A record of the patient's informed agreement to participate in the study. */
    set consent(value: Reference) {
      this._content["consent"] = value;
    }

    get consent(): Reference {
      return this._content["consent"] as Reference;
    }

    /** Identifiers assigned to this research subject for a study. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The record of the person or animal who is involved in the study. */
    set individual(value: Reference) {
      this._content["individual"] = value;
    }

    get individual(): Reference {
      return this._content["individual"] as Reference;
    }

    /** The dates the subject began and ended their participation in the study. */
    set period(value: Period) {
      this._content["period"] = value;
    }

    get period(): Period {
      return this._content["period"] as Period;
    }

    /** The current state of the subject. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Reference to the study the subject is participating in. */
    set study(value: Reference) {
      this._content["study"] = value;
    }

    get study(): Reference {
      return this._content["study"] as Reference;
    }
  }

  /**
   * An assessment of the likely outcome(s) for a patient or other subject as
   * well as the likelihood of each outcome.
   */
  export class RiskAssessment extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/RiskAssessment";

    /** A reference to the request that is fulfilled by this risk assessment. */
    set basedOn(value: Reference) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Reference {
      return this._content["basedOn"] as Reference;
    }

    /**
     * Indicates the source data considered as part of the assessment (for
     * example, FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    set basis(value: Array<Reference>) {
      this._content["basis"] = value;
    }

    get basis(): Array<Reference> {
      return this._content["basis"] as Array<Reference>;
    }

    /** The type of the risk assessment performed. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * For assessments or prognosis specific to a particular condition,
     * indicates the condition being assessed.
     */
    set condition(value: Reference) {
      this._content["condition"] = value;
    }

    get condition(): Reference {
      return this._content["condition"] as Reference;
    }

    /** The encounter where the assessment was performed. */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** Business identifier assigned to the risk assessment. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The algorithm, process or mechanism used to evaluate the risk. */
    set method(value: CodeableConcept) {
      this._content["method"] = value;
    }

    get method(): CodeableConcept {
      return this._content["method"] as CodeableConcept;
    }

    /**
     * A description of the steps that might be taken to reduce the identified
     * risk(s).
     */
    set mitigation(value: String) {
      this._content["mitigation"] = value;
    }

    get mitigation(): String {
      return this._content["mitigation"] as String;
    }

    /** Additional comments about the risk assessment. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The date (and possibly time) the risk assessment was performed. */
    set occurrence(value: DateTime | Period) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    /**
     * A reference to a resource that this risk assessment is part of, such as a
     * Procedure.
     */
    set parent(value: Reference) {
      this._content["parent"] = value;
    }

    get parent(): Reference {
      return this._content["parent"] as Reference;
    }

    /** The provider or software application that performed the assessment. */
    set performer(value: Reference) {
      this._content["performer"] = value;
    }

    get performer(): Reference {
      return this._content["performer"] as Reference;
    }

    /** Describes the expected outcome for the subject. */
    set prediction(value: Array<BackboneElement>) {
      this._content["prediction"] = value;
    }

    get prediction(): Array<BackboneElement> {
      return this._content["prediction"] as Array<BackboneElement>;
    }

    /** The reason the risk assessment was performed. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** Resources supporting the reason the risk assessment was performed. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /**
     * The status of the RiskAssessment, using the same statuses as an
     * Observation.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The patient or group the risk assessment applies to. */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }
  }

  /**
   * A container for slots of time that may be available for booking
   * appointments.
   */
  export class Schedule extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Schedule";

    /**
     * Whether this schedule record is in active use or should not be used (such
     * as was entered in error).
     */
    set active(value: Boolean) {
      this._content["active"] = value;
    }

    get active(): Boolean {
      return this._content["active"] as Boolean;
    }

    /**
     * Slots that reference this schedule resource provide the availability
     * details to these referenced resource(s).
     */
    set actor(value: Array<Reference>) {
      this._content["actor"] = value;
    }

    get actor(): Array<Reference> {
      return this._content["actor"] as Array<Reference>;
    }

    /**
     * Comments on the availability to describe any extended information. Such
     * as custom constraints on the slots that may be associated.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /** External Ids for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The period of time that the slots that reference this Schedule resource
     * cover (even if none exist). These cover the amount of time that an
     * organization's planning horizon; the interval for which they are
     * currently accepting appointments. This does not define a "template" for
     * planning outside these dates.
     */
    set planningHorizon(value: Period) {
      this._content["planningHorizon"] = value;
    }

    get planningHorizon(): Period {
      return this._content["planningHorizon"] as Period;
    }

    /**
     * A broad categorization of the service that is to be performed during this
     * appointment.
     */
    set serviceCategory(value: Array<CodeableConcept>) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): Array<CodeableConcept> {
      return this._content["serviceCategory"] as Array<CodeableConcept>;
    }

    /** The specific service that is to be performed during this appointment. */
    set serviceType(value: Array<CodeableConcept>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<CodeableConcept> {
      return this._content["serviceType"] as Array<CodeableConcept>;
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }
  }

  /**
   * A search parameter that defines a named search item that can be used to
   * search/filter on a resource.
   */
  export class SearchParameter extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SearchParameter";

    /** The base resource type(s) that this search parameter can be used against. */
    set base(value: Array<Code>) {
      this._content["base"] = value;
    }

    get base(): Array<Code> {
      return this._content["base"] as Array<Code>;
    }

    /**
     * Contains the names of any search parameters which may be chained to the
     * containing search parameter. Chained parameters may be added to search
     * parameters of type reference and specify that resources will only be
     * returned if they contain a reference to a resource which matches the
     * chained parameter value. Values for this field should be drawn from
     * SearchParameter.code for a parameter on the target resource type.
     */
    set chain(value: Array<String>) {
      this._content["chain"] = value;
    }

    get chain(): Array<String> {
      return this._content["chain"] as Array<String>;
    }

    /**
     * The code used in the URL or the parameter name in a parameters resource
     * for this search parameter.
     */
    set code(value: Code) {
      this._content["code"] = value;
    }

    get code(): Code {
      return this._content["code"] as Code;
    }

    /** Comparators supported for the search parameter. */
    set comparator(value: Array<Code>) {
      this._content["comparator"] = value;
    }

    get comparator(): Array<Code> {
      return this._content["comparator"] as Array<Code>;
    }

    /** Used to define the parts of a composite search parameter. */
    set component(value: Array<BackboneElement>) {
      this._content["component"] = value;
    }

    get component(): Array<BackboneElement> {
      return this._content["component"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * The date (and optionally time) when the search parameter was published.
     * The date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the search parameter changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * Where this search parameter is originally defined. If a derivedFrom is
     * provided, then the details in the search parameter must be consistent
     * with the definition from which it is defined. i.e. the parameter should
     * have the same meaning, and (usually) the functionality should be a proper
     * subset of the underlying search parameter.
     */
    set derivedFrom(value: Canonical) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Canonical {
      return this._content["derivedFrom"] as Canonical;
    }

    /** And how it used. */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this search parameter is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A FHIRPath expression that returns a set of elements for the search
     * parameter.
     */
    set expression(value: String) {
      this._content["expression"] = value;
    }

    get expression(): String {
      return this._content["expression"] as String;
    }

    /**
     * A legal or geographic region in which the search parameter is intended to
     * be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /** A modifier supported for the search parameter. */
    set modifier(value: Array<Code>) {
      this._content["modifier"] = value;
    }

    get modifier(): Array<Code> {
      return this._content["modifier"] as Array<Code>;
    }

    /**
     * Whether multiple parameters are allowed - e.g. more than one parameter
     * with the same name. The search matches if all the parameters match.
     */
    set multipleAnd(value: Boolean) {
      this._content["multipleAnd"] = value;
    }

    get multipleAnd(): Boolean {
      return this._content["multipleAnd"] as Boolean;
    }

    /**
     * Whether multiple values are allowed for each time the parameter exists.
     * Values are separated by commas, and the parameter matches if any of the
     * values match.
     */
    set multipleOr(value: Boolean) {
      this._content["multipleOr"] = value;
    }

    get multipleOr(): Boolean {
      return this._content["multipleOr"] as Boolean;
    }

    /**
     * A natural language name identifying the search parameter. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the search
     * parameter.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this search parameter is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this search parameter. Enables tracking the life-cycle of
     * the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Types of resource (if a resource is referenced). */
    set target(value: Array<Code>) {
      this._content["target"] = value;
    }

    get target(): Array<Code> {
      return this._content["target"] as Array<Code>;
    }

    /**
     * The type of value that a search parameter may contain, and how the
     * content is interpreted.
     */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }

    /**
     * An absolute URI that is used to identify this search parameter when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * search parameter is (or will be) published. This URL can be the target of
     * a canonical reference. It SHALL remain the same when the search parameter
     * is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate search parameter instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the search
     * parameter when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the search parameter
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }

    /**
     * An XPath expression that returns a set of elements for the search
     * parameter.
     */
    set xpath(value: String) {
      this._content["xpath"] = value;
    }

    get xpath(): String {
      return this._content["xpath"] as String;
    }

    /**
     * How the search parameter relates to the set of elements returned by
     * evaluating the xpath query.
     */
    set xpathUsage(value: Code) {
      this._content["xpathUsage"] = value;
    }

    get xpathUsage(): Code {
      return this._content["xpathUsage"] as Code;
    }
  }

  /**
   * A record of a request for service such as diagnostic investigations,
   * treatments, or operations to be performed.
   */
  export class ServiceRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/ServiceRequest";

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for
     * performing the service. For example "pain", "on flare-up", etc.
     */
    set asNeeded(value: Boolean | CodeableConcept) {
      this._content["asNeeded"] = value;
    }

    get asNeededBoolean(): Boolean {
      return this._content["asNeeded"] as Boolean;
    }

    get asNeededCodeableConcept(): CodeableConcept {
      return this._content["asNeeded"] as CodeableConcept;
    }

    /** When the request transitioned to being actionable. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /** Plan/proposal/order fulfilled by this request. */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Anatomic location where the procedure should be performed. This is the
     * target site.
     */
    set bodySite(value: Array<CodeableConcept>) {
      this._content["bodySite"] = value;
    }

    get bodySite(): Array<CodeableConcept> {
      return this._content["bodySite"] as Array<CodeableConcept>;
    }

    /**
     * A code that classifies the service for searching, sorting and display
     * purposes (e.g. "Surgical Procedure").
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /**
     * A code that identifies a particular service (i.e., procedure, diagnostic
     * investigation, or panel of investigations) that have been requested.
     */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * Set this to true if the record is saying that the service/procedure
     * should NOT be performed.
     */
    set doNotPerform(value: Boolean) {
      this._content["doNotPerform"] = value;
    }

    get doNotPerform(): Boolean {
      return this._content["doNotPerform"] as Boolean;
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Identifiers assigned to this order instance by the orderer and/or the
     * receiver and/or order fulfiller.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
     * definition that is adhered to in whole or in part by this
     * ServiceRequest.
     */
    set instantiatesCanonical(value: Array<Canonical>) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Array<Canonical> {
      return this._content["instantiatesCanonical"] as Array<Canonical>;
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this ServiceRequest.
     */
    set instantiatesUri(value: Array<Uri>) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Array<Uri> {
      return this._content["instantiatesUri"] as Array<Uri>;
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be needed for delivering the requested
     * service.
     */
    set insurance(value: Array<Reference>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<Reference> {
      return this._content["insurance"] as Array<Reference>;
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /**
     * The preferred location(s) where the procedure should actually happen in
     * coded or free text form. E.g. at home or nursing day care center.
     */
    set locationCode(value: Array<CodeableConcept>) {
      this._content["locationCode"] = value;
    }

    get locationCode(): Array<CodeableConcept> {
      return this._content["locationCode"] as Array<CodeableConcept>;
    }

    /**
     * A reference to the the preferred location(s) where the procedure should
     * actually happen. E.g. at home or nursing day care center.
     */
    set locationReference(value: Array<Reference>) {
      this._content["locationReference"] = value;
    }

    get locationReference(): Array<Reference> {
      return this._content["locationReference"] as Array<Reference>;
    }

    /**
     * Any other notes and comments made about the service request. For example,
     * internal billing notes.
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** The date/time at which the requested service should occur. */
    set occurrence(value: DateTime | Period | Timing) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    get occurrenceTiming(): Timing {
      return this._content["occurrence"] as Timing;
    }

    /**
     * Additional details and instructions about the how the services are to be
     * delivered. For example, and order for a urinary catheter may have an
     * order detail for an external or indwelling catheter, or an order for a
     * bandage may require additional instructions specifying how the bandage
     * should be applied.
     */
    set orderDetail(value: Array<CodeableConcept>) {
      this._content["orderDetail"] = value;
    }

    get orderDetail(): Array<CodeableConcept> {
      return this._content["orderDetail"] as Array<CodeableConcept>;
    }

    /** Instructions in terms that are understood by the patient or consumer. */
    set patientInstruction(value: String) {
      this._content["patientInstruction"] = value;
    }

    get patientInstruction(): String {
      return this._content["patientInstruction"] as String;
    }

    /**
     * The desired performer for doing the requested service. For example, the
     * surgeon, dermatopathologist, endoscopist, etc.
     */
    set performer(value: Array<Reference>) {
      this._content["performer"] = value;
    }

    get performer(): Array<Reference> {
      return this._content["performer"] as Array<Reference>;
    }

    /** Desired type of performer for doing the requested service. */
    set performerType(value: CodeableConcept) {
      this._content["performerType"] = value;
    }

    get performerType(): CodeableConcept {
      return this._content["performerType"] as CodeableConcept;
    }

    /**
     * Indicates how quickly the ServiceRequest should be addressed with respect
     * to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /**
     * An amount of service being requested which can be a quantity ( for
     * example $1,500 home modification), a ratio ( for example, 20 half day
     * visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    set quantity(value: Quantity | Ratio | Range) {
      this._content["quantity"] = value;
    }

    get quantityQuantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    get quantityRatio(): Ratio {
      return this._content["quantity"] as Ratio;
    }

    get quantityRange(): Range {
      return this._content["quantity"] as Range;
    }

    /**
     * An explanation or justification for why this service is being requested
     * in coded or textual form. This is often for billing purposes. May relate
     * to the resources referred to in `supportingInfo`.
     */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /**
     * Indicates another resource that provides a justification for why this
     * service is being requested. May relate to the resources referred to in
     * `supportingInfo`.
     */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** Key events in the history of the request. */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    set replaces(value: Array<Reference>) {
      this._content["replaces"] = value;
    }

    get replaces(): Array<Reference> {
      return this._content["replaces"] as Array<Reference>;
    }

    /**
     * The individual who initiated the request and has responsibility for its
     * activation.
     */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /**
     * A shared identifier common to all service requests that were authorized
     * more or less simultaneously by a single author, representing the
     * composite or group identifier.
     */
    set requisition(value: Identifier) {
      this._content["requisition"] = value;
    }

    get requisition(): Identifier {
      return this._content["requisition"] as Identifier;
    }

    /** One or more specimens that the laboratory procedure will use. */
    set specimen(value: Array<Reference>) {
      this._content["specimen"] = value;
    }

    get specimen(): Array<Reference> {
      return this._content["specimen"] as Array<Reference>;
    }

    /** The status of the order. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * On whom or what the service is to be performed. This is usually a human
     * patient, but can also be requested on animals, groups of humans or
     * animals, devices such as dialysis machines, or even locations (typically
     * for environmental scans).
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /**
     * Additional clinical information about the patient or specimen that may
     * influence the services or their interpretations. This information
     * includes diagnosis, clinical findings and other observations. In
     * laboratory ordering these are typically referred to as "ask at order
     * entry questions (AOEs)". This includes observations explicitly requested
     * by the producer (filler) to provide context or supporting information
     * needed to complete the order. For example, reporting the amount of
     * inspired oxygen for blood gas measurements.
     */
    set supportingInfo(value: Array<Reference>) {
      this._content["supportingInfo"] = value;
    }

    get supportingInfo(): Array<Reference> {
      return this._content["supportingInfo"] as Array<Reference>;
    }
  }

  /**
   * A slot of time on a schedule that may be available for booking
   * appointments.
   */
  export class Slot extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Slot";

    /**
     * The style of appointment or patient that may be booked in the slot (not
     * service type).
     */
    set appointmentType(value: CodeableConcept) {
      this._content["appointmentType"] = value;
    }

    get appointmentType(): CodeableConcept {
      return this._content["appointmentType"] as CodeableConcept;
    }

    /**
     * Comments on the slot to describe any extended information. Such as custom
     * constraints on the slot.
     */
    set comment(value: String) {
      this._content["comment"] = value;
    }

    get comment(): String {
      return this._content["comment"] as String;
    }

    /** Date/Time that the slot is to conclude. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /** External Ids for this item. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * This slot has already been overbooked, appointments are unlikely to be
     * accepted for this time.
     */
    set overbooked(value: Boolean) {
      this._content["overbooked"] = value;
    }

    get overbooked(): Boolean {
      return this._content["overbooked"] as Boolean;
    }

    /**
     * The schedule resource that this slot defines an interval of status
     * information.
     */
    set schedule(value: Reference) {
      this._content["schedule"] = value;
    }

    get schedule(): Reference {
      return this._content["schedule"] as Reference;
    }

    /**
     * A broad categorization of the service that is to be performed during this
     * appointment.
     */
    set serviceCategory(value: Array<CodeableConcept>) {
      this._content["serviceCategory"] = value;
    }

    get serviceCategory(): Array<CodeableConcept> {
      return this._content["serviceCategory"] as Array<CodeableConcept>;
    }

    /**
     * The type of appointments that can be booked into this slot (ideally this
     * would be an identifiable service - which is at a location, rather than
     * the location itself). If provided then this overrides the value provided
     * on the availability resource.
     */
    set serviceType(value: Array<CodeableConcept>) {
      this._content["serviceType"] = value;
    }

    get serviceType(): Array<CodeableConcept> {
      return this._content["serviceType"] as Array<CodeableConcept>;
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    set specialty(value: Array<CodeableConcept>) {
      this._content["specialty"] = value;
    }

    get specialty(): Array<CodeableConcept> {
      return this._content["specialty"] as Array<CodeableConcept>;
    }

    /** Date/Time that the slot is to begin. */
    set start(value: Instant) {
      this._content["start"] = value;
    }

    get start(): Instant {
      return this._content["start"] as Instant;
    }

    /** Busy | free | busy-unavailable | busy-tentative | entered-in-error. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /** A sample to be used for analysis. */
  export class Specimen extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Specimen";

    /**
     * The identifier assigned by the lab when accessioning specimen(s). This is
     * not necessarily the same as the specimen identifier, depending on local
     * lab procedures.
     */
    set accessionIdentifier(value: Identifier) {
      this._content["accessionIdentifier"] = value;
    }

    get accessionIdentifier(): Identifier {
      return this._content["accessionIdentifier"] as Identifier;
    }

    /** Details concerning the specimen collection. */
    set collection(value: BackboneElement) {
      this._content["collection"] = value;
    }

    get collection(): BackboneElement {
      return this._content["collection"] as BackboneElement;
    }

    /** A mode or state of being that describes the nature of the specimen. */
    set condition(value: Array<CodeableConcept>) {
      this._content["condition"] = value;
    }

    get condition(): Array<CodeableConcept> {
      return this._content["condition"] as Array<CodeableConcept>;
    }

    /**
     * The container holding the specimen. The recursive nature of containers;
     * i.e. blood in tube in tray in rack is not addressed here.
     */
    set container(value: Array<BackboneElement>) {
      this._content["container"] = value;
    }

    get container(): Array<BackboneElement> {
      return this._content["container"] as Array<BackboneElement>;
    }

    /** Id for specimen. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * To communicate any details or issues about the specimen or during the
     * specimen collection. (for example: broken vial, sent with patient,
     * frozen).
     */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /**
     * Reference to the parent (source) specimen which is used when the specimen
     * was either derived from or a component of another specimen.
     */
    set parent(value: Array<Reference>) {
      this._content["parent"] = value;
    }

    get parent(): Array<Reference> {
      return this._content["parent"] as Array<Reference>;
    }

    /** Details concerning processing and processing steps for the specimen. */
    set processing(value: Array<BackboneElement>) {
      this._content["processing"] = value;
    }

    get processing(): Array<BackboneElement> {
      return this._content["processing"] as Array<BackboneElement>;
    }

    /** Time when specimen was received for processing or testing. */
    set receivedTime(value: DateTime) {
      this._content["receivedTime"] = value;
    }

    get receivedTime(): DateTime {
      return this._content["receivedTime"] as DateTime;
    }

    /**
     * Details concerning a service request that required a specimen to be
     * collected.
     */
    set request(value: Array<Reference>) {
      this._content["request"] = value;
    }

    get request(): Array<Reference> {
      return this._content["request"] as Array<Reference>;
    }

    /** The availability of the specimen. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * Where the specimen came from. This may be from patient(s), from a
     * location (e.g., the source of an environmental sample), or a sampling of
     * a substance or a device.
     */
    set subject(value: Reference) {
      this._content["subject"] = value;
    }

    get subject(): Reference {
      return this._content["subject"] as Reference;
    }

    /** The kind of material that forms the specimen. */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /** A kind of specimen with associated set of requirements. */
  export class SpecimenDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition";

    /** The action to be performed for collecting the specimen. */
    set collection(value: Array<CodeableConcept>) {
      this._content["collection"] = value;
    }

    get collection(): Array<CodeableConcept> {
      return this._content["collection"] as Array<CodeableConcept>;
    }

    /** A business identifier associated with the kind of specimen. */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** Preparation of the patient for specimen collection. */
    set patientPreparation(value: Array<CodeableConcept>) {
      this._content["patientPreparation"] = value;
    }

    get patientPreparation(): Array<CodeableConcept> {
      return this._content["patientPreparation"] as Array<CodeableConcept>;
    }

    /** Time aspect of specimen collection (duration or offset). */
    set timeAspect(value: String) {
      this._content["timeAspect"] = value;
    }

    get timeAspect(): String {
      return this._content["timeAspect"] as String;
    }

    /** The kind of material to be collected. */
    set typeCollected(value: CodeableConcept) {
      this._content["typeCollected"] = value;
    }

    get typeCollected(): CodeableConcept {
      return this._content["typeCollected"] as CodeableConcept;
    }

    /**
     * Specimen conditioned in a container as expected by the testing
     * laboratory.
     */
    set typeTested(value: Array<BackboneElement>) {
      this._content["typeTested"] = value;
    }

    get typeTested(): Array<BackboneElement> {
      return this._content["typeTested"] as Array<BackboneElement>;
    }
  }

  /**
   * A definition of a FHIR structure. This resource is used to describe the
   * underlying resources, data types defined in FHIR, and also for describing
   * extensions and constraints on resources and data types.
   */
  export class StructureDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/StructureDefinition";

    /**
     * Whether structure this definition describes is abstract or not - that is,
     * whether the structure is not intended to be instantiated. For Resources
     * and Data types, abstract types will never be exchanged between systems.
     */
    set abstract(value: Boolean) {
      this._content["abstract"] = value;
    }

    get abstract(): Boolean {
      return this._content["abstract"] as Boolean;
    }

    /**
     * An absolute URI that is the base structure from which this type is
     * derived, either by specialization or constraint.
     */
    set baseDefinition(value: Canonical) {
      this._content["baseDefinition"] = value;
    }

    get baseDefinition(): Canonical {
      return this._content["baseDefinition"] as Canonical;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * Identifies the types of resource or data type elements to which the
     * extension can be applied.
     */
    set context(value: Array<BackboneElement>) {
      this._content["context"] = value;
    }

    get context(): Array<BackboneElement> {
      return this._content["context"] as Array<BackboneElement>;
    }

    /**
     * A set of rules as FHIRPath Invariants about when the extension can be
     * used (e.g. co-occurrence variants for the extension). All the rules must
     * be true.
     */
    set contextInvariant(value: Array<String>) {
      this._content["contextInvariant"] = value;
    }

    get contextInvariant(): Array<String> {
      return this._content["contextInvariant"] as Array<String>;
    }

    /**
     * A copyright statement relating to the structure definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the structure definition.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the structure definition was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the structure definition changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /** How the type relates to the baseDefinition. */
    set derivation(value: Code) {
      this._content["derivation"] = value;
    }

    get derivation(): Code {
      return this._content["derivation"] as Code;
    }

    /**
     * A free text natural language description of the structure definition from
     * a consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A differential view is expressed relative to the base StructureDefinition
     * - a statement of differences that it applies.
     */
    set differential(value: BackboneElement) {
      this._content["differential"] = value;
    }

    get differential(): BackboneElement {
      return this._content["differential"] as BackboneElement;
    }

    /**
     * A Boolean value to indicate that this structure definition is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * The version of the FHIR specification on which this StructureDefinition
     * is based - this is the formal version of the specification, without the
     * revision number, e.g. [publication].[major].[minor], which is 4.3.0 for
     * this version.
     */
    set fhirVersion(value: Code) {
      this._content["fhirVersion"] = value;
    }

    get fhirVersion(): Code {
      return this._content["fhirVersion"] as Code;
    }

    /**
     * A formal identifier that is used to identify this structure definition
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * A legal or geographic region in which the structure definition is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A set of key words or terms from external terminologies that may be used
     * to assist with indexing and searching of templates nby describing the use
     * of this structure definition, or the content it describes.
     */
    set keyword(value: Array<Coding>) {
      this._content["keyword"] = value;
    }

    get keyword(): Array<Coding> {
      return this._content["keyword"] as Array<Coding>;
    }

    /** Defines the kind of structure that this definition is describing. */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** An external specification that the content is mapped to. */
    set mapping(value: Array<BackboneElement>) {
      this._content["mapping"] = value;
    }

    get mapping(): Array<BackboneElement> {
      return this._content["mapping"] as Array<BackboneElement>;
    }

    /**
     * A natural language name identifying the structure definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the structure
     * definition.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this structure definition is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * A snapshot view is expressed in a standalone form that can be used and
     * interpreted without considering the base StructureDefinition.
     */
    set snapshot(value: BackboneElement) {
      this._content["snapshot"] = value;
    }

    get snapshot(): BackboneElement {
      return this._content["snapshot"] as BackboneElement;
    }

    /**
     * The status of this structure definition. Enables tracking the life-cycle
     * of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the structure definition. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * The type this structure describes. If the derivation kind is
     * 'specialization' then this is the master definition for a type, and there
     * is always one of these (a data type, an extension, a resource, including
     * abstract ones). Otherwise the structure definition is a constraint on the
     * stated type (and in this case, the type cannot be an abstract type).
     * References are URLs that are relative to
     * http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
     * http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only
     * allowed in logical models.
     */
    set type(value: Uri) {
      this._content["type"] = value;
    }

    get type(): Uri {
      return this._content["type"] as Uri;
    }

    /**
     * An absolute URI that is used to identify this structure definition when
     * it is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this structure definition is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * structure definition is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate structure definition instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the structure
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the structure definition
     * author and is not expected to be globally unique. For example, it might
     * be a timestamp (e.g. yyyymmdd) if a managed version is not available.
     * There is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A Map of relationships between 2 structures that can be used to transform
   * data.
   */
  export class StructureMap extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/StructureMap";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the structure map and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the structure map.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the structure map was published. The
     * date must change when the business version changes and it must change if
     * the status code changes. In addition, it should change when the
     * substantive content of the structure map changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the structure map from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A Boolean value to indicate that this structure map is authored for
     * testing purposes (or education/evaluation/marketing) and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Organizes the mapping into manageable chunks for human review/ease of
     * maintenance.
     */
    set group(value: Array<BackboneElement>) {
      this._content["group"] = value;
    }

    get group(): Array<BackboneElement> {
      return this._content["group"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this structure map when it
     * is represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Other maps used by this map (canonical URLs). */
    set import(value: Array<Canonical>) {
      this._content["import"] = value;
    }

    get import(): Array<Canonical> {
      return this._content["import"] as Array<Canonical>;
    }

    /**
     * A legal or geographic region in which the structure map is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the structure map. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the structure
     * map.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this structure map is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this structure map. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A structure definition used by this map. The structure definition may
     * describe instances that are converted, or the instances that are
     * produced.
     */
    set structure(value: Array<BackboneElement>) {
      this._content["structure"] = value;
    }

    get structure(): Array<BackboneElement> {
      return this._content["structure"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the structure map. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this structure map when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this
     * structure map is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the structure map is
     * stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate structure map instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the structure map
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the structure map author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * The subscription resource is used to define a push-based subscription from
   * a server to another system. Once a subscription is registered with the
   * server, the server checks every resource that is created or updated, and if
   * the resource matches the given criteria, it sends a message on the defined
   * "channel" so that another system can take an appropriate action.
   */
  export class Subscription extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Subscription";

    /**
     * Details where to send notifications when resources are received that meet
     * the criteria.
     */
    set channel(value: BackboneElement) {
      this._content["channel"] = value;
    }

    get channel(): BackboneElement {
      return this._content["channel"] as BackboneElement;
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    set contact(value: Array<ContactPoint>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactPoint> {
      return this._content["contact"] as Array<ContactPoint>;
    }

    /**
     * The rules that the server should use to determine when to generate
     * notifications for this subscription.
     */
    set criteria(value: String) {
      this._content["criteria"] = value;
    }

    get criteria(): String {
      return this._content["criteria"] as String;
    }

    /** The time for the server to turn the subscription off. */
    set end(value: Instant) {
      this._content["end"] = value;
    }

    get end(): Instant {
      return this._content["end"] as Instant;
    }

    /**
     * A record of the last error that occurred when the server processed a
     * notification.
     */
    set error(value: String) {
      this._content["error"] = value;
    }

    get error(): String {
      return this._content["error"] as String;
    }

    /** A description of why this subscription is defined. */
    set reason(value: String) {
      this._content["reason"] = value;
    }

    get reason(): String {
      return this._content["reason"] as String;
    }

    /**
     * The status of the subscription, which marks the server state for managing
     * the subscription.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * The SubscriptionStatus resource describes the state of a Subscription
   * during notifications.
   */
  export class SubscriptionStatus extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SubscriptionStatus";

    /**
     * A record of errors that occurred when the server processed a
     * notification.
     */
    set error(value: Array<CodeableConcept>) {
      this._content["error"] = value;
    }

    get error(): Array<CodeableConcept> {
      return this._content["error"] as Array<CodeableConcept>;
    }

    /**
     * The total number of actual events which have been generated since the
     * Subscription was created (inclusive of this notification) - regardless of
     * how many have been successfully communicated. This number is NOT
     * incremented for handshake and heartbeat notifications.
     */
    set eventsSinceSubscriptionStart(value: String) {
      this._content["eventsSinceSubscriptionStart"] = value;
    }

    get eventsSinceSubscriptionStart(): String {
      return this._content["eventsSinceSubscriptionStart"] as String;
    }

    /**
     * Detailed information about events relevant to this subscription
     * notification.
     */
    set notificationEvent(value: Array<BackboneElement>) {
      this._content["notificationEvent"] = value;
    }

    get notificationEvent(): Array<BackboneElement> {
      return this._content["notificationEvent"] as Array<BackboneElement>;
    }

    /**
     * The status of the subscription, which marks the server state for managing
     * the subscription.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The reference to the Subscription which generated this notification. */
    set subscription(value: Reference) {
      this._content["subscription"] = value;
    }

    get subscription(): Reference {
      return this._content["subscription"] as Reference;
    }

    /**
     * The reference to the SubscriptionTopic for the Subscription which
     * generated this notification.
     */
    set topic(value: Canonical) {
      this._content["topic"] = value;
    }

    get topic(): Canonical {
      return this._content["topic"] as Canonical;
    }

    /** The type of event being conveyed with this notificaiton. */
    set type(value: Code) {
      this._content["type"] = value;
    }

    get type(): Code {
      return this._content["type"] as Code;
    }
  }

  /**
   * Describes a stream of resource state changes identified by trigger criteria
   * and annotated with labels useful to filter projections from this topic.
   */
  export class SubscriptionTopic extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SubscriptionTopic";

    /**
     * The date on which the asset content was approved by the publisher.
     * Approval happens once when the content is officially approved for usage.
     */
    set approvalDate(value: Date) {
      this._content["approvalDate"] = value;
    }

    get approvalDate(): Date {
      return this._content["approvalDate"] as Date;
    }

    /**
     * List of properties by which Subscriptions on the SubscriptionTopic can be
     * filtered. May be defined Search Parameters (e.g., Encounter.patient) or
     * parameters defined within this SubscriptionTopic context (e.g.,
     * hub.event).
     */
    set canFilterBy(value: Array<BackboneElement>) {
      this._content["canFilterBy"] = value;
    }

    get canFilterBy(): Array<BackboneElement> {
      return this._content["canFilterBy"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the SubscriptionTopic and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the SubscriptionTopic.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * For draft definitions, indicates the date of initial creation. For active
     * definitions, represents the date of activation. For withdrawn
     * definitions, indicates the date of withdrawal.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * The canonical URL pointing to another FHIR-defined SubscriptionTopic that
     * is adhered to in whole or in part by this SubscriptionTopic.
     */
    set derivedFrom(value: Array<Canonical>) {
      this._content["derivedFrom"] = value;
    }

    get derivedFrom(): Array<Canonical> {
      return this._content["derivedFrom"] as Array<Canonical>;
    }

    /**
     * A free text natural language description of the Topic from the consumer's
     * perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * The period during which the SubscriptionTopic content was or is planned
     * to be effective.
     */
    set effectivePeriod(value: Period) {
      this._content["effectivePeriod"] = value;
    }

    get effectivePeriod(): Period {
      return this._content["effectivePeriod"] as Period;
    }

    /** Event definition which can be used to trigger the SubscriptionTopic. */
    set eventTrigger(value: Array<BackboneElement>) {
      this._content["eventTrigger"] = value;
    }

    get eventTrigger(): Array<BackboneElement> {
      return this._content["eventTrigger"] as Array<BackboneElement>;
    }

    /**
     * A flag to indicate that this TopSubscriptionTopicic is authored for
     * testing purposes (or education/evaluation/marketing), and is not intended
     * to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Business identifiers assigned to this subscription topic by the performer
     * and/or other systems. These identifiers remain constant as the resource
     * is updated and propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A jurisdiction in which the Topic is intended to be used. */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The date on which the asset content was last reviewed. Review happens
     * periodically after that, but doesn't change the original approval date.
     */
    set lastReviewDate(value: Date) {
      this._content["lastReviewDate"] = value;
    }

    get lastReviewDate(): Date {
      return this._content["lastReviewDate"] as Date;
    }

    /**
     * List of properties to describe the shape (e.g., resources) included in
     * notifications from this Subscription Topic.
     */
    set notificationShape(value: Array<BackboneElement>) {
      this._content["notificationShape"] = value;
    }

    get notificationShape(): Array<BackboneElement> {
      return this._content["notificationShape"] as Array<BackboneElement>;
    }

    /**
     * Helps establish the "authority/credibility" of the SubscriptionTopic. May
     * also allow for contact.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /** Explains why this Topic is needed and why it has been designed as it has. */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * A definition of a resource-based event that triggers a notification based
     * on the SubscriptionTopic. The criteria may be just a human readable
     * description and/or a full FHIR search string or FHIRPath expression.
     * Multiple triggers are considered OR joined (e.g., a resource update
     * matching ANY of the definitions will trigger a notification).
     */
    set resourceTrigger(value: Array<BackboneElement>) {
      this._content["resourceTrigger"] = value;
    }

    get resourceTrigger(): Array<BackboneElement> {
      return this._content["resourceTrigger"] as Array<BackboneElement>;
    }

    /** The current state of the SubscriptionTopic. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A short, descriptive, user-friendly title for the SubscriptionTopic, for
     * example, "admission".
     */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this subscription topic when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this subscription topic is (or will be) published. This URL can be the
     * target of a canonical reference. It SHALL remain the same when the
     * subscription topic is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These terms may be used to assist with indexing
     * and searching of code system definitions.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the subscription
     * topic when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the Topic author and is
     * not expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions are orderable.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** A homogeneous material with a definite composition. */
  export class Substance extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Substance";

    /**
     * A code that classifies the general type of substance. This is used for
     * searching, sorting and display purposes.
     */
    set category(value: Array<CodeableConcept>) {
      this._content["category"] = value;
    }

    get category(): Array<CodeableConcept> {
      return this._content["category"] as Array<CodeableConcept>;
    }

    /** A code (or set of codes) that identify this substance. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /**
     * A description of the substance - its appearance, handling requirements,
     * and other usage notes.
     */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /** Unique identifier for the substance. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** A substance can be composed of other substances. */
    set ingredient(value: Array<BackboneElement>) {
      this._content["ingredient"] = value;
    }

    get ingredient(): Array<BackboneElement> {
      return this._content["ingredient"] as Array<BackboneElement>;
    }

    /**
     * Substance may be used to describe a kind of substance, or a specific
     * package/container of the substance: an instance.
     */
    set instance(value: Array<BackboneElement>) {
      this._content["instance"] = value;
    }

    get instance(): Array<BackboneElement> {
      return this._content["instance"] as Array<BackboneElement>;
    }

    /** A code to indicate if the substance is actively used. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }

  /**
   * The detailed description of a substance, typically at a level beyond what
   * is used for prescribing.
   */
  export class SubstanceDefinition extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SubstanceDefinition";

    /**
     * A high level categorization, e.g. polymer or nucleic acid, or food,
     * chemical, biological, or a lower level such as the general types of
     * polymer (linear or branch chain) or type of impurity (process related or
     * contaminant).
     */
    set classification(value: Array<CodeableConcept>) {
      this._content["classification"] = value;
    }

    get classification(): Array<CodeableConcept> {
      return this._content["classification"] as Array<CodeableConcept>;
    }

    /** Codes associated with the substance. */
    set code(value: Array<BackboneElement>) {
      this._content["code"] = value;
    }

    get code(): Array<BackboneElement> {
      return this._content["code"] as Array<BackboneElement>;
    }

    /** Textual description of the substance. */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /** If the substance applies to human or veterinary use. */
    set domain(value: CodeableConcept) {
      this._content["domain"] = value;
    }

    get domain(): CodeableConcept {
      return this._content["domain"] as CodeableConcept;
    }

    /**
     * The quality standard, established benchmark, to which substance complies
     * (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).
     */
    set grade(value: Array<CodeableConcept>) {
      this._content["grade"] = value;
    }

    get grade(): Array<CodeableConcept> {
      return this._content["grade"] as Array<CodeableConcept>;
    }

    /** Identifier by which this substance is known. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Supporting literature. */
    set informationSource(value: Array<Reference>) {
      this._content["informationSource"] = value;
    }

    get informationSource(): Array<Reference> {
      return this._content["informationSource"] as Array<Reference>;
    }

    /**
     * The entity that creates, makes, produces or fabricates the substance.
     * This is a set of potential manufacturers but is not necessarily
     * comprehensive.
     */
    set manufacturer(value: Array<Reference>) {
      this._content["manufacturer"] = value;
    }

    get manufacturer(): Array<Reference> {
      return this._content["manufacturer"] as Array<Reference>;
    }

    /** Moiety, for structural modifications. */
    set moiety(value: Array<BackboneElement>) {
      this._content["moiety"] = value;
    }

    get moiety(): Array<BackboneElement> {
      return this._content["moiety"] as Array<BackboneElement>;
    }

    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic
     * acids).
     */
    set molecularWeight(value: Array<BackboneElement>) {
      this._content["molecularWeight"] = value;
    }

    get molecularWeight(): Array<BackboneElement> {
      return this._content["molecularWeight"] as Array<BackboneElement>;
    }

    /** Names applicable to this substance. */
    set name(value: Array<BackboneElement>) {
      this._content["name"] = value;
    }

    get name(): Array<BackboneElement> {
      return this._content["name"] as Array<BackboneElement>;
    }

    /** Textual comment about the substance's catalogue or registry record. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** General specifications for this substance. */
    set property(value: Array<BackboneElement>) {
      this._content["property"] = value;
    }

    get property(): Array<BackboneElement> {
      return this._content["property"] as Array<BackboneElement>;
    }

    /**
     * A link between this substance and another, with details of the
     * relationship.
     */
    set relationship(value: Array<BackboneElement>) {
      this._content["relationship"] = value;
    }

    get relationship(): Array<BackboneElement> {
      return this._content["relationship"] as Array<BackboneElement>;
    }

    /** Material or taxonomic/anatomical source for the substance. */
    set sourceMaterial(value: BackboneElement) {
      this._content["sourceMaterial"] = value;
    }

    get sourceMaterial(): BackboneElement {
      return this._content["sourceMaterial"] as BackboneElement;
    }

    /** Status of substance within the catalogue e.g. active, retired. */
    set status(value: CodeableConcept) {
      this._content["status"] = value;
    }

    get status(): CodeableConcept {
      return this._content["status"] as CodeableConcept;
    }

    /** Structural information. */
    set structure(value: BackboneElement) {
      this._content["structure"] = value;
    }

    get structure(): BackboneElement {
      return this._content["structure"] as BackboneElement;
    }

    /**
     * An entity that is the source for the substance. It may be different from
     * the manufacturer. Supplier is synonymous to a distributor.
     */
    set supplier(value: Array<Reference>) {
      this._content["supplier"] = value;
    }

    get supplier(): Array<Reference> {
      return this._content["supplier"] as Array<Reference>;
    }

    /** A business level version identifier of the substance. */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** Record of delivery of what is supplied. */
  export class SupplyDelivery extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SupplyDelivery";

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this
     * event.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /**
     * Identification of the facility/location where the Supply was shipped to,
     * as part of the dispense event.
     */
    set destination(value: Reference) {
      this._content["destination"] = value;
    }

    get destination(): Reference {
      return this._content["destination"] as Reference;
    }

    /**
     * Identifier for the supply delivery event that is used to identify it
     * across multiple disparate systems.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** The date or time(s) the activity occurred. */
    set occurrence(value: DateTime | Period | Timing) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    get occurrenceTiming(): Timing {
      return this._content["occurrence"] as Timing;
    }

    /** A larger event of which this particular event is a component or step. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /**
     * A link to a resource representing the person whom the delivered item is
     * for.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** Identifies the person who picked up the Supply. */
    set receiver(value: Array<Reference>) {
      this._content["receiver"] = value;
    }

    get receiver(): Array<Reference> {
      return this._content["receiver"] as Array<Reference>;
    }

    /** A code specifying the state of the dispense event. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** The item that is being delivered or has been supplied. */
    set suppliedItem(value: BackboneElement) {
      this._content["suppliedItem"] = value;
    }

    get suppliedItem(): BackboneElement {
      return this._content["suppliedItem"] as BackboneElement;
    }

    /**
     * The individual responsible for dispensing the medication, supplier or
     * device.
     */
    set supplier(value: Reference) {
      this._content["supplier"] = value;
    }

    get supplier(): Reference {
      return this._content["supplier"] as Reference;
    }

    /**
     * Indicates the type of dispensing event that is performed. Examples
     * include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill,
     * Samples, etc.
     */
    set type(value: CodeableConcept) {
      this._content["type"] = value;
    }

    get type(): CodeableConcept {
      return this._content["type"] as CodeableConcept;
    }
  }

  /**
   * A record of a request for a medication, substance or device used in the
   * healthcare setting.
   */
  export class SupplyRequest extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/SupplyRequest";

    /** When the request was made. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * Category of supply, e.g. central, non-stock, etc. This is used to support
     * work flows associated with the supply process.
     */
    set category(value: CodeableConcept) {
      this._content["category"] = value;
    }

    get category(): CodeableConcept {
      return this._content["category"] as CodeableConcept;
    }

    /** Where the supply is expected to come from. */
    set deliverFrom(value: Reference) {
      this._content["deliverFrom"] = value;
    }

    get deliverFrom(): Reference {
      return this._content["deliverFrom"] as Reference;
    }

    /** Where the supply is destined to go. */
    set deliverTo(value: Reference) {
      this._content["deliverTo"] = value;
    }

    get deliverTo(): Reference {
      return this._content["deliverTo"] as Reference;
    }

    /**
     * Business identifiers assigned to this SupplyRequest by the author and/or
     * other systems. These identifiers remain constant as the resource is
     * updated and propagates from server to server.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * The item that is requested to be supplied. This is either a link to a
     * resource representing the details of the item or a code that identifies
     * the item from a known list.
     */
    set item(value: CodeableConcept | Reference) {
      this._content["item"] = value;
    }

    get itemCodeableConcept(): CodeableConcept {
      return this._content["item"] as CodeableConcept;
    }

    get itemReference(): Reference {
      return this._content["item"] as Reference;
    }

    /** When the request should be fulfilled. */
    set occurrence(value: DateTime | Period | Timing) {
      this._content["occurrence"] = value;
    }

    get occurrenceDateTime(): DateTime {
      return this._content["occurrence"] as DateTime;
    }

    get occurrencePeriod(): Period {
      return this._content["occurrence"] as Period;
    }

    get occurrenceTiming(): Timing {
      return this._content["occurrence"] as Timing;
    }

    /**
     * Specific parameters for the ordered item. For example, the size of the
     * indicated item.
     */
    set parameter(value: Array<BackboneElement>) {
      this._content["parameter"] = value;
    }

    get parameter(): Array<BackboneElement> {
      return this._content["parameter"] as Array<BackboneElement>;
    }

    /**
     * Indicates how quickly this SupplyRequest should be addressed with respect
     * to other requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** The amount that is being ordered of the indicated item. */
    set quantity(value: Quantity) {
      this._content["quantity"] = value;
    }

    get quantity(): Quantity {
      return this._content["quantity"] as Quantity;
    }

    /** The reason why the supply item was requested. */
    set reasonCode(value: Array<CodeableConcept>) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): Array<CodeableConcept> {
      return this._content["reasonCode"] as Array<CodeableConcept>;
    }

    /** The reason why the supply item was requested. */
    set reasonReference(value: Array<Reference>) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Array<Reference> {
      return this._content["reasonReference"] as Array<Reference>;
    }

    /** The device, practitioner, etc. who initiated the request. */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /** Status of the supply request. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** Who is intended to fulfill the request. */
    set supplier(value: Array<Reference>) {
      this._content["supplier"] = value;
    }

    get supplier(): Array<Reference> {
      return this._content["supplier"] as Array<Reference>;
    }
  }

  /** A task to be performed. */
  export class Task extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/Task";

    /** The date and time this task was created. */
    set authoredOn(value: DateTime) {
      this._content["authoredOn"] = value;
    }

    get authoredOn(): DateTime {
      return this._content["authoredOn"] as DateTime;
    }

    /**
     * BasedOn refers to a higher-level authorization that triggered the
     * creation of the task. It references a "request" resource such as a
     * ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which
     * is distinct from the "request" resource the task is seeking to fulfill.
     * This latter resource is referenced by FocusOn. For example, based on a
     * ServiceRequest (= BasedOn), a task is created to fulfill a
     * procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    set basedOn(value: Array<Reference>) {
      this._content["basedOn"] = value;
    }

    get basedOn(): Array<Reference> {
      return this._content["basedOn"] as Array<Reference>;
    }

    /** Contains business-specific nuances of the business state. */
    set businessStatus(value: CodeableConcept) {
      this._content["businessStatus"] = value;
    }

    get businessStatus(): CodeableConcept {
      return this._content["businessStatus"] as CodeableConcept;
    }

    /** A name or code (or both) briefly describing what the task involves. */
    set code(value: CodeableConcept) {
      this._content["code"] = value;
    }

    get code(): CodeableConcept {
      return this._content["code"] as CodeableConcept;
    }

    /** A free-text description of what is to be performed. */
    set description(value: String) {
      this._content["description"] = value;
    }

    get description(): String {
      return this._content["description"] as String;
    }

    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction)
     * during which this task was created.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /**
     * Identifies the time action was first taken against the task (start)
     * and/or the time final action was taken against the task prior to marking
     * it as completed (end).
     */
    set executionPeriod(value: Period) {
      this._content["executionPeriod"] = value;
    }

    get executionPeriod(): Period {
      return this._content["executionPeriod"] as Period;
    }

    /**
     * The request being actioned or the resource being manipulated by this
     * task.
     */
    set focus(value: Reference) {
      this._content["focus"] = value;
    }

    get focus(): Reference {
      return this._content["focus"] as Reference;
    }

    /**
     * The entity who benefits from the performance of the service specified in
     * the task (e.g., the patient).
     */
    set for(value: Reference) {
      this._content["for"] = value;
    }

    get for(): Reference {
      return this._content["for"] as Reference;
    }

    /**
     * An identifier that links together multiple tasks and other requests that
     * were created in the same context.
     */
    set groupIdentifier(value: Identifier) {
      this._content["groupIdentifier"] = value;
    }

    get groupIdentifier(): Identifier {
      return this._content["groupIdentifier"] as Identifier;
    }

    /** The business identifier for this task. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /** Additional information that may be needed in the execution of the task. */
    set input(value: Array<BackboneElement>) {
      this._content["input"] = value;
    }

    get input(): Array<BackboneElement> {
      return this._content["input"] as Array<BackboneElement>;
    }

    /**
     * The URL pointing to a _FHIR_-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this Task.
     */
    set instantiatesCanonical(value: Canonical) {
      this._content["instantiatesCanonical"] = value;
    }

    get instantiatesCanonical(): Canonical {
      return this._content["instantiatesCanonical"] as Canonical;
    }

    /**
     * The URL pointing to an _externally_ maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this Task.
     */
    set instantiatesUri(value: Uri) {
      this._content["instantiatesUri"] = value;
    }

    get instantiatesUri(): Uri {
      return this._content["instantiatesUri"] as Uri;
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be relevant to the Task.
     */
    set insurance(value: Array<Reference>) {
      this._content["insurance"] = value;
    }

    get insurance(): Array<Reference> {
      return this._content["insurance"] as Array<Reference>;
    }

    /**
     * Indicates the "level" of actionability associated with the Task, i.e.
     * i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
     */
    set intent(value: Code) {
      this._content["intent"] = value;
    }

    get intent(): Code {
      return this._content["intent"] as Code;
    }

    /** The date and time of last modification to this task. */
    set lastModified(value: DateTime) {
      this._content["lastModified"] = value;
    }

    get lastModified(): DateTime {
      return this._content["lastModified"] as DateTime;
    }

    /** Principal physical location where the this task is performed. */
    set location(value: Reference) {
      this._content["location"] = value;
    }

    get location(): Reference {
      return this._content["location"] as Reference;
    }

    /** Free-text information captured about the task as it progresses. */
    set note(value: Array<Annotation>) {
      this._content["note"] = value;
    }

    get note(): Array<Annotation> {
      return this._content["note"] as Array<Annotation>;
    }

    /** Outputs produced by the Task. */
    set output(value: Array<BackboneElement>) {
      this._content["output"] = value;
    }

    get output(): Array<BackboneElement> {
      return this._content["output"] as Array<BackboneElement>;
    }

    /**
     * Individual organization or Device currently responsible for task
     * execution.
     */
    set owner(value: Reference) {
      this._content["owner"] = value;
    }

    get owner(): Reference {
      return this._content["owner"] as Reference;
    }

    /** Task that this particular task is part of. */
    set partOf(value: Array<Reference>) {
      this._content["partOf"] = value;
    }

    get partOf(): Array<Reference> {
      return this._content["partOf"] as Array<Reference>;
    }

    /** The kind of participant that should perform the task. */
    set performerType(value: Array<CodeableConcept>) {
      this._content["performerType"] = value;
    }

    get performerType(): Array<CodeableConcept> {
      return this._content["performerType"] as Array<CodeableConcept>;
    }

    /**
     * Indicates how quickly the Task should be addressed with respect to other
     * requests.
     */
    set priority(value: Code) {
      this._content["priority"] = value;
    }

    get priority(): Code {
      return this._content["priority"] as Code;
    }

    /** A description or code indicating why this task needs to be performed. */
    set reasonCode(value: CodeableConcept) {
      this._content["reasonCode"] = value;
    }

    get reasonCode(): CodeableConcept {
      return this._content["reasonCode"] as CodeableConcept;
    }

    /** A resource reference indicating why this task needs to be performed. */
    set reasonReference(value: Reference) {
      this._content["reasonReference"] = value;
    }

    get reasonReference(): Reference {
      return this._content["reasonReference"] as Reference;
    }

    /**
     * Links to Provenance records for past versions of this Task that identify
     * key state transitions or updates that are likely to be relevant to a user
     * looking at the current version of the task.
     */
    set relevantHistory(value: Array<Reference>) {
      this._content["relevantHistory"] = value;
    }

    get relevantHistory(): Array<Reference> {
      return this._content["relevantHistory"] as Array<Reference>;
    }

    /** The creator of the task. */
    set requester(value: Reference) {
      this._content["requester"] = value;
    }

    get requester(): Reference {
      return this._content["requester"] as Reference;
    }

    /**
     * If the Task.focus is a request resource and the task is seeking
     * fulfillment (i.e. is asking for the request to be actioned), this element
     * identifies any limitations on what parts of the referenced request should
     * be actioned.
     */
    set restriction(value: BackboneElement) {
      this._content["restriction"] = value;
    }

    get restriction(): BackboneElement {
      return this._content["restriction"] as BackboneElement;
    }

    /** The current status of the task. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** An explanation as to why this task is held, failed, was refused, etc. */
    set statusReason(value: CodeableConcept) {
      this._content["statusReason"] = value;
    }

    get statusReason(): CodeableConcept {
      return this._content["statusReason"] as CodeableConcept;
    }
  }

  /**
   * A TerminologyCapabilities resource documents a set of capabilities
   * (behaviors) of a FHIR Terminology Server that may be used as a statement of
   * actual server functionality or a statement of required or desired server
   * implementation.
   */
  export class TerminologyCapabilities extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities";

    /** Whether the $closure operation is supported. */
    set closure(value: BackboneElement) {
      this._content["closure"] = value;
    }

    get closure(): BackboneElement {
      return this._content["closure"] as BackboneElement;
    }

    /**
     * The degree to which the server supports the code search parameter on
     * ValueSet, if it is supported.
     */
    set codeSearch(value: Code) {
      this._content["codeSearch"] = value;
    }

    get codeSearch(): Code {
      return this._content["codeSearch"] as Code;
    }

    /**
     * Identifies a code system that is supported by the server. If there is a
     * no code system URL, then this declares the general assumptions a client
     * can make about support for any CodeSystem resource.
     */
    set codeSystem(value: Array<BackboneElement>) {
      this._content["codeSystem"] = value;
    }

    get codeSystem(): Array<BackboneElement> {
      return this._content["codeSystem"] as Array<BackboneElement>;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the terminology capabilities and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the terminology capabilities.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the terminology capabilities was
     * published. The date must change when the business version changes and it
     * must change if the status code changes. In addition, it should change
     * when the substantive content of the terminology capabilities changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the terminology capabilities
     * from a consumer's perspective. Typically, this is used when the
     * capability statement describes a desired rather than an actual solution,
     * for example as a formal expression of requirements as part of an RFP.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * Information about the [ValueSet/$expand](valueset-operation-expand.html)
     * operation.
     */
    set expansion(value: BackboneElement) {
      this._content["expansion"] = value;
    }

    get expansion(): BackboneElement {
      return this._content["expansion"] as BackboneElement;
    }

    /**
     * A Boolean value to indicate that this terminology capabilities is
     * authored for testing purposes (or education/evaluation/marketing) and is
     * not intended to be used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Identifies a specific implementation instance that is described by the
     * terminology capability statement - i.e. a particular installation, rather
     * than the capabilities of a software program.
     */
    set implementation(value: BackboneElement) {
      this._content["implementation"] = value;
    }

    get implementation(): BackboneElement {
      return this._content["implementation"] as BackboneElement;
    }

    /**
     * A legal or geographic region in which the terminology capabilities is
     * intended to be used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The way that this statement is intended to be used, to describe an actual
     * running instance of software, a particular product (kind, not instance of
     * software) or a class of implementation (e.g. a desired purchase).
     */
    set kind(value: Code) {
      this._content["kind"] = value;
    }

    get kind(): Code {
      return this._content["kind"] as Code;
    }

    /** Whether the server supports lockedDate. */
    set lockedDate(value: Boolean) {
      this._content["lockedDate"] = value;
    }

    get lockedDate(): Boolean {
      return this._content["lockedDate"] as Boolean;
    }

    /**
     * A natural language name identifying the terminology capabilities. This
     * name should be usable as an identifier for the module by machine
     * processing applications such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * The name of the organization or individual that published the terminology
     * capabilities.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this terminology capabilities is needed and why it has
     * been designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * Software that is covered by this terminology capability statement. It is
     * used when the statement describes the capabilities of a particular
     * software version, independent of an installation.
     */
    set software(value: BackboneElement) {
      this._content["software"] = value;
    }

    get software(): BackboneElement {
      return this._content["software"] as BackboneElement;
    }

    /**
     * The status of this terminology capabilities. Enables tracking the
     * life-cycle of the content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A short, descriptive, user-friendly title for the terminology
     * capabilities.
     */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * Information about the
     * [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
     */
    set translation(value: BackboneElement) {
      this._content["translation"] = value;
    }

    get translation(): BackboneElement {
      return this._content["translation"] as BackboneElement;
    }

    /**
     * An absolute URI that is used to identify this terminology capabilities
     * when it is referenced in a specification, model, design or an instance;
     * also called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative instance
     * of this terminology capabilities is (or will be) published. This URL can
     * be the target of a canonical reference. It SHALL remain the same when the
     * terminology capabilities is stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate terminology capabilities instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * Information about the
     * [ValueSet/$validate-code](valueset-operation-validate-code.html)
     * operation.
     */
    set validateCode(value: BackboneElement) {
      this._content["validateCode"] = value;
    }

    get validateCode(): BackboneElement {
      return this._content["validateCode"] as BackboneElement;
    }

    /**
     * The identifier that is used to identify this version of the terminology
     * capabilities when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the terminology
     * capabilities author and is not expected to be globally unique. For
     * example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
     * not available. There is also no expectation that versions can be placed
     * in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /** A summary of information based on the results of executing a TestScript. */
  export class TestReport extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/TestReport";

    /**
     * Identifier for the TestScript assigned for external purposes outside the
     * context of FHIR.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /** When the TestScript was executed and this TestReport was generated. */
    set issued(value: DateTime) {
      this._content["issued"] = value;
    }

    get issued(): DateTime {
      return this._content["issued"] as DateTime;
    }

    /** A free text natural language name identifying the executed TestScript. */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * A participant in the test execution, either the execution engine, a
     * client, or a server.
     */
    set participant(value: Array<BackboneElement>) {
      this._content["participant"] = value;
    }

    get participant(): Array<BackboneElement> {
      return this._content["participant"] as Array<BackboneElement>;
    }

    /** The overall result from the execution of the TestScript. */
    set result(value: Code) {
      this._content["result"] = value;
    }

    get result(): Code {
      return this._content["result"] as Code;
    }

    /**
     * The final score (percentage of tests passed) resulting from the execution
     * of the TestScript.
     */
    set score(value: Decimal) {
      this._content["score"] = value;
    }

    get score(): Decimal {
      return this._content["score"] as Decimal;
    }

    /**
     * The results of the series of required setup operations before the tests
     * were executed.
     */
    set setup(value: BackboneElement) {
      this._content["setup"] = value;
    }

    get setup(): BackboneElement {
      return this._content["setup"] as BackboneElement;
    }

    /** The current state of this test report. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * The results of the series of operations required to clean up after all
     * the tests were executed (successfully or otherwise).
     */
    set teardown(value: BackboneElement) {
      this._content["teardown"] = value;
    }

    get teardown(): BackboneElement {
      return this._content["teardown"] as BackboneElement;
    }

    /** A test executed from the test script. */
    set test(value: Array<BackboneElement>) {
      this._content["test"] = value;
    }

    get test(): Array<BackboneElement> {
      return this._content["test"] as Array<BackboneElement>;
    }

    /**
     * Ideally this is an absolute URL that is used to identify the
     * version-specific TestScript that was executed, matching the
     * `TestScript.url`.
     */
    set testScript(value: Reference) {
      this._content["testScript"] = value;
    }

    get testScript(): Reference {
      return this._content["testScript"] as Reference;
    }

    /** Name of the tester producing this report (Organization or individual). */
    set tester(value: String) {
      this._content["tester"] = value;
    }

    get tester(): String {
      return this._content["tester"] as String;
    }
  }

  /**
   * A structured set of tests against a FHIR server or client implementation to
   * determine compliance against the FHIR specification.
   */
  export class TestScript extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/TestScript";

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the test script and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the test script.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the test script was published. The
     * date must change when the business version changes and it must change if
     * the status code changes. In addition, it should change when the
     * substantive content of the test script changes.
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the test script from a
     * consumer's perspective.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * An abstract server used in operations within this test script in the
     * destination element.
     */
    set destination(value: Array<BackboneElement>) {
      this._content["destination"] = value;
    }

    get destination(): Array<BackboneElement> {
      return this._content["destination"] as Array<BackboneElement>;
    }

    /**
     * A Boolean value to indicate that this test script is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * Fixture in the test script - by reference (uri). All fixtures are
     * required for the test script to execute.
     */
    set fixture(value: Array<BackboneElement>) {
      this._content["fixture"] = value;
    }

    get fixture(): Array<BackboneElement> {
      return this._content["fixture"] as Array<BackboneElement>;
    }

    /**
     * A formal identifier that is used to identify this test script when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Identifier) {
      this._content["identifier"] = value;
    }

    get identifier(): Identifier {
      return this._content["identifier"] as Identifier;
    }

    /**
     * A legal or geographic region in which the test script is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * The required capability must exist and are assumed to function correctly
     * on the FHIR server being tested.
     */
    set metadata(value: BackboneElement) {
      this._content["metadata"] = value;
    }

    get metadata(): BackboneElement {
      return this._content["metadata"] as BackboneElement;
    }

    /**
     * A natural language name identifying the test script. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /**
     * An abstract server used in operations within this test script in the
     * origin element.
     */
    set origin(value: Array<BackboneElement>) {
      this._content["origin"] = value;
    }

    get origin(): Array<BackboneElement> {
      return this._content["origin"] as Array<BackboneElement>;
    }

    /** Reference to the profile to be used for validation. */
    set profile(value: Array<Reference>) {
      this._content["profile"] = value;
    }

    get profile(): Array<Reference> {
      return this._content["profile"] as Array<Reference>;
    }

    /**
     * The name of the organization or individual that published the test
     * script.
     */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this test script is needed and why it has been
     * designed as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /** A series of required setup operations before tests are executed. */
    set setup(value: BackboneElement) {
      this._content["setup"] = value;
    }

    get setup(): BackboneElement {
      return this._content["setup"] as BackboneElement;
    }

    /**
     * The status of this test script. Enables tracking the life-cycle of the
     * content.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /**
     * A series of operations required to clean up after all the tests are
     * executed (successfully or otherwise).
     */
    set teardown(value: BackboneElement) {
      this._content["teardown"] = value;
    }

    get teardown(): BackboneElement {
      return this._content["teardown"] as BackboneElement;
    }

    /** A test in this script. */
    set test(value: Array<BackboneElement>) {
      this._content["test"] = value;
    }

    get test(): Array<BackboneElement> {
      return this._content["test"] as Array<BackboneElement>;
    }

    /** A short, descriptive, user-friendly title for the test script. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this test script when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this test
     * script is (or will be) published. This URL can be the target of a
     * canonical reference. It SHALL remain the same when the test script is
     * stored on different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate test script instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * Variable is set based either on element value in response body or on
     * header field value in the response headers.
     */
    set variable(value: Array<BackboneElement>) {
      this._content["variable"] = value;
    }

    get variable(): Array<BackboneElement> {
      return this._content["variable"] as Array<BackboneElement>;
    }

    /**
     * The identifier that is used to identify this version of the test script
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the test script author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * A ValueSet resource instance specifies a set of codes drawn from one or
   * more code systems, intended for use in a particular context. Value sets
   * link between [[[CodeSystem]]] definitions and their use in [coded
   * elements](terminologies.html).
   */
  export class ValueSet extends DomainResource {
    static url: string = "http://hl7.org/fhir/StructureDefinition/ValueSet";

    /**
     * A set of criteria that define the contents of the value set by including
     * or excluding codes selected from the specified code system(s) that the
     * value set draws from. This is also known as the Content Logical
     * Definition (CLD).
     */
    set compose(value: BackboneElement) {
      this._content["compose"] = value;
    }

    get compose(): BackboneElement {
      return this._content["compose"] as BackboneElement;
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    set contact(value: Array<ContactDetail>) {
      this._content["contact"] = value;
    }

    get contact(): Array<ContactDetail> {
      return this._content["contact"] as Array<ContactDetail>;
    }

    /**
     * A copyright statement relating to the value set and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the value set.
     */
    set copyright(value: Markdown) {
      this._content["copyright"] = value;
    }

    get copyright(): Markdown {
      return this._content["copyright"] as Markdown;
    }

    /**
     * The date (and optionally time) when the value set was created or revised
     * (e.g. the 'content logical definition').
     */
    set date(value: DateTime) {
      this._content["date"] = value;
    }

    get date(): DateTime {
      return this._content["date"] as DateTime;
    }

    /**
     * A free text natural language description of the value set from a
     * consumer's perspective. The textual description specifies the span of
     * meanings for concepts to be included within the Value Set Expansion, and
     * also may specify the intended use and limitations of the Value Set.
     */
    set description(value: Markdown) {
      this._content["description"] = value;
    }

    get description(): Markdown {
      return this._content["description"] as Markdown;
    }

    /**
     * A value set can also be "expanded", where the value set is turned into a
     * simple collection of enumerated codes. This element holds the expansion,
     * if it has been performed.
     */
    set expansion(value: BackboneElement) {
      this._content["expansion"] = value;
    }

    get expansion(): BackboneElement {
      return this._content["expansion"] as BackboneElement;
    }

    /**
     * A Boolean value to indicate that this value set is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    set experimental(value: Boolean) {
      this._content["experimental"] = value;
    }

    get experimental(): Boolean {
      return this._content["experimental"] as Boolean;
    }

    /**
     * A formal identifier that is used to identify this value set when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * If this is set to 'true', then no new versions of the content logical
     * definition can be created. Note: Other metadata might still change.
     */
    set immutable(value: Boolean) {
      this._content["immutable"] = value;
    }

    get immutable(): Boolean {
      return this._content["immutable"] as Boolean;
    }

    /**
     * A legal or geographic region in which the value set is intended to be
     * used.
     */
    set jurisdiction(value: Array<CodeableConcept>) {
      this._content["jurisdiction"] = value;
    }

    get jurisdiction(): Array<CodeableConcept> {
      return this._content["jurisdiction"] as Array<CodeableConcept>;
    }

    /**
     * A natural language name identifying the value set. This name should be
     * usable as an identifier for the module by machine processing applications
     * such as code generation.
     */
    set name(value: String) {
      this._content["name"] = value;
    }

    get name(): String {
      return this._content["name"] as String;
    }

    /** The name of the organization or individual that published the value set. */
    set publisher(value: String) {
      this._content["publisher"] = value;
    }

    get publisher(): String {
      return this._content["publisher"] as String;
    }

    /**
     * Explanation of why this value set is needed and why it has been designed
     * as it has.
     */
    set purpose(value: Markdown) {
      this._content["purpose"] = value;
    }

    get purpose(): Markdown {
      return this._content["purpose"] as Markdown;
    }

    /**
     * The status of this value set. Enables tracking the life-cycle of the
     * content. The status of the value set applies to the value set definition
     * (ValueSet.compose) and the associated ValueSet metadata. Expansions do
     * not have a state.
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** A short, descriptive, user-friendly title for the value set. */
    set title(value: String) {
      this._content["title"] = value;
    }

    get title(): String {
      return this._content["title"] as String;
    }

    /**
     * An absolute URI that is used to identify this value set when it is
     * referenced in a specification, model, design or an instance; also called
     * its canonical identifier. This SHOULD be globally unique and SHOULD be a
     * literal address at which at which an authoritative instance of this value
     * set is (or will be) published. This URL can be the target of a canonical
     * reference. It SHALL remain the same when the value set is stored on
     * different servers.
     */
    set url(value: Uri) {
      this._content["url"] = value;
    }

    get url(): Uri {
      return this._content["url"] as Uri;
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs (insurance
     * plans, studies, ...) and may be used to assist with indexing and
     * searching for appropriate value set instances.
     */
    set useContext(value: Array<UsageContext>) {
      this._content["useContext"] = value;
    }

    get useContext(): Array<UsageContext> {
      return this._content["useContext"] as Array<UsageContext>;
    }

    /**
     * The identifier that is used to identify this version of the value set
     * when it is referenced in a specification, model, design or instance. This
     * is an arbitrary value managed by the value set author and is not expected
     * to be globally unique. For example, it might be a timestamp (e.g.
     * yyyymmdd) if a managed version is not available. There is also no
     * expectation that versions can be placed in a lexicographical sequence.
     */
    set version(value: String) {
      this._content["version"] = value;
    }

    get version(): String {
      return this._content["version"] as String;
    }
  }

  /**
   * Describes validation requirements, source(s), status and dates for one or
   * more elements.
   */
  export class VerificationResult extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/VerificationResult";

    /** Information about the entity attesting to information. */
    set attestation(value: BackboneElement) {
      this._content["attestation"] = value;
    }

    get attestation(): BackboneElement {
      return this._content["attestation"] as BackboneElement;
    }

    /** The result if validation fails (fatal; warning; record only; none). */
    set failureAction(value: CodeableConcept) {
      this._content["failureAction"] = value;
    }

    get failureAction(): CodeableConcept {
      return this._content["failureAction"] as CodeableConcept;
    }

    /** Frequency of revalidation. */
    set frequency(value: Timing) {
      this._content["frequency"] = value;
    }

    get frequency(): Timing {
      return this._content["frequency"] as Timing;
    }

    /**
     * The date/time validation was last completed (including failed
     * validations).
     */
    set lastPerformed(value: DateTime) {
      this._content["lastPerformed"] = value;
    }

    get lastPerformed(): DateTime {
      return this._content["lastPerformed"] as DateTime;
    }

    /**
     * The frequency with which the target must be validated (none; initial;
     * periodic).
     */
    set need(value: CodeableConcept) {
      this._content["need"] = value;
    }

    get need(): CodeableConcept {
      return this._content["need"] as CodeableConcept;
    }

    /** The date when target is next validated, if appropriate. */
    set nextScheduled(value: Date) {
      this._content["nextScheduled"] = value;
    }

    get nextScheduled(): Date {
      return this._content["nextScheduled"] as Date;
    }

    /** Information about the primary source(s) involved in validation. */
    set primarySource(value: Array<BackboneElement>) {
      this._content["primarySource"] = value;
    }

    get primarySource(): Array<BackboneElement> {
      return this._content["primarySource"] as Array<BackboneElement>;
    }

    /**
     * The validation status of the target (attested; validated; in process;
     * requires revalidation; validation failed; revalidation failed).
     */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }

    /** When the validation status was updated. */
    set statusDate(value: DateTime) {
      this._content["statusDate"] = value;
    }

    get statusDate(): DateTime {
      return this._content["statusDate"] as DateTime;
    }

    /** A resource that was validated. */
    set target(value: Array<Reference>) {
      this._content["target"] = value;
    }

    get target(): Array<Reference> {
      return this._content["target"] as Array<Reference>;
    }

    /** The fhirpath location(s) within the resource that was validated. */
    set targetLocation(value: Array<String>) {
      this._content["targetLocation"] = value;
    }

    get targetLocation(): Array<String> {
      return this._content["targetLocation"] as Array<String>;
    }

    /**
     * The primary process by which the target is validated (edit check; value
     * set; primary source; multiple sources; standalone; in context).
     */
    set validationProcess(value: Array<CodeableConcept>) {
      this._content["validationProcess"] = value;
    }

    get validationProcess(): Array<CodeableConcept> {
      return this._content["validationProcess"] as Array<CodeableConcept>;
    }

    /**
     * What the target is validated against (nothing; primary source; multiple
     * sources).
     */
    set validationType(value: CodeableConcept) {
      this._content["validationType"] = value;
    }

    get validationType(): CodeableConcept {
      return this._content["validationType"] as CodeableConcept;
    }

    /** Information about the entity validating information. */
    set validator(value: Array<BackboneElement>) {
      this._content["validator"] = value;
    }

    get validator(): Array<BackboneElement> {
      return this._content["validator"] as Array<BackboneElement>;
    }
  }

  /**
   * An authorization for the provision of glasses and/or contact lenses to a
   * patient.
   */
  export class VisionPrescription extends DomainResource {
    static url: string =
      "http://hl7.org/fhir/StructureDefinition/VisionPrescription";

    /** The date this resource was created. */
    set created(value: DateTime) {
      this._content["created"] = value;
    }

    get created(): DateTime {
      return this._content["created"] as DateTime;
    }

    /** The date (and perhaps time) when the prescription was written. */
    set dateWritten(value: DateTime) {
      this._content["dateWritten"] = value;
    }

    get dateWritten(): DateTime {
      return this._content["dateWritten"] as DateTime;
    }

    /**
     * A reference to a resource that identifies the particular occurrence of
     * contact between patient and health care provider during which the
     * prescription was issued.
     */
    set encounter(value: Reference) {
      this._content["encounter"] = value;
    }

    get encounter(): Reference {
      return this._content["encounter"] as Reference;
    }

    /** A unique identifier assigned to this vision prescription. */
    set identifier(value: Array<Identifier>) {
      this._content["identifier"] = value;
    }

    get identifier(): Array<Identifier> {
      return this._content["identifier"] as Array<Identifier>;
    }

    /**
     * Contain the details of the individual lens specifications and serves as
     * the authorization for the fullfillment by certified professionals.
     */
    set lensSpecification(value: Array<BackboneElement>) {
      this._content["lensSpecification"] = value;
    }

    get lensSpecification(): Array<BackboneElement> {
      return this._content["lensSpecification"] as Array<BackboneElement>;
    }

    /**
     * A resource reference to the person to whom the vision prescription
     * applies.
     */
    set patient(value: Reference) {
      this._content["patient"] = value;
    }

    get patient(): Reference {
      return this._content["patient"] as Reference;
    }

    /** The healthcare professional responsible for authorizing the prescription. */
    set prescriber(value: Reference) {
      this._content["prescriber"] = value;
    }

    get prescriber(): Reference {
      return this._content["prescriber"] as Reference;
    }

    /** The status of the resource instance. */
    set status(value: Code) {
      this._content["status"] = value;
    }

    get status(): Code {
      return this._content["status"] as Code;
    }
  }
}
