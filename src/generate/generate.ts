import { format } from "prettier";
import { Project, IndentationText, NewLineKind, SourceFile } from "ts-morph";
import { writeFileSync } from "fs";
import { makeTypeAliases } from "./make-type-aliases";
import Promise from "bluebird";
import { classes } from "./seeds";
import fhirpath from "fhirpath";
import { makeStructure } from "./make-structure";
import { underscore, camelize } from "inflected";

function finish(status: number, outputFile: string, sourceFile: SourceFile) {
  let text = sourceFile.getFullText();
  try {
    console.log(`Formatting text...`);
    text = format(text, {
      parser: "babel-ts",
      semi: true,
      printWidth: 80,
      useTabs: false,
      endOfLine: "lf",
      trailingComma: "all",
      filepath: outputFile,
      proseWrap: "always",
      plugins: ["prettier-plugin-jsdoc"],
    });
  } catch (error: any) {
    console.error(`ERROR: Couldn't format text: ${error.message}`);
  }

  console.log(`Writing content to "${outputFile}".`);
  writeFileSync(outputFile, text);

  process.exit(status);
}

interface GenerateOptions {
  outputFile: string;
  target: string;
  version: string;
  structures: any[];
}

export async function generate(options: GenerateOptions) {
  const { outputFile, target, version, structures } = options;

  if (target) {
    console.log(`Will stop generation after ${target}.`);
  }

  const project = new Project({
    manipulationSettings: {
      indentationText: IndentationText.TwoSpaces,
      newLineKind: NewLineKind.LineFeed,
      useTrailingCommas: true,
    },
  });

  const sourceFile = project.createSourceFile(`fhir-${version}.ts`, {
    statements: [`// Autogenerated by src/generate.  Do not edit!`],
  });

  const ns = sourceFile.addModule({
    name: camelize(`fhir_${version}`),
  });

  // Add the type.  We will be dynamically updating this as we iterate
  // through the file, but we need to do it here to make sure it's at the
  // the front of the file.
  ns.addTypeAliases(makeTypeAliases(structures));

  // Add the seeds to the front.
  await Promise.each(classes, async (seed) => {
    let sd = await fhirpath.evaluate(
      structures,
      "where(name = %name)",
      seed
    )[0];

    if (!sd) {
      console.log(`Warning: inferring seed class sd for ${seed.name}`);
      sd = {
        url: `http://hl7.org/fhir/StructureDefinition/Element/${seed.name}`,
        name: seed.name,
        kind: "complex-type",
      };
      structures.push(sd);
    }

    console.log(`Building seed class ${seed.name} (${sd.url})...`);
    await makeStructure(ns, structures, sd);
    if (seed.name == target) {
      finish(0, outputFile, sourceFile);
    }
  });

  // Construct a list of artifacts to create attempting to ensure baseClasses are placed
  // at the top of the file.
  await Promise.each(
    fhirpath.evaluate(
      structures,
      `(  where(baseDefinition.exists() != true and abstract=true) 
          | where(abstract = true)
          | where(kind='primitive-type')
          | where(kind='complex-type')
          | where(kind='resource')
        ).distinct()`
    ),
    async function (sd) {
      console.log(`Building constructed class ${sd.name} (${sd.url})...`);
      await makeStructure(ns, structures, sd);
      if (sd.name == target) {
        finish(0, outputFile, sourceFile);
      }
    }
  );

  finish(0, outputFile, sourceFile);
  console.log(`Output ${version} to ${outputFile}`);
}
