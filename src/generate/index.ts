import axios from "axios";
import { Command } from "commander";
import { dirname } from "path";
import { streamToBuffer } from "@jorgeferrero/stream-to-buffer";
import fhirpath from "fhirpath";
import unzipStream from "unzip-stream";
import { decode } from "ini";
import { existsSync, mkdirSync, writeFileSync } from "fs";
import { Project } from "ts-morph";
import { primitiveTypeFactory } from "./primitive-type-factory";

const program = new Command();
program
  .argument(
    "[definitions]",
    "Path to full FHIR definitions (e.g. http://hl7.org/fhir/definitions.json.zip)",
    "http://hl7.org/fhir/definitions.json.zip"
  )
  .option(
    "--output, -o [output]",
    "Redirect output file (defaults to src/fhir/fhir-${version}.ts"
  )
  .action(async (definitions, options, command) => {
    let info: { [key: string]: any } = {};
    let profilesTypes: { [key: string]: any } = {};
    let profilesResources: { [key: string]: any } = {};
    let outputFile = options.outputFile;

    let response = await axios({
      method: "GET",
      responseType: "stream",
      url: definitions,
    });
    await new Promise((resolve, reject) => {
      response.data
        .pipe(unzipStream.Parse())
        .on("entry", async function (entry: any) {
          if (entry.path === "version.info") {
            info = decode(
              (
                await streamToBuffer(entry as unknown as NodeJS.ReadableStream)
              ).toString()
            );
            console.log(`Got version of ${info.FHIR.version}`);
          } else if (entry.path == "profiles-types.json") {
            profilesTypes = JSON.parse(
              (
                await streamToBuffer(entry as unknown as NodeJS.ReadableStream)
              ).toString()
            );
          } else if (entry.path == "profiles-resources.json") {
            profilesResources = JSON.parse(
              (
                await streamToBuffer(entry as unknown as NodeJS.ReadableStream)
              ).toString()
            );
          } else {
            entry.autodrain();
            console.error(`Unknown file: ${entry.path}`);
          }
        })
        .on("end", () => resolve(undefined))
        .on("error", (err: Error) => reject(err));
    });

    const version = info.FHIR.version;
    if (!outputFile) {
      if (!process.env.npm_config_local_prefix) {
        throw new Error(
          `Couldn't identify source path.  Please run this command through 'npm run generate' or else specify the output file with the -o option!`
        );
      }
      outputFile = `${process.env.npm_config_local_prefix}/src/fhir/fhir-${version}.ts`;
    }

    if (!existsSync(dirname(outputFile))) {
      mkdirSync(dirname(outputFile));
    }

    const project = new Project({});
    const sourceFile = project.createSourceFile(
      `fhir-${version}.ts`,
      `// Autogenerated by src/generate.  Do not edit!`
    );

    for (let sd of fhirpath.evaluate(
      profilesTypes,
      "Bundle.entry.where(resource.kind='primitive-type')"
    )) {
      await primitiveTypeFactory(sourceFile, sd);
    }

    writeFileSync(outputFile, sourceFile.getText());
    console.log(`Output written to ${outputFile}.`);
  })
  .parseAsync()
  .catch(console.error);
